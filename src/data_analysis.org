#+AUTHOR: David R. Hill, PhD
#+TITLE: Bacterial association stimulates a complex physiological response in immature human intestinal epithelium
* Print to PDF and docx
#+begin_src makefile :tangle ../makefile :results silent :exports none :eval no
## LaTeX Makefile
## define shorthand file names for text
TEXT=./src/elife_format
TEXTBR=./src/complete_paper
FINALTEXT=Hill_eLife
BIORXIV=Hill_bioRxiv

## output to eLife PDF
pdf: $(FINALTEXT).pdf
$(FINALTEXT).pdf: $(TEXT).tex ./src/bibliography.bib \
	./figures/figure1/figure1_multipanel.pdf \
	./figures/figure2/figure2_multipanel.pdf \
	./figures/figure3/figure3_multipanel.pdf \
	./figures/figure4/figure4_multipanel.pdf \
	./figures/figure5/figure5_multipanel.pdf \
	./figures/figure6/figure6_multipanel.pdf \
	./figures/figure7/figure7_multipanel.pdf \
	./figures/figure8/figure8_multipanel.pdf		
	pdflatex -output-directory src $(TEXT)
	pdflatex -output-directory src $(TEXT)
	cp ./src/bibliography.bib ./
	cp ./src/elife.cls ./
	cp ./src/vancouver-elife.bst ./
	bibtex $(TEXT)
	pdflatex -output-directory src $(TEXT)
	pdflatex -output-directory src $(TEXT)
	mv $(TEXT).pdf $(FINALTEXT).pdf
	rm *.bib *.cls *.bst

## output "track changes" pdf
changes: $(FINALTEXT)_changes.pdf
$(FINALTEXT)_changes.pdf: $(TEXT).tex ./src/bibliography.bib \
	./figures/figure1/figure1_multipanel.pdf \
	./figures/figure2/figure2_multipanel.pdf \
	./figures/figure3/figure3_multipanel.pdf \
	./figures/figure4/figure4_multipanel.pdf \
	./figures/figure5/figure5_multipanel.pdf \
	./figures/figure6/figure6_multipanel.pdf \
	./figures/figure7/figure7_multipanel.pdf \
	./figures/figure8/figure8_multipanel.pdf \
	./revisions/elife-1st-submission.tex
	latexdiff --type=UNDERLINE ./revisions/elife-1st-submission.tex $(TEXT).tex > $(TEXT)_changes.tex
	pdflatex -output-directory src $(TEXT)_changes
	pdflatex -output-directory src $(TEXT)_changes
	cp ./src/bibliography.bib ./
	cp ./src/elife.cls ./
	cp ./src/vancouver-elife.bst ./
	bibtex $(TEXT)_changes
	pdflatex -output-directory src $(TEXT)_changes
	pdflatex -output-directory src $(TEXT)_changes
	mv $(TEXT)_changes.pdf $(FINALTEXT)_changes.pdf
	rm *.bib *.cls *.bst 

## output to bioRxiv PDF
## work in progress, partially working
br-pdf: $(BIORXIV).pdf
$(BIORXIV).pdf: $(TEXTBR).tex ./src/bibliography.bib \
	./figures/figure1/figure1_multipanel.pdf \
	./figures/figure2/figure2_multipanel.pdf \
	./figures/figure3/figure3_multipanel.pdf \
	./figures/figure4/figure4_multipanel.pdf \
	./figures/figure5/figure5_multipanel.pdf \
	./figures/figure6/figure6_multipanel.pdf \
	./figures/figure7/figure7_multipanel.pdf \
	./figures/figure8/figure8_multipanel.pdf		
	pdflatex -output-directory src $(TEXTBR)
	pdflatex -output-directory src $(TEXTBR)
	cp ./src/bibliography.bib ./
	cp ./src/elsarticle.cls ./
	cp ./src/model2-names.bst ./
	bibtex $(TEXTBR)
	pdflatex -output-directory src $(TEXTBR)
	pdflatex -output-directory src $(TEXTBR)
	mv $(TEXTBR).pdf $(BIORXIV).pdf
	rm *.bib *.cls *.bst

## supplemental figures
supplements: ./supplements/figure1_supplement1.pdf \
	./supplements/figure5_supplement1.pdf \
	./supplements/figure5_supplement2.pdf \
	./supplements/figure6_supplement1.pdf \
	./supplements/figure7_supplement1.pdf \
	./supplements/figure8_supplement1.pdf

./supplements/figure1_supplement1.pdf: ./src/figure1_supplement1.tex
	pdflatex -output-directory src ./src/figure1_supplement1
	pdflatex -output-directory src ./src/figure1_supplement1
	cp ./src/bibliography.bib ./
	cp ./src/elsarticle.cls ./
	cp ./src/model2-names.bst ./
	mv ./src/figure1_supplement1.pdf ./supplements/figure1_supplement1.pdf
	rm *.bib *.cls *.bst

./supplements/figure1_supplement2.pdf: ./src/figure1_supplement2.tex
	pdflatex -output-directory src ./src/figure1_supplement2
	pdflatex -output-directory src ./src/figure1_supplement2
	cp ./src/bibliography.bib ./
	cp ./src/elsarticle.cls ./
	cp ./src/model2-names.bst ./
	mv ./src/figure1_supplement2.pdf ./supplements/figure1_supplement2.pdf
	rm *.bib *.cls *.bst

./supplements/figure1_supplement3.pdf: ./src/figure1_supplement3.tex
	pdflatex -output-directory src ./src/figure1_supplement3
	pdflatex -output-directory src ./src/figure1_supplement3
	cp ./src/bibliography.bib ./
	cp ./src/elsarticle.cls ./
	cp ./src/model2-names.bst ./
	mv ./src/figure1_supplement3.pdf ./supplements/figure1_supplement3.pdf
	rm *.bib *.cls *.bst

./supplements/figure5_supplement1.pdf: ./src/figure5_supplement1.tex
	pdflatex -output-directory src ./src/figure5_supplement1
	pdflatex -output-directory src ./src/figure5_supplement1
	cp ./src/bibliography.bib ./
	cp ./src/elsarticle.cls ./
	cp ./src/model2-names.bst ./
	mv ./src/figure5_supplement1.pdf ./supplements/figure5_supplement1.pdf
	rm *.bib *.cls *.bst

./supplements/figure5_supplement2.pdf: ./src/figure5_supplement2.tex
	pdflatex -output-directory src ./src/figure5_supplement2
	pdflatex -output-directory src ./src/figure5_supplement2
	cp ./src/bibliography.bib ./
	cp ./src/elsarticle.cls ./
	cp ./src/model2-names.bst ./
	mv ./src/figure5_supplement2.pdf ./supplements/figure5_supplement2.pdf
	rm *.bib *.cls *.bst

./supplements/figure5_supplement3.pdf: ./src/figure5_supplement3.tex
	pdflatex -output-directory src ./src/figure5_supplement3
	pdflatex -output-directory src ./src/figure5_supplement3
	cp ./src/bibliography.bib ./
	cp ./src/elsarticle.cls ./
	cp ./src/model2-names.bst ./
	mv ./src/figure5_supplement3.pdf ./supplements/figure5_supplement3.pdf
	rm *.bib *.cls *.bst

./supplements/figure6_supplement1.pdf: ./src/figure6_supplement1.tex
	pdflatex -output-directory src ./src/figure6_supplement1
	pdflatex -output-directory src ./src/figure6_supplement1
	cp ./src/bibliography.bib ./
	cp ./src/elsarticle.cls ./
	cp ./src/model2-names.bst ./
	mv ./src/figure6_supplement1.pdf ./supplements/figure6_supplement1.pdf
	rm *.bib *.cls *.bst

./supplements/figure6_supplement2.pdf: ./src/figure6_supplement2.tex
	pdflatex -output-directory src ./src/figure6_supplement2
	pdflatex -output-directory src ./src/figure6_supplement2
	cp ./src/bibliography.bib ./
	cp ./src/elsarticle.cls ./
	cp ./src/model2-names.bst ./
	mv ./src/figure6_supplement2.pdf ./supplements/figure6_supplement2.pdf
	rm *.bib *.cls *.bst

./supplements/figure7_supplement1.pdf: ./src/figure7_supplement1.tex
	pdflatex -output-directory src ./src/figure7_supplement1
	pdflatex -output-directory src ./src/figure7_supplement1
	cp ./src/bibliography.bib ./
	cp ./src/elsarticle.cls ./
	cp ./src/model2-names.bst ./
	mv ./src/figure7_supplement1.pdf ./supplements/figure7_supplement1.pdf
	rm *.bib *.cls *.bst

./supplements/figure8_supplement1.pdf: ./src/figure8_supplement1.tex
	pdflatex -output-directory src ./src/figure8_supplement1
	pdflatex -output-directory src ./src/figure8_supplement1
	cp ./src/bibliography.bib ./
	cp ./src/elsarticle.cls ./
	cp ./src/model2-names.bst ./
	mv ./src/figure8_supplement1.pdf ./supplements/figure8_supplement1.pdf
	rm *.bib *.cls *.bst

## output oly
figures: $(FINALTEXT)_figures.pdf
$(FINALTEXT)_figures.pdf : ./src/figures_only.tex
	pdflatex -output-directory src ./src/figures_only
	mv ./src/figures_only.pdf $(FINALTEXT)figures.pdf

## output to DOCX
docx: $(FINALTEXT).docx
$(FINALTEXT).docx: $(TEXT).tex
	cp $(TEXT).tex $(TEXT)_docx_reformat.tex
	sed -i 's/pdf/png/g' $(TEXT)_docx_reformat.tex # use png versions of figures
	sed -i 's/\\(\\kappa\\)/κ/g' $(TEXT)_docx_reformat.tex
	sed -i 's/\\(\\beta\\)/β/g' $(TEXT)_docx_reformat.tex
	sed -i 's/\\(\\alpha\\)/α/g' $(TEXT)_docx_reformat.tex
	sed -i 's/\\(\\mu\\)/μ/g' $(TEXT)_docx_reformat.tex
	sed -i 's/\\(\\gamma\\)/γ/g' $(TEXT)_docx_reformat.tex
	sed -i 's/{\"i}/ï/g' $(TEXT)_docx_reformat.tex
	sed -i 's/\\pm/±/g' $(TEXT)_docx_reformat.tex
	sed -i 's/\num{//g' $(TEXT)_docx_reformat.tex
	sed -i 's/\\(_{\\text{2}}\\)/₂/g' $(TEXT)_docx_reformat.tex
	sed -i 's/\\(^{\\text{2}}\\)/²/g' $(TEXT)_docx_reformat.tex
	pandoc --bibliography=./src/bibliography.bib --filter pandoc-citeproc  $(TEXT)_docx_reformat.tex -o $(FINALTEXT).docx

.PHONY: clean
clean:
	cd src && rm *.aux *.blg *.out *.bbl *.log
#+end_src

* Plotting theme
#+begin_src R :session *R* :results silent :exports none :eval yes :tangle ggplot2-themes.R
## Custom themes for Hill et al. 2017 manuscript
library(ggplot2)
## Load standard theme ----------------------------------------------------------
library(ggplot2)
library(grid)
theme1 <-  theme(axis.text.x = element_text(size = 24,
                                            angle = 0,
                                            hjust = 0.5,
                                            face = "bold"),
                 axis.text.y = element_text(size = 24,
                                            face = "bold",
                                            hjust = 1),
                 legend.position = "none",
		 legend.key = element_rect(fill = "white"),
                 panel.background = element_rect(fill = "white"),
                 ## Remove gid background
                 ## panel.grid.major=element_line(size=0.5,
                 ##                               color = "grey40",
                 ##                               linetype = "dashed"),
                 ## panel.grid.minor=element_line(size=0.5, # element_blank()
                 ##                               color = "grey70",
                 ##                               linetype = "dashed"),
                 plot.subtitle = element_text(size = 26, hjust = 0.5, face = "bold"),
                 panel.grid.major = element_blank(),
                 panel.grid.minor = element_blank(),
                 axis.title = element_text(size = 32,
                                           face = "bold"),
                 axis.title.y = element_text(vjust = 1.5),
                 axis.title.x = element_text(vjust = -0.5),
                 legend.title = element_blank(),
		 # panel.border = element_rect(fill = NA, color = "white"),
                 ## add black border to panel
		 panel.border = element_rect(fill = NA,
                                              color = "grey70",
                                              size = 1),
                 plot.title = element_text(size = 45,
                                           face = "bold",
                                             hjust = 0),
                 legend.text = element_text(size = 18,
                                            face = "bold"))


## Standard color palettes ------------------------------------------------------
library(RColorBrewer) 
color.set <- brewer.pal(n = 8, name = "Set1")
paired.set <- brewer.pal(n = 11, name = "Paired")
red.set <- brewer.pal(n = 8, name = "Reds")
green.set <- brewer.pal(n = 8, name = "Greens")
blue.set <- brewer.pal(n = 8, name = "Blues")
paired.set <- brewer.pal(n = 10, name = "Paired")

library(wesanderson)
la.set <- wes_palette("Zissou", 5, type = "discrete")

## blank theme for importing images into ggplot2 -------------------------------
img.theme <- theme(panel.grid.major = element_blank(),
                   panel.grid.minor = element_blank(),
                   panel.border = element_blank(),
                   axis.text.x = element_blank(),
                   axis.text.y = element_blank(),
                   axis.ticks  =  element_blank(),
                   axis.title.x = element_blank(),
                   axis.title.y = element_blank(),
                   plot.title  =  element_text(size = 45,
                                             face = "bold",
                                             hjust  =  0), 
                   legend.position = "none")

#+end_src
* Custom functions
#+begin_src R :session *R* :results silent :exports none :eval yes :tangle custom_fun.R
## Revised GSEA plot function --------------------------------------------------
## modified from https://github.com/GuangchuangYu/clusterProfiler
gseaplot2 <- function (gseaResult, geneSetID, by = "all") 
{
    by <- match.arg(by, c("runningScore", "position", "all"))
    x <- ymin <- ymax <- runningScore <- es <- pos <- geneList <- NULL
    p <- ggplot(gseaResult, geneSetID = geneSetID,
                aes(x = x, 
                    ymin = ymin, ymax = ymax))  +
        xlab("Position in the Ranked List of Genes")
    if (by == "runningScore" || by == "all") {
        p.res <- p 
        p.res <- p.res + geom_area(aes(y = runningScore), fill = "grey90")
        p.res <- p.res + geom_line(aes(y = runningScore), size = 3)
	p.res <- p.res + geom_linerange(colour = color.set[1])
        enrichmentScore <- gseaResult@result[geneSetID, "enrichmentScore"]
        es.df <- data.frame(es = which(p$data$runningScore == 
            enrichmentScore))
        p.res <- p.res + geom_vline(data = es.df, aes(xintercept = es), 
            colour = color.set[1], linetype = "dashed")
        p.res <- p.res + ylab("Running Enrichment Score")
        p.res <- p.res + geom_hline(aes(yintercept = 0))
    }
    if (by == "position" || by == "all") {
        df2 <- data.frame(pos = which(p$data$position == 1))
        p.pos <- p + geom_vline(data = df2, aes(xintercept = pos), 
            colour = "#DAB546", alpha = 0.3)
        p.pos <- p.pos + geom_line(aes(y = geneList), colour = "red")
        p.pos <- p.pos + ylab("Phenotype")
        p.pos <- p.pos + geom_hline(aes(yintercept = 0))
    }
    if (by == "runningScore") 
        return(p.res)
    if (by == "position") 
        return(p.pos)

    p.res <- p.res + theme(axis.title.x = element_text(vjust = -0.3))
    return(p.res)
}

## Convert PNG to ggplot object ------------------------------------------------
png2ggplot <- function(filename) {
    library(ggplot2)
    img <- png::readPNG(filename, native = TRUE)
    grob <- grid::rasterGrob(img, interpolate = FALSE)
    fig <- qplot(1:100, 1:100, alpha = I(0)) +
        theme_bw() +
      #  geom_point(size = 0, color = "white") +
        annotation_custom(grob, xmin = -Inf,
                          xmax = Inf,
                          ymin = -Inf,
                          ymax = Inf) 
        #coord_fixed(ratio = 1) 
    return(fig)
}

## GET EQUATION AND R-SQUARED AS STRING ----------------------------------------
## SOURCE: http://goo.gl/K4yh
lm_eqn <- function(df,x,y){
    m <- lm(log(y) ~ log(x), df)
    eq <- substitute(italic(y) == 10^(a + b %.% italic(log(x)))*","~~italic(r)^2~"="~r2*","~~italic(P)~"="~pv, 
                     list(a = format(coef(m)[1], digits = 2), 
                          b = format(coef(m)[2], digits = 2),
                          pv = format(anova(m)$'Pr(>F)'[1],digits = 3), 
                          r2 = format(summary(m)$r.squared, digits = 3)))
    as.character(as.expression(eq))                 
}

lm_eqn2 <- function(df,x,y){
    m <- lm(y ~ log(x), df, na.action = 'na.exclude')
    eq <- substitute(italic(y) == a + b %.% italic(log(x))*","~~italic(r)^2~"="~r2*","~~italic(P)~"="~pv, 
                     list(a = format(coef(m)[1], digits = 2), 
                          b = format(coef(m)[2], digits = 2),
                          pv = format(anova(m)$'Pr(>F)'[1],digits = 3), 
                          r2 = format(summary(m)$r.squared, digits = 3)))
    as.character(as.expression(eq))                 
}

## function to format decimals as precentage -----------------------------------
percent <- function(x, digits = 2, format = "f", ...) {
  paste0(formatC(100 * x, format = format, digits = digits, ...), "%")
}
## t-test
# m1, m2: the sample means
# s1, s2: the sample standard deviations
# n1, n2: the same sizes
# m0: the null value for the difference in means to be tested for. Default is 0. 
# equal.variance: whether or not to assume equal variance. Default is FALSE. 
t.test2 <- function(m1,m2,s1,s2,n1,n2,m0=0,equal.variance=FALSE)
{
    if( equal.variance==FALSE ) 
    {
        se <- sqrt( (s1^2/n1) + (s2^2/n2) )
        # welch-satterthwaite df
        df <- ( (s1^2/n1 + s2^2/n2)^2 )/( (s1^2/n1)^2/(n1-1) + (s2^2/n2)^2/(n2-1) )
    } else
    {
        # pooled standard deviation, scaled by the sample sizes
        se <- sqrt( (1/n1 + 1/n2) * ((n1-1)*s1^2 + (n2-1)*s2^2)/(n1+n2-2) ) 
        df <- n1+n2-2
    }      
    t <- (m1-m2-m0)/se 
    dat <- c(m1-m2, se, t, 2*pt(-abs(t),df))    
    names(dat) <- c("Difference of means", "Std Error", "t", "p-value")
    return(dat) 
}

## create placeholder ggplot with test
fillerggplot <- function(text) {
    library(ggplot2)
    fig <- qplot(1:100, 1:100, alpha = I(0)) +
        theme_bw() + img.theme +
        annotate("text", x = 50, y = 50, label = text, size = 20)
      #  geom_point(size = 0, color = "white") +
        #coord_fixed(ratio = 1) 
    return(fig)
}
#+end_src

* Figure 1 

** Rscript

*** Figure 1A: /E. coli/ density increases rapidly following HIO microinjection 

**** Data import and manipulation 
#+begin_src R :session *R* :results silent :exports none :eval yes :tangle figure_Rscripts/figure1.R
## FIGURE 1 --------------------------------------------------------------------
## Figure 1A: /E. coli/ density increases rapidly following HIO microinjection
## import data
data <- readr::read_csv(file = "../data/figure1/010716_01_R3D.csv")
#+end_src

**** Generate plot
#+begin_src R :session *R* :exports none :results graphics :file ../figures/figure1/figure1a.png :eval yes :tangle figure_Rscripts/figure1.R
## plot
library(ggplot2)
library(scales)
source("ggplot2-themes.R")

figure1a <- ggplot(data = data[data$hr <= 18,], aes(x = hr, y = Median*Area)) +
    geom_point(shape = 21, fill = color.set[3], size = 8) +
    xlab("Time post-microinjection (h)") +
    ylab(expression("Mean fluorescent intensity" %*% "pixel area")) +   
    scale_x_continuous(breaks = c(0, 3, 6, 9, 12, 15, 18)) +       
    scale_y_log10(
        breaks = trans_breaks("log10", function(x) 10^x)(c(1, 1e7)),
                  labels = trans_format("log10", math_format(10^.x))) +
    annotation_logticks(sides = "l", size = 1,
                        short = unit(.75,"mm"),
                        mid = unit(3,"mm"),
                        long = unit(5,"mm"))+       
    theme1 + ggtitle("A")

source("custom_fun.R")
fig <- png2ggplot("../data/figure1/010716/010716_01_R3D_w594_t01.png") +
    img.theme + coord_fixed(ratio = 1/4)

library(gridExtra)
layout <- rbind(c(2,2),
                c(2,2),
                c(2,2),
                c(1,1))


png(filename = "../figures/figure1/figure1a.png", width = 800, height = 800)

grid.arrange(fig, figure1a,
             layout_matrix = layout)
dev.off()

ggsave(filename = "../figures/figure1/eps/figure1a.eps", 
       plot = gridExtra::grid.arrange(fig, figure1a,
             layout_matrix = layout), 
       width = 16, height = 16)
         
 #+end_src

 #+RESULTS:
 [[file:../figures/figure1/figure1a.png]]
*** Figure 1C: Maximum /E. coli/ density is 10^{5} CFU/HIO
    
**** Data import and manipulation 
#+begin_src R :session *R* :results silent :exports none :eval yes :tangle figure_Rscripts/figure1.R
## FIGURE 1C --------------------------------------------------------------------
## Figure 1C: Figure 1C: Maximum /E. coli/ density is 10^{5} CFU/HIO
## import data
## import data
data <- read.csv(file = "../data/figure1/ECOR2growth_fig1.csv",
                 header =  TRUE, stringsAsFactors = FALSE)

## Index of CFU/HIO injected for each Sample condition (A-G)
sample.table <- read.table("../data/figure1/sample_table_fig1.csv",
                           header = TRUE, sep = ",", stringsAsFactors = FALSE)

## Generate index of rows in sample table that match the sample labels in data
id <- match(data$sample,sample.table$sample)
## create column in data of of CFU/HIO values in sample table in matching rows listed in id
data$inject <- sample.table[id,]$value
data$fold <- data$mean/data$inject
data$increase <- ifelse(data$mean > data$inject,"increase","decrease")
## generate stats string for plot
source("custom_fun.R")
stats <- lm_eqn(data[data$inject > 0 & data$fold !=0,],
                data[data$inject > 0 & data$fold !=0,]$inject,
                data[data$inject > 0 & data$fold !=0,]$fold)
#+end_src
     
**** Generate plot
#+begin_src R :session *R* :exports none :results graphics :file ../figures/figure1/figure1c.png :eval yes :tangle figure_Rscripts/figure1.R
library(ggplot2)
library(scales)
source("ggplot2-themes.R")

figure1c <- ggplot(data, aes(x = inject, y = fold)) +
    geom_smooth(data = data[data$inject > 0 & data$fold !=0,],
                aes(x=inject, y=fold), colour = "black",
                size = 2,
                method = "lm",
                formula = y ~ x,
                level = 0.95) +
    geom_hline(yintercept = 1, color = "black", size = 0.5, linetype = "dashed") +
    geom_point(size = 8,shape = 21, fill=color.set[2]) + 
    ylab(latex2exp::TeX("$\\textbf{$\\frac{CFU$\\cdot{}HIO_{$\\textit{t}=24}^{-1}}{CFU$\\cdot{}HIO_{$\\textit{t}=0}^{-1}}}$")) +
    ggtitle("C") + 
    xlab("CFU injected per HIO") + theme1 + 
    scale_y_log10(breaks = trans_breaks("log10", function(x) 10^x),
                  labels = trans_format("log10", math_format(10^.x))) +
    scale_x_log10(limits = c(10, 1e5),
                  breaks = trans_breaks("log10", function(x) 10^x),
                  labels = trans_format("log10", math_format(10^.x))) +
    annotation_logticks(sides="bl",size= 2) +
    scale_fill_brewer(palette = "Set1") + 
    scale_color_brewer(palette = "Set1") +
    ## size of stats label
    annotate("text",x = 1000, y = 100000,
                           label = substr(stats,62,150),
                           parse = TRUE,
                           size = 10) +
    theme(axis.title.y = element_text(vjust =-0.8))

png(filename = "../figures/figure1/figure1c.png", width = 800, height = 800)
print(figure1c)
dev.off()

ggsave(filename = "../figures/figure1/eps/figure1c.eps", 
       plot = figure1c, 
       width = 16, height = 16)
#+end_src

#+RESULTS:
[[file:../figures/figure1/figure1c.png]]

*** Figure 1D: E. coli grows within the HIO lumen
    
**** Data import and manipulation 
#+begin_src R :session *R* :results silent :exports none :eval yes :tangle figure_Rscripts/figure1.R
## FIGURE 1D --------------------------------------------------------------------
## Figure 1D: E. coli grows within the HIO lumen
## import data
data <- read.csv(file = "../data/figure1/ECOR2growth_fig1_timecourse.csv",
                 header =  TRUE, stringsAsFactors = FALSE)

## calculate means
group <- aggregate(CFU ~ hr, data = data, FUN = mean)
group.sem <- aggregate(CFU ~ hr, data = data, FUN = function(x) sd(x)/sqrt(length(x)))
group$sem <- group.sem$CFU

## stats
fit2d <- aov(CFU ~ hr, data = data[data$hr > 0,])

test2d.1 <- t.test(data[data$hr == 24 & data$CFU > 0,]$CFU,
                   data[data$hr == 0 & data$CFU > 0,]$CFU)

test2d.2 <- t.test(data[data$hr == 72 & data$CFU > 0,]$CFU,
                   data[data$hr == 24 & data$CFU > 0,]$CFU)     
#+end_src
     
**** Generate plot
#+begin_src R :session *R* :exports none :results graphics :file ../figures/figure1/figure1d.png :eval yes :tangle figure_Rscripts/figure1.R
## plot Figure 1D
library(ggplot2)
library(grid)
library(scales)
source("ggplot2-themes.R")

figure1d <- ggplot(data[data$CFU > 0,], aes(x = hr, y = CFU)) +
    geom_boxplot(size = 2, aes(group = hr), fill = color.set[2]) +
    geom_point(size = 8, shape = 21, fill = color.set[2]) +
    ylab(latex2exp::TeX("$\\textbf{CFU$\\cdot{}HIO^{-1}}$")) +
    ggtitle("D") + 
    xlab("Time post-microinjection (h)") + theme1 +
    scale_y_log10(limits = c(1,50000000),
                  breaks = trans_breaks("log10", function(x) 10^x),
                  labels = trans_format("log10", math_format(10^.x))) +
    scale_x_continuous(breaks = c(0, 24, 48, 72)) +
    annotation_logticks(sides = "l", size = 2,
                        short = unit(.75,"mm"),
                        mid = unit(3,"mm"),
                        long = unit(5,"mm")) +
    annotate(geom = "segment",
             x = 24, xend = 72, y = 10^7, yend = 10^7,
             lwd = 2.5) +
    annotate(geom = "text", x = 48, y = 10^7,
             label = paste("P =",format(test2d.2$p.value, digits = 2)), 
             size = 10, vjust = -0.5) + 
    scale_fill_brewer(palette = "Set1") + 
    scale_color_brewer(palette = "Set1")


png(filename = "../figures/figure1/figure1d.png", width = 800, height = 800)
print(figure1d)
dev.off()

ggsave(filename = "../figures/figure1/eps/figure1d.eps", 
       plot = figure1d, 
       width = 16, height = 16)
#+end_src

#+RESULTS:
[[file:../figures/figure1/figure1d.png]]

*** Figure 1E: /E. coli/ colonized HIOs are stable for up to 9 days 
    
**** Data import and manipulation 
#+begin_src R :session *R* :results silent :exports none :eval yes :tangle figure_Rscripts/figure1.R
## FIGURE 1 --------------------------------------------------------------------
## Figure Figure 1E: /E. coli/ colonized HIOs are stable for up to 9 days 
## import data
data <- readr::read_csv(file = "../data/figure1/161206_survival/survival_and_ELISA.csv")
## subset data
data <- subset(data, data$treatment == "PBS" | data$treatment == "E. coli")
## create unique IDs
data$ID <- paste(data$well,data$plate, sep = "P")

## reshape dataframe
data <- dplyr::select(data, ID, day, bd1, bd2, il6, il8, vegf, treatment, Survival = dead)
data <- dplyr::rename(data, BD1 = bd1, BD2 = bd2, IL6 = il6, IL8 = il8, VEGF = vegf)
data <- reshape2::melt(data, id.vars = c('ID', 'day', 'treatment'))

## convert from pg/ml to pg/HIO
#data$value <- as.numeric(data$value, na.rm = TRUE)/2 # pg/1ml = 2*pg/0.5ml

## dotplot +/- SEM
library(magrittr)
data2 <- dplyr::group_by(data,day, treatment, variable) %>%
    dplyr::summarise(avg = mean(value,na.rm = TRUE),
              sem = sd(value, na.rm = TRUE)/n(), 
              total = sum(value, na.rm = TRUE))

data2[data2$variable == "Survival",]$avg <- 1 - data2[data2$variable == "Survival",]$avg
data2[data2$variable == "Survival",]$total <- 48 - data2[data2$variable == "Survival",]$total

levels(data2$variable) <- c("BD1 (pg/ml)", "BD2 (pg/ml)", "IL-6 (pg/ml)", "IL-8 (pg/ml)", "VEGF (pg/ml)", "Survival")

## list PBS first
data2$treatment <- factor(data2$treatment,
                          levels = c("PBS", "E. coli"))

## survival numbers to reference in text
d9surv <- data2[data2$variable == "Survival" & data2$treatment == "E. coli" & data2$day == 9,]$total
d0surv <- data2[data2$variable == "Survival" & data2$treatment == "E. coli" & data2$day == 0,]$total
d3surv <- data2[data2$variable == "Survival" & data2$treatment == "E. coli" & data2$day == 3,]$total
d2surv <- data2[data2$variable == "Survival" & data2$treatment == "E. coli" & data2$day == 2,]$total
#+end_src

**** Generate plot
#+begin_src R :session *R* :exports none :results graphics :file ../figures/figure1/figure1f.png :eval yes :tangle figure_Rscripts/figure1.R
library(ggplot2)
source("ggplot2-themes.R")

figure1e  <- ggplot(data = data2[data2$variable == "Survival",], 
                    aes(x = day, y = 1-avg, fill = treatment)) +
    geom_step(data = data2[data2$variable == "Survival",],
              direction = "hv", aes(color = treatment), 
              size = 5) +
    xlab("Days post-microinjection") +
    ylab("Bacterial translocation rate") +
    scale_x_continuous(breaks = c(0,1,2,3,4,5,6,7,8,9)) +
    ylim(c(0,1)) +
    scale_colour_brewer(palette = "Set1", direction = -1) +
    scale_fill_brewer(palette = "Set1") +
    guides(fill = guide_legend(title = NULL),
           color = guide_legend(title = NULL)) +
    theme1 + 
    #coord_fixed(ratio = 4) + 
    ggtitle("E") +
    theme(legend.position = c(0.2, 0.9),
          legend.key.size = unit(2,"cm"),
	  legend.text = element_text(size = 32))

png(filename = "../figures/figure1/figure1f.png", width = 1000, height = 800)
print(figure1e)
dev.off()

ggsave(filename = "../figures/figure1/eps/figure1f.eps", 
       plot = figure1e, 
       width = 20, height = 16)
#+end_src

#+RESULTS:
[[file:../figures/figure1/figure1f.png]]

*** Figure 1 multipanel
#+begin_src R :session *R* :exports none :results graphics :file ../figures/figure1/figure1_multipanel.png :width 2000 :height 2000 :eval yes :tangle figure_Rscripts/figure1.R 
## Figure 1 multipanel ---------------------------------------------------------
library(ggplot2)
library(gridExtra)
source("ggplot2-themes.R")
source("custom_fun.R")

figure1b <- png2ggplot("../figures/figure1/figure1b.png") +
    img.theme + ggtitle("B")

#figure1e <- png2ggplot("../figures/figure1/figure1e.png") +
#    img.theme + ggtitle("E") + coord_fixed(ratio = 0.6)

layout2 <- rbind(c(2,2),
                c(2,2),
                c(2,2),
                c(1,1))

layout <- rbind(c(1,1,1,2,2,2),
                c(1,1,1,2,2,2),
                c(3,3,4,4,5,5),
                c(3,3,4,4,5,5))

figure1a <- grid.arrange(fig, figure1a,
                         layout_matrix = layout2)

## PDF output
pdf(file = "../figures/figure1/figure1_multipanel.pdf", width = 7500/300, height = 7500/300, onefile = FALSE)
gridExtra::grid.arrange(figure1a, figure1b, figure1c, figure1d, figure1e,
             layout_matrix = layout)
dev.off()

## EPS output
ggsave(filename = "../figures/figure1/eps/figure1_multipanel.eps", 
       plot = gridExtra::grid.arrange(figure1a, figure1b, figure1c, figure1d, figure1e,  layout_matrix = layout), 
       width = 20, height = 20)

## PNG output
png(filename = "../figures/figure1/figure1_multipanel.png", width = 2000, height = 2000)
gridExtra::grid.arrange(figure1a, figure1b, figure1c, figure1d, figure1e, 
             layout_matrix = layout)
dev.off()
#+end_src

#+RESULTS:
[[file:../figures/figure1/figure1_multipanel.png]]

*** Figure 1: stat references in text
#+begin_src R :session *R* :results silent :exports none :eval yes :tangle figure_Rscripts/text-stats.R
## E. coli growth in HIOs
## Read in data table
data <- read.table("../data/figure1/ECOR2growth_fig1.csv", header = TRUE, sep = ",", stringsAsFactors=FALSE)
## Index of CFU/HIO injected for each Sample condition (A-G)
sample.table <- read.table("../data/figure1/sample_table_fig1.csv", header = TRUE, sep = ",", stringsAsFactors=FALSE)
## Generate index of rows in sample table that match
## the sample labels in data
id <- match(data$sample,sample.table$sample)
## create column in data of of CFU/HIO values in sample table
## in matching rows listed in id
data$inject <- sample.table[id,]$value
data$fold <- data$mean/data$inject
data$increase <- ifelse(data$mean > data$inject,"increase","decrease")
source("custom_fun.R")
stats <- lm_eqn(data[data$inject > 0 & data$fold !=0,],
                data[data$inject > 0 & data$fold !=0,]$inject,
                data[data$inject > 0 & data$fold !=0,]$fold)
  
group <- aggregate(mean ~ inject, data = data, FUN = mean)
group.sem <- aggregate(mean ~ inject, data = data,
                       FUN = function(x) sd(x)/sqrt(length(x)))
group$sem <- group.sem$mean

## ANOVA of mean CFU/HIO among colonized HIOs
fit <- aov(mean ~ sample, data = data[data$inject >1,])
fit2 <- lm(log(data[data$inject > 0 & data$fold !=0,]$fold) ~ log(log(data[data$inject > 0 & data$fold !=0,]$inject)), data[data$inject > 0 & data$fold !=0,])

p1c <- summary(fit)[[1]][["Pr(>F)"]][[1]]

## % colonized at < 5 CFU
pct1 <- round(100*(1-length(rownames(data[data$inject < 5 & data$inject > 1 & data$mean < 1,] ))/length(rownames(data[data$inject < 5 & data$inject > 1 & data$mean > 1,] ))),1)

## % colonized at > 100 CFU
pct2 <- round(100*(1-length(rownames(data[data$inject > 100 & data$mean < 1,] ))/length(rownames(data[data$inject < 5 & data$inject > 1 & data$mean > 1,] ))),2)

## import data
data <- read.csv(file = "../data/figure1/ECOR2growth_fig1_timecourse.csv",
                 header =  TRUE, stringsAsFactors = FALSE)

## calculate means
group <- aggregate(CFU ~ hr, data = data, FUN = mean)
group.sem <- aggregate(CFU ~ hr, data = data, FUN = function(x) sd(x)/sqrt(length(x)))
group$sem <- group.sem$CFU

## stats
fit2d <- aov(CFU ~ hr, data = data[data$hr > 0,])

test2d.1 <- t.test(data[data$hr == 24 & data$CFU > 0,]$CFU,
                   data[data$hr == 0 & data$CFU > 0,]$CFU)

test2d.2 <- t.test(data[data$hr == 72 & data$CFU > 0,]$CFU,
                   data[data$hr == 24 & data$CFU > 0,]$CFU)
## Figure Figure 1F: /E. coli/ colonized HIOs are stable for up to 9 days 
## import data
data <- readr::read_csv(file = "../data/figure1/161206_survival/survival_and_ELISA.csv")
## create unique IDs
data$ID <- paste(data$well,data$plate, sep = "P")

## reshape dataframe
data <- dplyr::select(data, ID, day, bd1, bd2, il6, il8, vegf, treatment, Survival = dead)
data <- dplyr::rename(data, BD1 = bd1, BD2 = bd2, IL6 = il6, IL8 = il8, VEGF = vegf)
data <- reshape2::melt(data, id.vars = c('ID', 'day', 'treatment'))

## convert from pg/ml to pg/HIO
#data$value <- as.numeric(data$value, na.rm = TRUE)/2 # pg/1ml = 2*pg/0.5ml

## dotplot +/- SEM
library(magrittr)
data2 <- dplyr::group_by(data,day, treatment, variable) %>%
    dplyr::summarise(avg = mean(value,na.rm = TRUE),
              sem = sd(value, na.rm = TRUE)/n(), 
              total = sum(value, na.rm = TRUE))

data2[data2$variable == "Survival",]$avg <- 1 - data2[data2$variable == "Survival",]$avg
data2[data2$variable == "Survival",]$total <- 48 - data2[data2$variable == "Survival",]$total

levels(data2$variable) <- c("BD1 (pg/ml)", "BD2 (pg/ml)", "IL-6 (pg/ml)", "IL-8 (pg/ml)", "VEGF (pg/ml)", "Survival")

## list PBS first
data2$treatment <- factor(data2$treatment,
                          levels = c("PBS", "E. coli"))

## survival numbers to reference in text
d9surv <- data2[data2$variable == "Survival" & data2$treatment == "E. coli" & data2$day == 9,]$total
d0surv <- data2[data2$variable == "Survival" & data2$treatment == "E. coli" & data2$day == 0,]$total
d3surv <- data2[data2$variable == "Survival" & data2$treatment == "E. coli" & data2$day == 3,]$total
d2surv <- data2[data2$variable == "Survival" & data2$treatment == "E. coli" & data2$day == 2,]$total
#+end_src
** Makefile

#+begin_src makefile :tangle ../makefile :results silent :exports none :eval no
## Generate Figure 1 multipanel figure
figure1: ./figures/figure1/figure1_multipanel.pdf
./figures/figure1/figure1_multipanel.pdf : ./src/figure_Rscripts/figure1.R \
	./data/figure1/010716_01_R3D.csv \
	./data/figure1/010716/010716_01_R3D_w594_t01.png \
	./figures/figure1/figure1b.png \
	./data/figure1/ECOR2growth_fig1.csv \
	./data/figure1/sample_table_fig1.csv \
	./data/figure1/ECOR2growth_fig1_timecourse.csv \
	./figures/figure1/figure1e.png \
	./data/figure1/161206_survival/survival_and_ELISA.csv
	R -e "setwd('./src/'); source('figure_Rscripts/figure1.R')"
#+end_src

* Figure 2 

**  Rscript
*** Generate data dependencies 
**** Export counts from kallisto 
 #+begin_src R :session *R* :results silent :exports none :eval yes :tangle figure_Rscripts/figure2-kallisto-post.R
## Differential expression of kallisto results with DESeq2

## Retrieve kallisto counts for ECOR2 0-96 hr vs PBS dataset (Figure 2)
## read in table with sample metadata
samples <- readr::read_csv(file = "../data/RNA-seq/sample_key.csv")

## subsetting rules
samples <- subset(samples, (samples$Date == "2016-08-18" &
                                ((samples$injection == "Escherichia coli str. ECOR2" & 
                                                                              samples$heat_killed == 0 &
                                                                                  samples$PMN == 0 &
                                                                                  samples$hr == 24 &
                                                                                      samples$hypoxia == 0 &
                                                                                      samples$pharmacologic == "none") |
                                 (samples$injection == "PBS" & 
                                      samples$heat_killed == 0 &
                                      samples$PMN == 0 &
                                          samples$hr == 24 &
                                          samples$hypoxia == 0 &
                                              samples$pharmacologic == "none"))) |
                               (samples$hr == 48 & samples$injection != "PBS") | samples$hr == 96)

## set PBS to 0 hr                  
samples[samples$injection == "PBS",]$hr <- 0

write.csv(samples,"../data/RNA-seq/figure2_sample_key.csv")

## setup access to kallisto read files
files <- file.path(samples$directory,
                   samples$file_name,
                   "abundance.tsv")

## set sample names as description_rep#_seq_rep#
names(files) <- paste0(samples$code_name,"-",samples$hr,"_",samples$num)
## check that all files are found
if (all(file.exists(files)) == FALSE) {
    print("kallisto files not found")
    stop()
}

## associate transcripts with gene IDs
## check if saved transcript:gene index is present
## recommended - biomaRt connectivity is unreliable
if (file.exists("../data/RNA-seq/tx2gene.Rdata") == TRUE) {
    load(file = "../data/RNA-seq/tx2gene.Rdata")
} else {    
    ## create biomart reference
    ensembl <- biomaRt::useMart("ensembl")
    mart <- biomaRt::useMart(biomart = "ENSEMBL_MART_ENSEMBL",
                         dataset = "hsapiens_gene_ensembl",
                         host = 'useast.ensembl.org')
    ## create index of gene names
    tx2gene <- biomaRt::getBM(attributes = c("ensembl_transcript_id","external_gene_name"), mart = mart)
}


## import kallisto data and generate count dataframe (dds)
## http://bioconductor.org/packages/release/bioc/vignettes/tximport/inst/doc/tximport.html
library(readr)
txi <- tximport::tximport(files, type = "kallisto", tx2gene = tx2gene, reader = read_tsv)

## create directory to deposit results
data.dir <- "../results/ECOR2HIO_24-96-RNAseq/"
dir.create(path = data.dir, recursive = TRUE)
## export transcript abundance counts
write.csv(txi$abundance, file = file.path(data.dir,"complete_dataset_txi.csv"))

library(DESeq2)
## https://bioconductor.org/packages/devel/bioc/vignettes/DESeq2/inst/doc/DESeq2.html
dds <- DESeq2::DESeqDataSetFromTximport(txi,
                                        colData = samples,
                                        design = ~ hr) #code_name
## pre-filter out counts < 1
dds <- dds[rowSums(counts(dds)) > 0.1, ]

## write out normalized expression counts
dds <- DESeq2::estimateSizeFactors(dds)
ddscounts <- DESeq2::counts(dds, normalized = TRUE)

## write expression matrix to file
write.csv(ddscounts,
          file =  file.path(data.dir,"complete-dataset_DESeq2-normalized-counts.csv"))
 #+end_src

**** Differential expression 
 #+begin_src R :session *R* :results silent :exports none :eval yes :tangle figure_Rscripts/figure2-kallisto-post.R
## Generate differential expression results in DESeq2

## enable parallel processes
#library("BiocParallel")
#register(MulticoreParam(4))

data.dir <- "../results/ECOR2HIO_24-96-RNAseq/"

colData(dds)@listData$hr[colData(dds)@listData$injection == "PBS"] <- 0

## setup multifactor design
colData(dds)$code_name <- as.factor(paste0(colData(dds)$code_name, "_", colData(dds)$hr))
ddsMF <- dds
DESeq2::design(ddsMF) <- ~ code_name

## Likelihood ratio test (ANOVA-like)
## set parallel
ddsMF <- DESeq2::DESeq(ddsMF, test = "LRT", reduced = ~1, parallel = FALSE)
res <- DESeq2::results(ddsMF)
write.csv(res, file = file.path(data.dir, "LRT.csv"))

## Wald tests
res <- DESeq2::results(ddsMF, test = "Wald",
                       contrast = c("code_name", "ECOR2_24", "PBS_0"))
write.csv(res, file = file.path(data.dir, "ECOR2_over_PBS_24hr.csv"))

res <- DESeq2::results(ddsMF, test = "Wald",
                       contrast = c("code_name", "ECOR2_48", "PBS_0"))
write.csv(res, file = file.path(data.dir, "ECOR2_over_PBS_48hr.csv"))

res <- DESeq2::results(ddsMF, test = "Wald",
                       contrast = c("code_name", "ECOR2_96", "PBS_0"))
write.csv(res, file = file.path(data.dir, "ECOR2_over_PBS_96hr.csv"))
#+end_src

**** Makefile  
  #+begin_src makefile :tangle ../makefile :results silent :exports none :eval no
## Generate gene counts and DE from kallisto output for Figure 2
./results/ECOR2HIO_24-96-RNAseq/complete-dataset_DESeq2-normalized-counts.csv ./results/ECOR2HIO_24-96-RNAseq/ECOR2_over_PBS_24hr.csv ./results/ECOR2HIO_24-96-RNAseq/ECOR2_over_PBS_48hr.csv ./results/ECOR2HIO_24-96-RNAseq/ECOR2_over_PBS_96hr.csv : ./src/figure_Rscripts/figure3-kallisto-post.R \
	data/RNA-seq/kallisto-2014/Sample_34966_R1.fastq/abundance.tsv \
	data/RNA-seq/kallisto-2014/Sample_34967_R1.fastq/abundance.tsv \
	data/RNA-seq/kallisto-2014/Sample_34968_R1.fastq/abundance.tsv \
	data/RNA-seq/kallisto-Run_1731/67676_GTTTCG_S48_L003_R1_001.fastq/abundance.tsv \
	data/RNA-seq/kallisto-Run_1731/67677_CGATGT_S49_L003_R1_001.fastq/abundance.tsv \
	data/RNA-seq/kallisto-Run_1731/67678_CAGATC_S50_L004_R1_001.fastq/abundance.tsv \
	data/RNA-seq/kallisto-Run_1731/67679_GTGAAA_S51_L004_R1_001.fastq/abundance.tsv \
	data/RNA-seq/kallisto-Run_1731/73868_GAGTGG_S95_L006_R1_001.fastq/abundance.tsv \
	data/RNA-seq/kallisto-Run_1731/73869_ATCACG_S96_L006_R1_001.fastq/abundance.tsv \
	data/RNA-seq/kallisto-Run_1731/73870_TAGCTT_S97_L006_R1_001.fastq/abundance.tsv \
	data/RNA-seq/kallisto-Run_1731/73871_GTGGCC_S98_L006_R1_001.fastq/abundance.tsv \
	data/RNA-seq/kallisto-Run_1731/73876_ATGTCA_S4_L007_R1_001.fastq/abundance.tsv \
	data/RNA-seq/kallisto-Run_1731/73884_ACTTGA_S12_L007_R1_001.fastq/abundance.tsv \
	data/RNA-seq/kallisto-Run_1731/73885_CGTACG_S13_L007_R1_001.fastq/abundance.tsv \
	data/RNA-seq/kallisto-Run_1731/73886_AGTTCC_S14_L007_R1_001.fastq/abundance.tsv \
	data/RNA-seq/kallisto-Run_1731/73887_GTTTCG_S15_L007_R1_001.fastq/abundance.tsv
	R -e "setwd('./src/'); source('figure_Rscripts/figure2-kallisto-post.R')"
  #+end_src

*** Figure 2A: Multi-volcano timecourse plot
    
**** Data import and manipulation 
#+begin_src R :session *R* :results silent :exports none :eval yes :tangle figure_Rscripts/figure2.R
## FIGURE 2 --------------------------------------------------------------------
## Figure 2A: Multi-volcano plot
## import data
## directory where data is stored
data.dir <- "../results/ECOR2HIO_24-96-RNAseq/"

## read in the data from DESeq2 output csv files
library(magrittr)
hr24 <- readr::read_csv(file = file.path(data.dir,"ECOR2_over_PBS_24hr.csv")) %>% dplyr::rename(SYMBOL = X1)
hr48 <- readr::read_csv(file = file.path(data.dir,"ECOR2_over_PBS_48hr.csv")) %>% dplyr::rename(SYMBOL = X1)
hr96 <- readr::read_csv(file = file.path(data.dir,"ECOR2_over_PBS_96hr.csv")) %>% dplyr::rename(SYMBOL = X1)

## add hr variable
hr24$hr <- 24
hr48$hr <- 48
hr96$hr <- 96

## bind in single dataframe
data <- rbind(hr24,
              hr48,
              hr96)

## make a copy to edit for plotting
plot.data <- data
## create status catergory for assigning colors
plot.data$status <- ifelse(plot.data$padj > 0.05 | is.na(plot.data$padj), "a",
                    ifelse(plot.data$log2FoldChange > 0, "b", "c"))
## sort by status
plot.data <- plot.data[order(plot.data$status),]
#+end_src

**** Generate plot
#+begin_src R :session *R* :exports none :results graphics :file ../figures/figure2/figure2a.png :width 800 :height 1000 :eval yes :tangle figure_Rscripts/figure2.R
## generate plot
library(ggplot2)
source("ggplot2-themes.R")
figure2a <- ggplot(data = plot.data, aes(x = factor(hr), y = log2FoldChange)) +
    geom_point(position = position_jitter(w = 0.33), aes(fill = status, color = status), shape = 21) +
    scale_fill_manual(values = c("grey70", color.set[1], color.set[2])) +
    scale_color_manual(values = c("grey70", color.set[1], color.set[2])) +
    ylim(c(-5,5)) +
    xlab("Hours post-microinjection") +
    ylab(expression(paste("-log"[2],"(HIO + E. coli / HIO + PBS)"))) +
    theme1 +
    ggtitle("A")

dir.create(path = "../figures/figure2/eps", recursive = TRUE)

png(filename = "../figures/figure2/figure2a.png", width = 800, height = 1000)
print(figure2a)
dev.off()

ggsave(filename = "../figures/figure2/eps/figure2a.eps", 
       plot = figure2a, 
       width = 16, height = 20)
#+end_src

#+RESULTS:
[[file:../figures/figure2/figure2a.png]]

*** Figure 2B: PCA
    
**** Data import and manipulation 
#+begin_src R :session *R* :results silent :exports none :eval yes :tangle figure_Rscripts/figure2.R
## FIGURE 2 --------------------------------------------------------------------
## Figure 2B: PCA
## import data
## read in table with sample metadata
samples <- readr::read_csv(file = "../data/RNA-seq/sample_key.csv")

## subsetting rules
## exclude ES cells (for now)
samples <- subset(samples, (samples$Date == "2016-08-18" &
                                ((samples$injection == "Escherichia coli str. ECOR2" & 
                                                                              samples$heat_killed == 0 &
                                                                                  samples$PMN == 0 &
                                                                                  samples$hr == 24 &
                                                                                      samples$hypoxia == 0 &
                                                                                      samples$pharmacologic == "none") |
                                 (samples$injection == "PBS" & 
                                      samples$heat_killed == 0 &
                                      samples$PMN == 0 &
                                          samples$hr == 24 &
                                          samples$hypoxia == 0 &
                                              samples$pharmacologic == "none"))) |
                               (samples$hr == 48 & samples$injection != "PBS") | samples$hr == 96)

## set PBS to 0 hr                  
samples[samples$injection == "PBS",]$hr <- 0

## Load dataset from file
data.dir <- "../results/ECOR2HIO_24-96-RNAseq/"
df <- readr::read_csv(file = file.path(data.dir,"complete-dataset_DESeq2-normalized-counts.csv"))

## subset to numeric columns only
num.data <- df[,sapply(df,is.numeric)]
## use colnames as group names, remove '_##"
group <- sub("_.*$", "", colnames(num.data))

## calculate variance by row (gene)
var <- apply(num.data, 1, sd, na.rm = TRUE)
## adjust cut off according to variance percentile
pca.data <- num.data[var > quantile(var, 0.9) & var != 0,]
pca <- prcomp(t(pca.data),scale = TRUE,center = TRUE)
scores <- data.frame(colnames(pca.data), pca$x[,1:ncol(pca$x)],group)
scores$short_name <- colnames(num.data)
scores <- dplyr::left_join(scores, samples, by = 'short_name')
scores$hr <- c(48,48,48,96,96,96,96,24,24,24,24,24,0,0,0,0)
#+end_src

**** Generate plot
#+begin_src R :session *R* :exports none :results graphics :width 1000 :height 1000 :file ../figures/figure2/figure2b.png :eval yes :tangle figure_Rscripts/figure2.R
## PCA plot
library(ggplot2)
library(RColorBrewer)
source("ggplot2-themes.R")
source("custom_fun.R")

figure2b <- qplot(x = PC1, y = PC2, data = scores) +  
    scale_fill_brewer(name = "hr", palette = "Spectral", direction = -1) +
    scale_color_brewer(name = "hr", palette = "Spectral", direction = -1) +  
    geom_point(shape = 21, aes(fill = factor(hr), color = factor(hr)), size = 12, stroke = 3) +
    theme1 +
    theme(legend.position="right",
          legend.background = element_rect(colour = "white"),
          legend.key = element_rect(color = "white",fill = "white"),
	  panel.border = element_rect(fill = NA, color = "grey70"),
          legend.title = element_text(size = 32),
          legend.text = element_text(size = 18)) +
    coord_fixed(ratio = 1) +
    xlab(paste("PC1 (",percent(round(summary(pca)$importance[2,1],4)),")",sep = "")) +
    ylab(paste("PC2 (",percent(round(summary(pca)$importance[2,2],4)),")",sep = "")) +
    geom_hline(yintercept = 0,
               size = 1, linetype = "dashed", color = "grey70") +
    geom_vline(xintercept = 0,
               size = 1, linetype = "dashed", color = "grey70") +
    ggtitle ("B")


png(filename = "../figures/figure2/figure2b.png", width = 1000, height = 1000)
print(figure2b)
dev.off()
ggsave(filename = "../figures/figure2/eps/figure2b.eps", 
       plot = figure2b, 
       width = 20, height = 20)
#+end_src

#+RESULTS:
[[file:../figures/figure2/figure2b.png]]


*** GO & REACTOME GSEA
***** GO GSEA
#+begin_src R :session *R* :results silent :exports none :eval no :tangle figure_Rscripts/figure2-GSEA.R
## Load dataset from file
## Read in data files
data.dir <- "../results/ECOR2HIO_24-96-RNAseq/"
library(magrittr)
hr24 <- readr::read_csv(file = file.path(data.dir,"ECOR2_over_PBS_24hr.csv")) %>% dplyr::rename(SYMBOL = X1)
hr48 <- readr::read_csv(file = file.path(data.dir,"ECOR2_over_PBS_48hr.csv")) %>% dplyr::rename(SYMBOL = X1)
hr96 <- readr::read_csv(file = file.path(data.dir,"ECOR2_over_PBS_96hr.csv")) %>% dplyr::rename(SYMBOL = X1)

## GO GSEA
library(clusterProfiler)
library(org.Hs.eg.db)
## 24hr
hr24 <- bitr(hr24[hr24$baseMean >=1,]$SYMBOL,
               fromType = "SYMBOL",
               toType = "ENTREZID",
               OrgDb = "org.Hs.eg.db") %>%
    dplyr::left_join(.,hr24[hr24$baseMean >=1,], by = 'SYMBOL')

hr24 <- hr24[order(-hr24$log2FoldChange),]

up.list<- sort(hr24$log2FoldChange, decreasing = TRUE)
names(up.list) <- hr24$ENTREZID

hr24.go.gsea <- gseGO(geneList     = up.list,
                 OrgDb        = org.Hs.eg.db,
                 ont          = "BP",
                 nPerm        = 1000,
                 minGSSize    = 50,
                 maxGSSize    = 500,
                 pvalueCutoff = 1,
                 verbose      = TRUE)

write.csv(hr24.go.gsea@result, file = file.path(data.dir,"hr24.GO-GSEA.csv"), row.names = FALSE)

## 48 hr
hr48 <- bitr(hr48[hr48$baseMean >=1,]$SYMBOL,
               fromType = "SYMBOL",
               toType = "ENTREZID",
               OrgDb = "org.Hs.eg.db") %>%
    dplyr::left_join(.,hr48[hr48$baseMean >=1,], by = 'SYMBOL')

hr48 <- hr48[order(-hr48$log2FoldChange),]

up.list<- sort(hr48$log2FoldChange, decreasing = TRUE)
names(up.list) <- hr48$ENTREZID

hr48.go.gsea <- gseGO(geneList     = up.list,
                 OrgDb        = org.Hs.eg.db,
                 ont          = "BP",
                 nPerm        = 1000,
                 minGSSize    = 50,
                 maxGSSize    = 500,
                 pvalueCutoff = 1,
                 verbose      = TRUE)

#save(hr48.go.gsea, file = file.path(data.dir,"hr48.GO-GSEA.RData")) ## used in Figure 5A
write.csv(hr48.go.gsea@result, file = file.path(data.dir,"hr48.GO-GSEA.csv"), row.names = FALSE)

## 96 hr
hr96 <- bitr(hr96[hr96$baseMean >=1,]$SYMBOL,
               fromType = "SYMBOL",
               toType = "ENTREZID",
               OrgDb = "org.Hs.eg.db") %>%
    dplyr::left_join(.,hr96[hr96$baseMean >=1,], by = 'SYMBOL')

hr96 <- hr96[order(-hr96$log2FoldChange),]

up.list<- sort(hr96$log2FoldChange, decreasing = TRUE)
names(up.list) <- hr96$ENTREZID

hr96.go.gsea <- gseGO(geneList     = up.list,
                 OrgDb        = org.Hs.eg.db,
                 ont          = "BP",
                 nPerm        = 1000,
                 minGSSize    = 50,
                 maxGSSize    = 500,
                 pvalueCutoff = 1,
                 verbose      = TRUE)

write.csv(hr96.go.gsea@result, file = file.path(data.dir,"hr96.GO-GSEA.csv"), row.names = FALSE)
 #+end_src
***** REACTOME GSEA
#+begin_src R :session *R* :results silent :exports none :eval no :tangle figure_Rscripts/figure2-GSEA.R
## Load dataset from file
## Read in data files
data.dir <- "../results/ECOR2HIO_24-96-RNAseq/"
library(magrittr)
hr24 <- readr::read_csv(file = file.path(data.dir,"ECOR2_over_PBS_24hr.csv")) %>% dplyr::rename(SYMBOL = X1)
hr48 <- readr::read_csv(file = file.path(data.dir,"ECOR2_over_PBS_48hr.csv")) %>% dplyr::rename(SYMBOL = X1)
hr96 <- readr::read_csv(file = file.path(data.dir,"ECOR2_over_PBS_96hr.csv")) %>% dplyr::rename(SYMBOL = X1)

library(clusterProfiler)
library(org.Hs.eg.db)
library(ReactomePA)
## 24hr
hr24 <- bitr(hr24[hr24$baseMean >=1,]$SYMBOL,
               fromType = "SYMBOL",
               toType = "ENTREZID",
               OrgDb = "org.Hs.eg.db") %>%
    dplyr::left_join(.,hr24[hr24$baseMean >=1,], by = 'SYMBOL')

hr24 <- hr24[order(-hr24$log2FoldChange),]

up.list<- sort(hr24$log2FoldChange, decreasing = TRUE)
names(up.list) <- hr24$ENTREZID

hr24.reactome.gsea <- gsePathway(geneList     = up.list,
                 nPerm        = 1000,
                 minGSSize    = 10,
                 pvalueCutoff = 1,
                 verbose      = TRUE)

write.csv(hr24.reactome.gsea@result, file = file.path(data.dir,"hr24.REACTOME-GSEA.csv"), row.names = FALSE)

## 48 hr
hr48 <- bitr(hr48[hr48$baseMean >=1,]$SYMBOL,
               fromType = "SYMBOL",
               toType = "ENTREZID",
               OrgDb = "org.Hs.eg.db") %>%
    dplyr::left_join(.,hr48[hr48$baseMean >=1,], by = 'SYMBOL')

hr48 <- hr48[order(-hr48$log2FoldChange),]

up.list<- sort(hr48$log2FoldChange, decreasing = TRUE)
names(up.list) <- hr48$ENTREZID

hr48.reactome.gsea <- gsePathway(geneList     = up.list,
                 nPerm        = 1000,
                 minGSSize    = 10,
                 pvalueCutoff = 1,
                 verbose      = TRUE)

write.csv(hr48.reactome.gsea@result, file = file.path(data.dir,"hr48.REACTOME-GSEA.csv"), row.names = FALSE)

## 96 hr
hr96 <- bitr(hr96[hr96$baseMean >=1,]$SYMBOL,
               fromType = "SYMBOL",
               toType = "ENTREZID",
               OrgDb = "org.Hs.eg.db") %>%
    dplyr::left_join(.,hr96[hr96$baseMean >=1,], by = 'SYMBOL')

hr96 <- hr96[order(-hr96$log2FoldChange),]

up.list<- sort(hr96$log2FoldChange, decreasing = TRUE)
names(up.list) <- hr96$ENTREZID

hr96.reactome.gsea <- gsePathway(geneList     = up.list,
                 nPerm        = 1000,
                 minGSSize    = 10,
                 pvalueCutoff = 1,
                 verbose      = TRUE)

write.csv(hr96.reactome.gsea@result, file = file.path(data.dir,"hr96.REACTOME-GSEA.csv"), row.names = FALSE)
#+end_src

***** Makefile
#+begin_src makefile :tangle ../makefile :results silent :exports none :eval no
## GO & REACTOME GSEA
./results/ECOR2HIO_24-96-RNAseq/hr24.GO-GSEA.csv ./results/ECOR2HIO_24-96-RNAseq/hr48.GO-GSEA.csv ./results/ECOR2HIO_24-96-RNAseq/hr96.GO-GSEA.csv ./results/ECOR2HIO_24-96-RNAseq/hr24.REACTOME-GSEA.csv ./results/ECOR2HIO_24-96-RNAseq/hr48.REACTOME-GSEA.csv ./results/ECOR2HIO_24-96-RNAseq/hr96.REACTOME-GSEA.csv : ./src/figure_Rscripts/figure2-GSEA.R \
	./results/ECOR2HIO_24-96-RNAseq/ECOR2_over_PBS_24hr.csv \
	./results/ECOR2HIO_24-96-RNAseq/ECOR2_over_PBS_48hr.csv \
	./results/ECOR2HIO_24-96-RNAseq/ECOR2_over_PBS_96hr.csv 
	R -e "setwd('./src/'); source('figure_Rscripts/figure2-GSEA.R')"
#+end_src

*** Figure 2C: GSEA timecourse heatmap
    
**** Data import and manipulation 
#+begin_src R :session *R* :results silent :exports none :eval yes :tangle figure_Rscripts/figure2.R
## FIGURE 2 --------------------------------------------------------------------
## Figure 2C: GSEA timecourse heatmap
## import data
data.dir <- "../results/ECOR2HIO_24-96-RNAseq/"

## load GO GSEA stats
hr24.gsea <- readr::read_csv(file = file.path(data.dir,"hr24.GO-GSEA.csv"))
hr48.gsea <- readr::read_csv(file = file.path(data.dir,"hr48.GO-GSEA.csv"))
hr96.gsea <- readr::read_csv(file = file.path(data.dir,"hr96.GO-GSEA.csv"))

## add column annotating comparison origin
hr24.gsea$comparison <- "24"
hr48.gsea$comparison <- "48"
hr96.gsea$comparison <- "96"
## bind all gsea and export
all.gsea1 <- rbind(hr24.gsea,
                  hr48.gsea,
                  hr96.gsea)

## load REACTOME GSEA stats
hr24.gsea <- readr::read_csv(file = file.path(data.dir,"hr24.REACTOME-GSEA.csv"))
hr48.gsea <- readr::read_csv(file = file.path(data.dir,"hr48.REACTOME-GSEA.csv"))
hr96.gsea <- readr::read_csv(file = file.path(data.dir,"hr96.REACTOME-GSEA.csv"))

## add column annotating comparison origin
hr24.gsea$comparison <- "24"
hr48.gsea$comparison <- "48"
hr96.gsea$comparison <- "96"
## bind all gsea and export
all.gsea2 <- rbind(hr24.gsea,
                  hr48.gsea,
                  hr96.gsea)
## add database
all.gsea1$Database <- "GO"
all.gsea2$Database <- "REACTOME"

all.gsea <- rbind(all.gsea1, all.gsea2)

all.gsea$new_Description <- paste0(all.gsea$Description, " (", all.gsea$Database,")")

cats <- readr::read_csv(file = "../figures/figure2/GSEA-pathways-plotted.csv")

new.gsea <- dplyr::inner_join(cats, all.gsea, by = "Description")

new.gsea <- new.gsea[order(new.gsea$Category, new.gsea$NES),]
#+end_src

**** Generate plot
#+begin_src R :session *R* :exports none :results graphics :file ../figures/figure2/figure2c.png :width 900 :height 1400 :eval yes :tangle figure_Rscripts/figure2.R
## shorter names
new.gsea$Description <- gsub("Hypoxia-inducible Factor Alpha", "HIF1a",new.gsea$Description)
new.gsea$Description <- gsub("kappa", "k",new.gsea$Description)
new.gsea$Description <- gsub("interleukin", "IL",new.gsea$Description)
new.gsea$Description <- gsub("positive regulation", "up-regulation",new.gsea$Description)
new.gsea$Description <- gsub("Mediated ", "",new.gsea$Description)
new.gsea$Description <- gsub("mediated ", "",new.gsea$Description)
new.gsea$Description <- gsub("negative regulation", "down-regulation",new.gsea$Description)

new.gsea$new_Description <- factor(new.gsea$new_Description,
                                levels = unique(new.gsea$new_Description))

new.gsea$Description <- factor(new.gsea$Description,
                                levels = unique(new.gsea$Description))

library(ggplot2)
source("ggplot2-themes.R")

figure2c <- ggplot(new.gsea,
              aes(y = Description, x = comparison)) +
    geom_tile(stat = "identity", aes(fill = NES)) +
    facet_grid(Category ~ ., scales = "free_y", space = "free", switch = "y") +
    scale_fill_distiller(name = "NES ", palette = "RdYlBu") +
    scale_y_discrete(position = "right") +
    ylab("") + xlab("") + 
    theme1 + 
    theme(strip.text =  element_text(size = 23),
          legend.position = "bottom",
	  legend.title = element_text(size = 32),
	  legend.key.size = unit(1,"cm"),
	  panel.spacing = unit(2, "lines"),
	  panel.border = element_blank()) +
    ggtitle("C")


png(filename = "../figures/figure2/figure2c.png", width = 900, height = 1400)
print(figure2c)
dev.off()
ggsave(filename = "../figures/figure2/eps/figure2c.eps", 
       plot = figure2c, 
       width = 18, height = 28)
#+end_src

#+RESULTS:
[[file:../figures/figure2/figure2c.png]]

*** Figure 2D: RNA expression time-course
    
**** Data import and manipulation 
#+begin_src R :session *R* :results silent :exports none :eval yes :tangle figure_Rscripts/figure2.R
## FIGURE 2 --------------------------------------------------------------------
## Figure 2D: RNA expression time-course
## import data
## directory where data is stored
data.dir <- "../results/ECOR2HIO_24-96-RNAseq/"

## read in the data from DESeq2 output csv files
library(magrittr)
hr24 <- readr::read_csv(file = file.path(data.dir,"ECOR2_over_PBS_24hr.csv")) %>% dplyr::rename(SYMBOL = X1)
hr48 <- readr::read_csv(file = file.path(data.dir,"ECOR2_over_PBS_48hr.csv")) %>% dplyr::rename(SYMBOL = X1)
hr96 <- readr::read_csv(file = file.path(data.dir,"ECOR2_over_PBS_96hr.csv")) %>% dplyr::rename(SYMBOL = X1)

## add hr variable
hr24$hr <- 24
hr48$hr <- 48
hr96$hr <- 96

## bind in single dataframe
data <- rbind(hr24,
              hr48,
              hr96)
## genes to retrieve
gene.list <- c("DEFB1","DEFB4A","IL6", "CXCL8", "VEGFA")

## create subset
plot.data <- data[which(data$SYMBOL %in% gene.list),]
#+end_src

**** Generate plot
#+begin_src R :session *R* :exports none :results graphics :file ../figures/figure2/figure2d.png :eval yes :tangle figure_Rscripts/figure2.R
library(ggplot2)
source("ggplot2-themes.R")
plot.data$SYMBOL <- factor(plot.data$SYMBOL,
                           levels = c("DEFB1",
                                      "DEFB4A",
                                      "IL6",
                                      "CXCL8",
                                      "VEGFA"))

figure2d <- ggplot(data = plot.data,
                   aes(x = factor(hr), y = log2FoldChange, fill = log2FoldChange)) +
    geom_bar(stat = "identity") +
    facet_wrap(~ SYMBOL, scales = "free_y", ncol = 1, strip.position = "left") +
    geom_errorbar(aes(ymax = log2FoldChange + lfcSE, ymin = log2FoldChange - lfcSE),
                  width = 0, color = "grey70", size = 1) +
    scale_fill_gradient2(name = expression(paste(Log[2],"FC")), low = color.set[2], high = color.set[1]) +

    ylab("") + xlab("hr") +
    theme1 + 
    ggtitle("D") +
    theme(strip.placement = "outside",
          strip.text = element_text(size = 24),
          legend.position = "bottom",
          legend.key.size = unit(1,"cm"),
          legend.title = element_text(size = 24),
          legend.text = element_text(size = 18))

png(filename = "../figures/figure2/figure2d.png", width = 300, height = 1000)
print(figure2d)
dev.off()
ggsave(filename = "../figures/figure2/eps/figure2d.eps", 
       plot = figure2d, 
       width = 12, height = 20)
#+end_src

#+RESULTS:
[[file:../figures/figure2/figure2d.png]]


*** Figure 2E: Time-dependent protein secretion
    
**** Data import and manipulation 
#+begin_src R :session *R* :results silent :exports none :eval yes :tangle figure_Rscripts/figure2.R
## FIGURE 2 --------------------------------------------------------------------
## Figure 2E: Time-dependent protein secretion
## import data
## import data
data <- readr::read_csv(file = "../data/figure1/161206_survival/survival_and_ELISA.csv")
## create unique IDs
data$ID <- paste(data$well,data$plate, sep = "P")
## load libraries
library(ggplot2)
library(reshape2)
library(dplyr)

## reshape dataframe
data <- dplyr::select(data, ID, day, bd1, bd2, il6, il8, vegf, treatment, Survival = dead)
data <- dplyr::rename(data, BD1 = bd1, BD2 = bd2, IL6 = il6, IL8 = il8, VEGF = vegf)
data <- reshape2::melt(data, id.vars = c('ID', 'day', 'treatment'))

## dotplot +/- SEM
data2 <- dplyr::group_by(data,day, treatment, variable) %>%
    dplyr::summarise(avg = mean(value,na.rm = TRUE),
              sem = sd(value, na.rm = TRUE)/n(), 
              total = sum(value, na.rm = TRUE))

data2[data2$variable == "Survival",]$avg <- 1 - data2[data2$variable == "Survival",]$avg
data2[data2$variable == "Survival",]$total <- 48 - data2[data2$variable == "Survival",]$total
#+end_src

**** Generate plot
#+begin_src R :session *R* :exports none :results graphics :file ../figures/figure2/figure2e.png :width 600 :height 1000 :eval yes :tangle figure_Rscripts/figure2.R
library(ggplot2)
source("ggplot2-themes.R")
## adjust order for legend
data2$treatment <- factor(data2$treatment,
                     levels = c("PBS", "E. coli"))

## remove NAs from other experimental conditions
data2 <- subset(data2, data2$treatment == "PBS" | data2$treatment == "E. coli")

figure2e  <- ggplot(data = data2[data2$variable != "Survival",],
                    aes(x = day, y = avg, color = treatment, fill = treatment)) +
    geom_errorbar(data = data2[data2$variable != "Survival",],aes(x = day,
                      ymin = avg - sem, ymax = avg + sem, 
                      color = treatment),
                  width = 0, size = 1) +
    geom_line(aes(color = treatment), size = 0.5) +
    geom_point(data = data2[data2$variable != "Survival",], shape = 21, size = 5) +
    facet_wrap(~ variable, scales = "free_y", ncol = 1, 
               strip.position = "right") +
    xlab("day") +
    ylab("pg/ml") +
    scale_x_continuous(breaks = c(0,1,2,3,4,5,6,7,8,9)) +
    scale_colour_brewer(palette = "Set1", direction = -1) +
    scale_fill_brewer(palette = "Set1", direction = -1) +
    guides(fill = guide_legend(title = NULL),
           color = guide_legend(title = NULL)) +
    theme1 +
    theme(text = element_text(size = 24),
          axis.text.y = element_text(size = 16),
          legend.position = "bottom",
          strip.placement = "outside",
	  strip.text = element_text(color = "white", size = 24),
	  strip.background = element_rect(color = "white", fill = "grey30"),
          legend.key.size = unit(2,"cm"),
	  legend.text = element_text(size = 32)) +
    ggtitle("E")

png(filename = "../figures/figure2/figure2e.png", width = 600, height = 1000)
print(figure2e)
dev.off()
ggsave(filename = "../figures/figure2/eps/figure2e.eps", 
       plot = figure2e, 
       width = 12, height = 20)
#+end_src

#+RESULTS:
[[file:../figures/figure2/figure2e.png]]


*** Figure 2 multipanel
#+begin_src R :session *R* :exports none :results graphics :file ../figures/figure2/figure2_multipanel.png :width 1600 :height 2000 :eval yes :tangle figure_Rscripts/figure2.R
## multipanel plot -------------------------------------------------------------

library(gridExtra)
layout <- rbind(c(1,1,1,2,2,2,2),
                c(3,3,3,3,4,5,5),
                c(3,3,3,3,4,5,5))                

grid.arrange(figure2a, figure2b, figure2c, figure2d, figure2e,
             layout_matrix = layout)

## PDF output
pdf(file = "../figures/figure2/figure2_multipanel.pdf", width = 6000/300, height = 7500/300, onefile = FALSE)
gridExtra::grid.arrange(figure2a, figure2b, figure2c, figure2d, figure2e, layout_matrix = layout)
dev.off()

## EPS output
ggsave(filename = "../figures/figure2/eps/figure2_multipanel.eps", 
       plot = gridExtra::grid.arrange(figure2a, figure2b, figure2c, figure2d, figure2e, layout_matrix = layout), 
       width = 32, height = 40)

## PNG output
png(filename = "../figures/figure2/figure2_multipanel.png", width = 1600, height = 2000)
gridExtra::grid.arrange(figure2a, figure2b, figure2c, figure2d, figure2e, layout_matrix = layout)
dev.off()
#+end_src

#+RESULTS:
[[file:../figures/figure2/figure2_multipanel.png]]

** Makefile  
#+begin_src makefile :tangle ../makefile :results silent :exports none :eval no
## Figure 2 multipanel ---------------------------------------------------------
figure2: ./figures/figure2/figure2_multipanel.pdf
./figures/figure2/figure2_multipanel.pdf : ./src/figure_Rscripts/figure2.R \
	./results/ECOR2HIO_24-96-RNAseq/complete-dataset_DESeq2-normalized-counts.csv \
	./results/ECOR2HIO_24-96-RNAseq/ECOR2_over_PBS_24hr.csv \
	./results/ECOR2HIO_24-96-RNAseq/ECOR2_over_PBS_48hr.csv \
	./results/ECOR2HIO_24-96-RNAseq/ECOR2_over_PBS_96hr.csv \
	./results/ECOR2HIO_24-96-RNAseq/hr24.GO-GSEA.csv \
	./results/ECOR2HIO_24-96-RNAseq/hr48.GO-GSEA.csv \
	./results/ECOR2HIO_24-96-RNAseq/hr96.GO-GSEA.csv \
	./results/ECOR2HIO_24-96-RNAseq/hr24.REACTOME-GSEA.csv \
	./results/ECOR2HIO_24-96-RNAseq/hr48.REACTOME-GSEA.csv \
	./results/ECOR2HIO_24-96-RNAseq/hr96.REACTOME-GSEA.csv \
	./figures/figure2/GSEA-pathways-plotted.csv \
	./data/figure1/161206_survival/survival_and_ELISA.csv
	R -e "setwd('./src/'); source('figure_Rscripts/figure2.R')"
#+end_src

* Figure 3
** Count data shell script
#+begin_src sh :tangle figure3_count.sh :shebang "#!/bin/bash"
## AUTHOR: David R. Hill
## Count number of unique lines in each cell count index file
FILES=../data/figure3/dapi_ki67_edu_counts/*
echo "count  file" > ../data/figure3/cell_counts.tsv
for f in $FILES
do
    wc -l $f >> ../data/figure3/cell_counts.tsv
done	 
#+end_src


** Rscript 
*** Figure 3A: Edu and Ki67 counts
    
**** Data import and manipulation 
#+begin_src R :session *R* :results silent :exports none :eval yes :tangle figure_Rscripts/figure3.R
## FIGURE 3 --------------------------------------------------------------------
## Figure 3A: EdU and Ki67 count data
## execute counting script
system("./figure3_count.sh")
## import data
counts <- readr::read_delim(file = "../data/figure3/cell_counts.tsv", delim = "\t",
                            col_names = FALSE, skip = 1)

## separate count data from file name
library(magrittr) # enables pipe operation ('%>%')
counts$count <- stringr::str_split_fixed(string = counts$X1, pattern = " ../data/figure3/d", n = 2)[,1] %>% as.numeric()
counts$file <- stringr::str_split_fixed(string = counts$X1, pattern = " ../data/figure3/d", n = 2)[,2]

## remove unnecessary info from files names, store as metadata string
counts$meta <- gsub("api_ki67_edu_counts/", "", counts$file) %>%
    gsub("_Counts.csv", "", .) %>%
    gsub("_\\(w\\)ecad", "", .) %>%
    gsub("\\(g\\)", "", .) %>%
    gsub("\\(r\\)", "", .) %>%
    gsub("\\(b\\)", "", .) %>%
    gsub("h", "", .) %>%
    ## correct typos in file names
    gsub("edui", "edu", .) %>%
    gsub("ki67i", "ki67", .)

## parse metadata string into data columns
## replicate number
counts$rep <- stringr::str_split_fixed(string = counts$meta, pattern = "_", n = 4)[,1] %>% as.numeric()
## treatment group
counts$treatment <- stringr::str_split_fixed(string = counts$meta, pattern = "_", n = 4)[,2]
## time
counts$hr <- stringr::str_split_fixed(string = counts$meta, pattern = "_", n = 4)[,3] %>% as.numeric()
## marker
counts$marker <- stringr::str_split_fixed(string = counts$meta, pattern = "_", n = 4)[,4]
## some instances of "edu' have extra space
counts$marker <- gsub("edu ", "edu", counts$marker)

## reformatting data (wide)
data <- counts %>% dplyr::select(treatment, hr, rep, marker, count) %>%
    tidyr::spread(key = marker, value = count)

## calculate proportions
data$edu_prop <- data$edu/data$dapi
data$edu_prop <- ifelse(data$edu_prop > 1, 1, data$edu_prop)
data$ki67_prop <- data$ki67/data$dapi
#+end_src

**** Generate plot
#+begin_src R :session *R* :exports none :results graphics :file ../figures/figure3/figure3a.png :eval yes :tangle figure_Rscripts/figure3.R
library(ggplot2)
source("ggplot2-themes.R")
library(magrittr)

data.cts <- data %>% dplyr::select(treatment, hr, edu_prop, ki67_prop) %>%
    tidyr::gather(marker, prop, 3:4)
data.cts$marker <- ifelse(data.cts$marker == "edu_prop", "EdU", "Ki67")
data.cts$treatment <- data.cts$treatment %>%
    gsub("pbs", "PBS", .) %>%
    gsub("ecoli", "E. coli", .)

test1 <- t.test(data.cts[data.cts$treatment == "PBS" & data.cts$hr == 24 & data.cts$marker == "EdU",]$prop,
                data.cts[data.cts$treatment == "E. coli" & data.cts$hr == 24 & data.cts$marker == "EdU",]$prop[-2],
                alternative = "two.sided")
test2 <- t.test(data.cts[data.cts$treatment == "PBS" & data.cts$hr == 48 & data.cts$marker == "EdU",]$prop[-4],
                data.cts[data.cts$treatment == "E. coli" & data.cts$hr == 48 & data.cts$marker == "EdU",]$prop,
                alternative = "two.sided")
test3 <- t.test(data.cts[data.cts$treatment == "PBS" & data.cts$hr == 24 & data.cts$marker == "Ki67",]$prop,
                data.cts[data.cts$treatment == "E. coli" & data.cts$hr == 24 & data.cts$marker == "Ki67",]$prop,
                alternative = "two.sided")
test4 <- t.test(data.cts[data.cts$treatment == "PBS" & data.cts$hr == 48 & data.cts$marker == "Ki67",]$prop,
                data.cts[data.cts$treatment == "E. coli" & data.cts$hr == 48 & data.cts$marker == "Ki67",]$prop,
                alternative = "two.sided")

## summary data for plotting
data.sum <- data %>% dplyr::group_by(treatment, hr) %>%
    dplyr::summarise(mean_edu = mean(edu_prop),
                     mean_ki67 = mean(ki67_prop)) %>%
    tidyr::gather(marker, mean, c('mean_edu', 'mean_ki67'))
data.sum2 <- data %>% dplyr::group_by(treatment, hr) %>%
    dplyr::summarise(sem_edu = sd(edu_prop, na.rm = TRUE)/n(),
                     sem_ki67 = sd(ki67_prop, na.rm = TRUE)/n()) %>%
    tidyr::gather(marker, sem, c('sem_edu', 'sem_ki67'))
data.sum$marker %<>% gsub("mean_edu", "EdU", .) %>%
    gsub("mean_ki67", "Ki67", .)
data.sum2$marker %<>% gsub("sem_edu", "EdU", .) %>%
    gsub("sem_ki67", "Ki67", .)
data.sum %<>% dplyr::left_join(data.sum2, by = c('marker', 'hr', 'treatment'))
data.sum$treatment %<>% gsub("pbs", "PBS", .) %>%
    gsub("ecoli", "E. coli", .) %>%
    factor(levels = c("PBS", "E. coli"))

figure3a <- ggplot(data = data.sum, aes(x = hr, y = mean)) +
    geom_smooth(aes(color = treatment)) +
    geom_errorbar(aes(ymax = mean + sem, ymin = mean - sem, color = treatment),
                   width = 0, size = 2) +
     geom_point(shape = 21, size = 8, stroke = 2, aes(fill = treatment)) +
     facet_grid(marker~., scales = "free_y") +
     ylab("Proportion of E-cadherin(+) cells") +
     xlab("Time post-microinjection (h)") +
     scale_fill_brewer(name = "", palette = "Set1", direction = -1) +
     scale_color_brewer(name = "", palette = "Set1", direction = -1) +
     scale_x_continuous(breaks = c(0, 24, 48, 72, 96)) +
     theme1 +
     geom_text(data = data.sum[data.sum$marker == "EdU",],
                 aes(x = 26,
                     y = 0.72),
              size = 6, 
              color = "grey30",
              label = paste("P = ", round(test1$p.value, 3))) +
     geom_text(data = data.sum[data.sum$marker == "EdU",],
               aes(x = 48,
                   y = 0.22),
               size = 6, 
               color = "grey30",
               label = paste("P = ", round(test2$p.value, 3))) +
     geom_text(data = data.sum[data.sum$marker == "Ki67",],
               aes(x = 48,
                   y = 0.13),
               size = 6, 
               color = "grey30",
               label = paste("P = ", round(test4$p.value, 3))) +
     theme(strip.text = element_text(size = 36),
           legend.position = "bottom",
           legend.key.size = unit(1.5,"cm"),
           legend.title = element_text(size = 24),
           legend.text = element_text(size = 32)) +
     ggtitle("B")

png(filename = "../figures/figure3/figure3a.png", width = 800, height = 800)
print(figure3a)
dev.off()
ggsave(filename = "../figures/figure3/eps/figure3a.eps", 
plot = figure3a, 
width = 16, height = 16)
#+end_src

#+RESULTS:
[[file:../figures/figure5_/figure5a_.png]]

*** Figure 3E: Supporting RNA-seq heatmap
**** Data import and manipulation 
#+begin_src R :session *R* :results silent :exports none :eval yes :tangle figure_Rscripts/figure3.R
## FIGURE 3 --------------------------------------------------------------------
## Figure 3E: Cell proliferation heatmap
## load dataset from file
data.dir <- "../results/ECOR2HIO_24-96-RNAseq/"
library(magrittr)
df <- readr::read_csv(file = file.path(data.dir,"complete-dataset_DESeq2-normalized-counts.csv")) %>%
    dplyr::rename(SYMBOL = X1)
## list of genes to extract
gene.list <- data.frame(SYMBOL = c("SPDEF", "MUC2", "KLF5","CCND1","MKI67", "PCNA", "SOX9", "DPP4", "LYZ", "DEFA5", "LGR5", "OLFM4", "SI", "TREH", "FABP2", "NGN3", "CHGA", "DEFA6", "HOPX", "CDH1", "LRIG1", "BMI1", "MGAM", "LCT"),
                        category = c("Goblet", "Goblet", "Stem/Progenitor","Proliferation","Proliferation", "Proliferation", "Stem/Progenitor", "Enterocyte", "Paneth", "Paneth", "Stem/Progenitor", "Stem/Progenitor", "Enterocyte", "Enterocyte", "Enterocyte", "Enteroendocrine", "Enteroendocrine", "Paneth","Stem/Progenitor", "Enterocyte", "Stem/Progenitor", "Stem/Progenitor","Enterocyte","Enterocyte"))
                        

## extract genes
data.sub <- df[which(df$SYMBOL %in% gene.list$SYMBOL),]
## melt dataframe to wide format
melt.data <- reshape::melt(as.data.frame(data.sub), id.vars = "SYMBOL")
## remove replicate numbers from column headers
melt.data$variable <- gsub("\\_[0-9]*$", "", melt.data$variable)
## extract timepoint data from column headers
melt.data <- tidyr::separate(melt.data, col = variable, into = c('treatment', 'hr'), sep = "-")
## calculate mean 
data.mean <- dplyr::group_by(melt.data, SYMBOL, hr) %>%
    dplyr::summarise(stdev = sd(value),
                     num = n(),
		     mean = mean(value),
                     median = median(value)) %>%
    dplyr::left_join(gene.list, by = 'SYMBOL')

## claculate zscore
scale_this <- function(x) as.vector(scale(x))

data.scaled <- dplyr::group_by(melt.data, SYMBOL) %>%
    dplyr::mutate(zscore = scale_this(value)) %>%
    dplyr::group_by(SYMBOL, hr) %>%
    dplyr::summarize(mean_zscore = mean(zscore)) %>%
    dplyr::left_join(gene.list, by = 'SYMBOL')

#+end_src

**** Generate plot
#+begin_src R :session *R* :exports none :results graphics :file ../figures/figure3/figure3e.png :eval yes :tangle figure_Rscripts/figure3.R
## plot
library(ggplot2)
source("ggplot2-themes.R")

## hierarchical clustering
dat <- dplyr::select(data.scaled, hr, mean_zscore) %>% tidyr::spread(hr, mean_zscore)
ord <- hclust(dist(dat[,2:5], method = "euclidean"), method = "ward.D")$order

data.scaled$SYMBOL <- factor(data.scaled$SYMBOL, levels = unique(data.scaled$SYMBOL)[ord])

figure3e <- ggplot(data.scaled,
              aes(y = SYMBOL, x = hr)) +
    geom_tile(stat = "identity", aes(fill = mean_zscore)) +
    facet_grid(category ~ ., scales = "free_y", space = "free", switch = "y") +
    scale_fill_distiller(name = "Z-score ", palette = "RdYlBu", direction = -1) +
    scale_y_discrete(position = "right") +
    ylab("") + xlab("") + 
    theme1 + 
    theme(strip.text.y =  element_text(size = 36,
                                       angle = 180, hjust = 1),
          strip.background = element_rect(color = "white", fill = "white", size = 1),
          legend.position = "bottom",
	  legend.title = element_text(size = 32),
	  legend.key.size = unit(2,"cm"),
	  panel.spacing = unit(2, "lines"),
	  panel.border = element_blank()) +
	  
    coord_fixed(ratio = 2) +
    ggtitle("E")

png(filename = "../figures/figure3/figure3e.png", width = 500, height = 1000)
print(figure3e)
dev.off()
ggsave(filename = "../figures/figure3/eps/figure3e.eps", 
plot = figure3e, 
width = 16, height = 16)
#+end_src

#+RESULTS:
[[file:../figures/figure5_/figure5e_.png]]

*** Figure 3 multipanel 
#+begin_src R :session *R* :exports none :results graphics :file ../figures/figure3/figure3_multipanel.png  :width 1600 :height 1600 :eval yes :tangle figure_Rscripts/figure3.R
## Figure 6 multipanel ---------------------------------------------------------
source("ggplot2-themes.R")
source("custom_fun.R")
library(ggplot2)
library(gridExtra)

## EdU staining
figure3b <- png2ggplot("../data/figure3/EdU_figure_cropped.png") +
    img.theme + coord_fixed(ratio = 1/1.4) + ggtitle("A")

## Sox9 staining
figure3c <- png2ggplot("../data/figure3/sox9_figure.png") +
    img.theme + coord_fixed(ratio = 1/1.75) + ggtitle("C")

## dppIV staining
figure3d <- png2ggplot("../data/figure3/dppiv_figure.png") +
    img.theme + coord_fixed(ratio = 1/1.75) + ggtitle("D")

figure3a <- figure3a + coord_fixed(ratio = 0.5)

## layout <- rbind(c(1,1,1,2,2,2),
##                 c(1,1,1,2,2,2),
##                 c(3,3,3,3,3),
##                 c(3,3,3,3,3),
##                 c(4,4,4,4,4),
## 		c(4,4,4,4,4))

layout <- rbind(c(1,1,1,2),
                c(3,3,4,4))

## PDF output
pdf(file = "../figures/figure3/figure3_multipanel.pdf", width = 8000/300, height = 7500/300, onefile = FALSE)
gridExtra::grid.arrange(figure3b, figure3a, figure3c, figure3d, layout_matrix = layout)
dev.off()

## EPS output
ggsave(filename = "../figures/figure3/eps/figure3_multipanel.eps", 
       plot = gridExtra::grid.arrange(figure3b, figure3a, figure3c, figure3d, layout_matrix = layout), 
       width = 20, height = 20)

## PNG output
png(filename = "../figures/figure3/figure3_multipanel.png", width = 1865, height = 2000)
gridExtra::grid.arrange(figure3b, figure3a, figure3c, figure3d, layout_matrix = layout)
dev.off()
#+end_src

#+RESULTS:
[[file:../figures/figure3/figure3_multipanel.png]]

** Makefile 
#+begin_src makefile :tangle ../makefile :results silent :exports none :eval no
## Figure 3 multipanel ---------------------------------------------------------
figure3: ./figures/figure3/figure3_multipanel.pdf
./figures/figure3/figure3_multipanel.pdf: ./data/figure3/dapi_ki67_edu_counts.tar.gz \
	./data/figure3/EdU_figure_cropped.png \
	./data/figure3/sox9_figure.png \
	./data/figure3/dppiv_figure.png
	tar -xzvf ./data/figure3/dapi_ki67_edu_counts.tar.gz
	R -e "setwd('./src/'); source('figure_Rscripts/figure3.R')"
#+end_src

* Figure 4 

** Rscript
*** Figure 4A:  /E. coli/ colonization is associated with a reduction in luminal O_{2}
    
**** Data import and manipulation 
#+begin_src R :session *R* :results silent :exports none :eval yes :tangle figure_Rscripts/figure4.R
## FIGURE 3 --------------------------------------------------------------------
## Figure 4A: /E. coli/ colonization is associated with a reduction in luminal O_{2}
## import data
library(RColorBrewer)
library(ggplot2)
data <- read.table("../data/figure4/HIO_O2_final_data.csv",
                   header = TRUE, sep = ",", stringsAsFactors=FALSE)

## Summary stats
data.mean.0 <- aggregate(o2 ~ group, data[data$time == 0,], FUN = mean)
data.mean.0$sem <- aggregate(o2 ~ group, data[data$time == 0,],
                             FUN = function(x) sd(x)/sqrt(length(x)))$o2
data.mean.0$time <- 0

data.mean.24 <- aggregate(o2 ~ group, data[data$time == 24,],
                          FUN = mean)
data.mean.24$sem <- aggregate(o2 ~ group, data[data$time == 24,],
                              FUN = function(x) sd(x)/sqrt(length(x)))$o2
data.mean.24$time <- 24

data.mean.48 <- aggregate(o2 ~ group, data[data$time == 48,], FUN = mean)
data.mean.48$sem <- aggregate(o2 ~ group, data[data$time == 48,],
                              FUN = function(x) sd(x)/sqrt(length(x)))$o2
data.mean.48$time <- 48

summary.data <- rbind(data.mean.0,data.mean.24,data.mean.48)

t0 <- t.test(data[data$time == 0 & data$group == "PBS",]$o2,
             data[data$time == 0 & data$group != "PBS",]$o2,
             alternative = "greater")$p.value
t24 <- t.test(data[data$time == 24 & data$group == "PBS",]$o2,
              data[data$time == 24 & data$group != "PBS",]$o2,
              alternative = "greater")$p.value
t48 <- t.test(data[data$time == 48 & data$group == "PBS",]$o2,
              data[data$time == 48 & data$group != "PBS",]$o2,
              alternative = "greater")$p.value

stats <- cbind(summary.data[summary.data$group == "+ E. coli",],c(t0,t24,t48))
colnames(stats)[5] <- "p"
star <- function(x){
    if (x > 0.05){
        return("")
    } else {
        if (x < 0.001){
            return("***")
        } else {
            if (x < 0.01){
                return("**")
            } else {
                return("*")
            }
        }
    }
}

stats$star <- as.character(lapply(stats$p, star))
#+end_src
     
**** Generate plot
#+begin_src R :session *R* :exports none :results graphics :file ../figures/figure4/figure4a.png :eval yes :tangle figure_Rscripts/figure4.R
## plot
library(ggplot2)  
source("ggplot2-themes.R")

data$group <- factor(data$group,
                     levels = c("PBS", "+ E. coli"))


figure4a <- ggplot(data[data$time < 72,],
                   aes(x= factor(time), y = o2, fill = treatment)) +
    geom_boxplot(notch = FALSE, aes(fill = group),
                 outlier.colour = NULL, outlier.shape = 21, outlier.size = 5,
                 size = 2, width = 0.4) +
    ylab(expression("%O"[2])) +
    ggtitle("A") + 
    xlab("Hours post-microinjection") + 
    theme1 +
    theme(legend.position = c(0.15, 0.1),
          legend.text = element_text(size = 28)) +
    guides(fill = guide_legend(override.aes = list(size = 1))) +

    annotate("text", x = c(1,2,3), y = c(9.75,6,9.75),
             label = paste("P = ",round(stats$p, digits = c(2,3,6))), size = 10) +
    annotate("segment",
             x = 1.85, xend = 2.15, y = 5.5, yend = 5.5,
             color = "black", size = 2) +
    annotate("segment",
             x = 2.85, xend = 3.15, y = 9.25, yend = 9.25,
             color = "black", size = 2) + 
    scale_fill_brewer(palette = "Set1", direction = -1) +
    scale_color_brewer(palette = "Set1") +
    theme(legend.key.size = unit(2,"cm"),
	  legend.text = element_text(size = 32))

png(filename = "../figures/figure4/figure4a.png", width = 800, height = 800)
print(figure4a)
dev.off()

ggsave(filename = "../figures/figure4/eps/figure4a.eps", 
       plot = figure4a, 
       width = 20, height = 20)
 #+end_src

#+RESULTS:
[[file:../figures/figure4/figure4a.png]]

*** Figure 4B: Reduction in luminal O_{2} associated with /E. coli/ growth
    
**** Data import and manipulation 
#+begin_src R :session *R* :results silent :exports none :eval yes :tangle figure_Rscripts/figure4.R
## FIGURE 3 --------------------------------------------------------------------
## Figure 4B: Reduction in luminal O_{2} associated with /E. coli/ growth
## compute fit line for CFU ~ O2
source("custom_fun.R")
stats.b <- lm_eqn2(data[data$cfu !=0 & data$time != 0 & data$time != 72,],
                log(data[data$cfu !=0 & data$time != 0 & data$time != 72,]$cfu),
                data[data$cfu !=0 & data$time != 0 & data$time != 72,]$o2)
#+end_src

**** Generate plot
#+begin_src R :session *R* :exports none :results graphics :file ../figures/figure4/figure4b.png :eval yes :tangle figure_Rscripts/figure4.R
library(scales)
library(ggplot2)
source("ggplot2-themes.R")

figure4b <- ggplot(data[data$cfu != 0 & data$time != 0 & data$time != 72,],
                   aes(x = cfu, y = o2)) +
    geom_smooth(data = data[data$cfu !=0 & data$time != 0 & data$time != 72,],
                aes(x = cfu, y = o2), colour = "black", size = 2,
                method = "lm",
                formula = y ~ x,
                level = 0.95) +
    geom_point(size = 8,shape = 21, fill = color.set[1] ) +
    scale_y_continuous(breaks = c(0:5)) + 
    scale_x_log10(breaks = trans_breaks("log10", function(x) 10^x),
                  labels = trans_format("log10", math_format(10^.x))) +
    annotation_logticks(sides = "b", size = 2,
                        short = unit(.75,"mm"),
                        mid = unit(3,"mm"),
                        long = unit(5,"mm")) +
    ylab(expression("%O"[2])) +
    ggtitle("B") + 
    xlab("CFU/HIO") + 
    theme1 +
    annotate("text",x = 10000, y = 4.5, label = stats.b, parse = TRUE, size = 8)

png(filename = "../figures/figure4/figure4b.png", width = 1000, height = 1000)
print(figure4b)
dev.off()

ggsave(filename = "../figures/figure4/eps/figure4b.eps", 
       plot = figure4b, 
       width = 20, height = 20)
#+end_src

#+RESULTS:
[[file:../figures/figure4/figure4b.png]]

*** Figure 4D: PMDZ staining table
#+begin_src R :session *R* :exports none :results graphics :file ../figures/figure4/figure4d.png :eval yes :tangle figure_Rscripts/figure4.R
## PMDZ staining table
stain <- data.frame(pbs = c(1,12,13),
                    ecoli = c(10,2,12),
                    hk = c(3,10,13),
                    o2 = c(14,0,14))
rownames(stain) <- c("PMDZ +", "PMDZ -", "n")
colnames(stain) <- c("PBS\n(negative control)", "E. coli\n(live)", "E. coli\n(heat-inactivated)", "1% oxygen\n(positive control)")

library(gridExtra)
library(grid)
tt <- ttheme_default(
		     colhead=list(fg_params=list(col="black", fontface=4L, cex = 1.5),
                                  bg_params = list(fill = c(rep('grey70', times = 2), 'grey80'))),
                     core = list(fg_params = list(fontface = "bold", cex = 1.5)),
                     rowhead = list(fg_params=list(col="black", fontface=4L, cex = 1.5, hjust = 1),
                                    bg_params = list(fill = c("white",rep(c('grey90','grey80'), times = 5)))))
grid.table(t(stain), theme = tt) 
#+end_src

#+RESULTS:
[[file:../figures/figure4/figure4d.png]]

*** Figure 4 multipanel
#+begin_src R :session *R* :exports none :results graphics :file ../figures/figure4/figure4_multipanel.png  :width 1200 :height 1200 :eval yes :tangle figure_Rscripts/figure4.R
## Figure 4 multipanel ---------------------------------------------------------
source("ggplot2-themes.R")
library(ggplot2)
library(gridExtra)

figure4c <- png2ggplot("../figures/figure4/figure4c.png") +
    img.theme + ggtitle("C") + coord_fixed(ratio = 0.6)

layout <- rbind(c(1,1,2,2),
                c(3,3,3,4))

## PDF output
pdf(file = "../figures/figure4/figure4_multipanel.pdf", width = 6000/300, height = 6000/300, onefile = FALSE)
gridExtra::grid.arrange(figure4a, figure4b, figure4c, tableGrob(t(stain), theme = tt), 
layout_matrix = layout)
dev.off()

## EPS output
ggsave(filename = "../figures/figure4/eps/figure4_multipanel.eps", 
       plot = gridExtra::grid.arrange(figure4a, figure4b, figure4c, tableGrob(t(stain), theme = tt), layout_matrix = layout), 
       width = 20, height = 20)

## PNG output
png(filename = "../figures/figure4/figure4_multipanel.png", width = 1600, height = 1600)
gridExtra::grid.arrange(figure4a, figure4b, figure4c, tableGrob(t(stain), theme = tt), layout_matrix = layout)
dev.off()
#+end_src

#+RESULTS:
[[file:../figures/figure4/figure4_multipanel.png]]


*** Data references in text
#+begin_src R :session *R* :results silent :exports none :eval yes :tangle figure_Rscripts/text-stats.R
library(RColorBrewer)
library(ggplot2)
data <- read.table("../data/figure4/HIO_O2_final_data.csv",
                   header = TRUE, sep = ",", stringsAsFactors=FALSE)

## Summary stats
data.mean.0 <- aggregate(o2 ~ group, data[data$time == 0,], FUN = mean)
data.mean.0$sem <- aggregate(o2 ~ group, data[data$time == 0,],
                             FUN = function(x) sd(x)/sqrt(length(x)))$o2
data.mean.0$time <- 0

data.mean.24 <- aggregate(o2 ~ group, data[data$time == 24,],
                          FUN = mean)
data.mean.24$sem <- aggregate(o2 ~ group, data[data$time == 24,],
                              FUN = function(x) sd(x)/sqrt(length(x)))$o2
data.mean.24$time <- 24

data.mean.48 <- aggregate(o2 ~ group, data[data$time == 48,], FUN = mean)
data.mean.48$sem <- aggregate(o2 ~ group, data[data$time == 48,],
                              FUN = function(x) sd(x)/sqrt(length(x)))$o2
data.mean.48$time <- 48

t0 <- t.test(data[data$time == 0 & data$group == "PBS",]$o2,
             data[data$time == 0 & data$group != "PBS",]$o2,
             alternative = "greater")$p.value
t24 <- t.test(data[data$time == 24 & data$group == "PBS",]$o2,
              data[data$time == 24 & data$group != "PBS",]$o2,
              alternative = "greater")$p.value
t48 <- t.test(data[data$time == 48 & data$group == "PBS",]$o2,
              data[data$time == 48 & data$group != "PBS",]$o2,
              alternative = "greater")$p.value

## O2 concentrations in external media
media <- c(17.9, 18.4, 20.1, 19.2, 18.7)
media.mean <- mean(media)
media.sem <- sd(media)/sqrt(length(media))

base <- t.test(data[data$time == 0,]$o2,
             media,
             alternative = "less")$p.value

#+end_src
** Makefile

#+begin_src makefile :tangle ../makefile :results silent :exports none :eval no
## Figure 4 multipanel ---------------------------------------------------------
figure4: ./figures/figure4/figure4_multipanel.pdf
./figures/figure4/figure4_multipanel.pdf : ./src/figure_Rscripts/figure4.R \
	./data/figure4/HIO_O2_final_data.csv \
	./figures/figure4/figure4c.png
	R -e "setwd('./src/'); source('figure_Rscripts/figure4.R')"
#+end_src


* Figure 5 

** Rscript 
*** kallisto post-processing   
**** Generate data dependencies 
***** Export counts from kallisto 
  #+begin_src R :session *R* :results silent :exports none :eval yes :tangle figure_Rscripts/figure5-kallisto-post.R
## Differential expression of kallisto results with DESeq2

## read in table with sample metadata
samples <- readr::read_csv(file = "../data/RNA-seq/sample_key.csv")

samples <- subset(samples, samples$Date == "2016-08-18" | (samples$Date == "2016-05-24" & samples$injection != "hypoxia"))

write.csv(samples, "../data/RNA-seq/figure5_sample_key.csv")

## setup access to kallisto read files
files <- file.path(samples$directory,
                   samples$file_name,
                   "abundance.tsv")

## set sample names as description_rep#_seq_rep#
names(files) <- samples$short_name
## check that all files are found
if (all(file.exists(files)) == FALSE) {
    print("kallisto files not found")
    stop()
}

## associate transcripts with gene IDs
## associate transcripts with gene IDs
## check if saved transcript:gene index is present
## recommended - biomaRt connectivity is unreliable
if (file.exists("../data/RNA-seq/tx2gene.Rdata") == TRUE) {
    load(file = "../data/RNA-seq/tx2gene.Rdata")
} else {    
    ## create biomart reference
    ensembl <- biomaRt::useMart("ensembl")
    mart <- biomaRt::useMart(biomart = "ENSEMBL_MART_ENSEMBL",
                         dataset = "hsapiens_gene_ensembl",
                         host = 'useast.ensembl.org')
    ## create index of gene names
    tx2gene <- biomaRt::getBM(attributes = c("ensembl_transcript_id","external_gene_name"), mart = mart)
}

## import kallisto data and generate count dataframe (dds)
## http://bioconductor.org/packages/release/bioc/vignettes/tximport/inst/doc/tximport.html
library(readr)
txi <- tximport::tximport(files, type = "kallisto", tx2gene = tx2gene, reader = read_tsv)

## create directory to deposit results
data.dir <- "../results/ECOR2_hypoxia_nfkb/"
dir.create(path = data.dir, recursive = TRUE)
## export abundance counts
write.csv(txi$abundance, file = file.path(data.dir,"complete_dataset_txi.csv"))

library(DESeq2)
## https://bioconductor.org/packages/devel/bioc/vignettes/DESeq2/inst/doc/DESeq2.html
dds <- DESeq2::DESeqDataSetFromTximport(txi,
                                        colData = samples,
                                        design = ~ code_name)
## pre-filter out counts < 1
dds <- dds[rowSums(counts(dds)) > 0.1, ]

## write out normalized expression counts
dds <- DESeq2::estimateSizeFactors(dds)
ddscounts <- DESeq2::counts(dds, normalized = TRUE)

## write expression matrix to file
write.csv(ddscounts,
          file =  file.path(data.dir,"complete-dataset_DESeq2-normalized-counts.csv"))

  #+end_src

***** Differential expression 
  #+begin_src R :session *R* :results silent :exports none :eval yes :tangle figure_Rscripts/figure5-kallisto-post.R
## enable parallel processes
library("BiocParallel")
register(MulticoreParam(4))

## setup multifactor design
colData(dds)$code_name <- as.factor(colData(dds)$code_name)
ddsMF <- dds
DESeq2::design(ddsMF) <- ~ code_name

## Likelihood ratio test (ANOVA-like)
## check parallel = FALSE if error occurs at this point (this was broken by upgrade to R 3.3.3)
ddsMF <- DESeq2::DESeq(ddsMF, test = "LRT", reduced = ~1, parallel = TRUE)
res <- DESeq2::results(ddsMF)
write.csv(res, file = file.path(data.dir, "LRT.csv"))

## need to specify Wald test when later making specific comparisons
res <- DESeq2::results(ddsMF, test = "Wald",
                       contrast = c("code_name", "ECOR2", "ECOR2+NFKB-inhib"))
write.csv(res, file = file.path(data.dir, "ECOR2_over_ECOR-NFKBi.csv"))
## vs pbs
res <- DESeq2::results(ddsMF, test = "Wald",
                       contrast = c("code_name", "ECOR2", "PBS"))
write.csv(res, file = file.path(data.dir, "ECOR2_over_PBS.csv"))
res <- DESeq2::results(ddsMF, test = "Wald",
                       contrast = c("code_name", "ECOR2-heat-kill", "PBS"))
write.csv(res, file = file.path(data.dir, "ECOR2-HK_over_PBS.csv"))
res <- DESeq2::results(ddsMF, test = "Wald",
                       contrast = c("code_name", "hypoxia", "PBS"))
write.csv(res, file = file.path(data.dir, "hypoxia_over_PBS.csv"))
res <- DESeq2::results(ddsMF, test = "Wald",
                       contrast = c("code_name", "ECOR2+NFKB-inhib", "PBS"))
write.csv(res, file = file.path(data.dir, "ECOR2-NFKBi_over_PBS.csv"))
## vs. Ecor2
res <- DESeq2::results(ddsMF, test = "Wald",
                       contrast = c("code_name", "PBS", "ECOR2"))
write.csv(res, file = file.path(data.dir, "PBS_over_ECOR2.csv"))
res <- DESeq2::results(ddsMF, test = "Wald",
                       contrast = c("code_name", "ECOR2-heat-kill", "ECOR2"))
write.csv(res, file = file.path(data.dir, "ECOR2-HK_over_ECOR2.csv"))
res <- DESeq2::results(ddsMF, test = "Wald",
                       contrast = c("code_name", "hypoxia", "ECOR2"))
write.csv(res, file = file.path(data.dir, "hypoxia_over_ECOR2.csv"))

res <- DESeq2::results(ddsMF, test = "Wald",
                        contrast = c("code_name", "hypoxia", "hypoxia+NFKB-inhib"))
write.csv(res, file = file.path(data.dir, "hypoxia_over_hypoxia-NFKBi.csv"))

res <- DESeq2::results(ddsMF, test = "Wald",
                        contrast = c("code_name", "ECOR2-heat-kill", "ECOR2-heat-kill+NFKB-inhib"))
write.csv(res, file = file.path(data.dir, "ECOR2-HK_over_ECOR2-HK-NFKBi.csv"))
 #+end_src

***** Makefile  
   #+begin_src makefile :tangle ../makefile :results silent :exports none :eval no
## Generate gene counts and DE from kallisto output for Figure 5
./results/ECOR2_hypoxia_nfkb/ECOR2-HK_over_ECOR2-HK-NFKBi.csv ./results/ECOR2_hypoxia_nfkb/ECOR2-HK_over_PBS.csv ./results/ECOR2_hypoxia_nfkb/ECOR2_over_ECOR-NFKBi.csv ./results/ECOR2_hypoxia_nfkb/ECOR2_over_PBS.csv ./results/ECOR2_hypoxia_nfkb/hypoxia_over_hypoxia-NFKBi.csv ./results/ECOR2_hypoxia_nfkb/hypoxia_over_PBS.csv :
	./src/figure_Rscripts/figure5-kallisto-post.R \
	../data/RNA-seq/kallisto-Run_1731/73868_GAGTGG_S95_L006_R1_001.fastq/abundance.h5 \
	../data/RNA-seq/kallisto-Run_1731/73869_ATCACG_S96_L006_R1_001.fastq/abundance.h5 \
	../data/RNA-seq/kallisto-Run_1731/73870_TAGCTT_S97_L006_R1_001.fastq/abundance.h5 \
	../data/RNA-seq/kallisto-Run_1731/73871_GTGGCC_S98_L006_R1_001.fastq/abundance.h5 \
	../data/RNA-seq/kallisto-Run_1731/73872_AGTCAA_S99_L006_R1_001.fastq/abundance.h5 \
	../data/RNA-seq/kallisto-Run_1731/73873_GTCCGC_S1_L007_R1_001.fastq/abundance.h5 \
	../data/RNA-seq/kallisto-Run_1731/73874_ACAGTG_S2_L007_R1_001.fastq/abundance.h5 \
	../data/RNA-seq/kallisto-Run_1731/73875_GCCAAT_S3_L007_R1_001.fastq/abundance.h5 \
	../data/RNA-seq/kallisto-Run_1731/73876_ATGTCA_S4_L007_R1_001.fastq/abundance.h5 \
	../data/RNA-seq/kallisto-Run_1731/73881_ACTGAT_S9_L007_R1_001.fastq/abundance.h5 \
	../data/RNA-seq/kallisto-Run_1731/73882_ATTCCT_S10_L007_R1_001.fastq/abundance.h5 \
	../data/RNA-seq/kallisto-Run_1731/73883_GGCTAC_S11_L007_R1_001.fastq/abundance.h5 \
	../data/RNA-seq/kallisto-Run_1731/73884_ACTTGA_S12_L007_R1_001.fastq/abundance.h5 \
	../data/RNA-seq/kallisto-Run_1731/73885_CGTACG_S13_L007_R1_001.fastq/abundance.h5 \
	../data/RNA-seq/kallisto-Run_1731/73886_AGTTCC_S14_L007_R1_001.fastq/abundance.h5 \
	../data/RNA-seq/kallisto-Run_1731/73887_GTTTCG_S15_L007_R1_001.fastq/abundance.h5 \
	../data/RNA-seq/kallisto-Run_1731/73888_CGATGT_S16_L007_R1_001.fastq/abundance.h5 \
	../data/RNA-seq/kallisto-Run_1731/73889_CAGATC_S17_L007_R1_001.fastq/abundance.h5 \
	../data/RNA-seq/kallisto-Run_1731/73890_GTGAAA_S18_L008_R1_001.fastq/abundance.h5 \
	../data/RNA-seq/kallisto-Run_1731/73891_TGACCA_S19_L008_R1_001.fastq/abundance.h5 \
	../data/RNA-seq/kallisto-Run_1731/73892_GAGTGG_S20_L008_R1_001.fastq/abundance.h5 \
	../data/RNA-seq/kallisto-Run_1731/73893_ATCACG_S21_L008_R1_001.fastq/abundance.h5 \
	../data/RNA-seq/kallisto-Run_1731/73894_TAGCTT_S22_L008_R1_001.fastq/abundance.h5 \
	../data/RNA-seq/kallisto-Run_1731/73895_GTGGCC_S23_L008_R1_001.fastq/abundance.h5 \
	../data/RNA-seq/kallisto-Run_1731/73896_AGTCAA_S24_L008_R1_001.fastq/abundance.h5 \
	../data/RNA-seq/kallisto-Run_1731/73897_GTCCGC_S25_L008_R1_001.fastq/abundance.h5 \
	../data/RNA-seq/kallisto-Run_1731/73898_ACAGTG_S26_L008_R1_001.fastq/abundance.h5 \
	../data/RNA-seq/kallisto-Run_1731/73899_GCCAAT_S27_L008_R1_001.fastq/abundance.h5 \
	../data/RNA-seq/kallisto-Run_1731/73900_ATGTCA_S28_L008_R1_001.fastq/abundance.h5 \
	../data/RNA-seq/kallisto-Run_1731/73901_CTTGTA_S29_L008_R1_001.fastq/abundance.h5 \
	../data/RNA-seq/kallisto-Run_1731/73902_CCGTCC_S30_L008_R1_001.fastq/abundance.h5 \
	../data/RNA-seq/kallisto-Run_1731/73903_TTAGGC_S31_L008_R1_001.fastq/abundance.h5 \
	../data/RNA-seq/kallisto-Run_1731/73904_GATCAG_S32_L008_R1_001.fastq/abundance.h5 \
	../data/RNA-seq/kallisto-Run_1731/73905_ACTGAT_S33_L008_R1_001.fastq/abundance.h5 \
	../data/RNA-seq/kallisto-Run_1731/73906_ATTCCT_S34_L008_R1_001.fastq/abundance.h5
	R -e "setwd('./src/'); source('figure_Rscripts/figure5-kallisto-post.R')"
   #+end_src

*** Figure 5B: Identification of gene sets 1-4 with scatter plots
    
**** Data import and manipulation plot 1
#+begin_src R :session *R* :results silent :exports none :eval yes :tangle figure_Rscripts/figure5.R
## FIGURE 5 --------------------------------------------------------------------
## Figure 5B: Figure 5B: Identification of gene sets 1-4 with scatter plots
## import data
data.dir <- "../results/ECOR2_hypoxia_nfkb/"
library(magrittr)
ecor2.nfkbi <- readr::read_csv(file = file.path(data.dir,"ECOR2_over_ECOR-NFKBi.csv")) %>% dplyr::rename(SYMBOL = X1)
hk.nfkbi <- readr::read_csv(file = file.path(data.dir,"ECOR2-HK_over_ECOR2-HK-NFKBi.csv")) %>% dplyr::rename(SYMBOL = X1)
hypoxia.nfkbi <- readr::read_csv(file = file.path(data.dir,"hypoxia_over_hypoxia-NFKBi.csv")) %>% dplyr::rename(SYMBOL = X1)

## add comparison ID
## remember the signs get reversed in the plot - labels reflect the plot orientation
ecor2.nfkbi$comparison <- "live+NFKBi vs live"#"E. coli -/+ SC-514" #"E. coli/E. coli + SC-514"
hk.nfkbi$comparison <- "dead+NFKBi vs dead"
hypoxia.nfkbi$comparison <- "hypoxia+NFKBi vs hypoxia"


df <- rbind(hk.nfkbi, hypoxia.nfkbi)


## subset columns of interest
ecor2 <- ecor2.nfkbi %>% dplyr::select(SYMBOL, log2FoldChange, padj, comparison) %>%
    dplyr::rename(ecor2_log2 = log2FoldChange, ecor2_padj = padj, comparison2 = comparison)
df <- df %>% dplyr::select(SYMBOL, log2FoldChange, padj, comparison) %>%
    dplyr::rename(hk_log2 = log2FoldChange, hk_padj = padj)

## join dataframes
df <- dplyr::left_join(df, ecor2, by = 'SYMBOL') 

## subset data prior to plotting
df1 <- subset(df, df$ecor2_padj < 0.05 |
                     df[df$comparison == "dead+NFKBi vs dead",]$hk_padj < 0.05 |
                                                                              df[df$comparison == "hypoxia+NFKBi vs hypoxia",]$hk_padj < 0.05, na.rm = TRUE)

df1$comparison <- factor(df1$comparison,
                        levels = c("dead+NFKBi vs dead",
                                   "hypoxia+NFKBi vs hypoxia"))

#+end_src

**** Generate plot 1
#+begin_src R :session *R* :exports none :results graphics :file ../figures/figure5/figure5b1.png :eval yes :tangle figure_Rscripts/figure5.R
library(ggplot2)
source("ggplot2-themes.R")
plot.set <- df1[(df1$hk_log2 > 0 & df1$ecor2_log2 > 0 & (df1$ecor2_padj < 0.05 | df1$hk_padj < 0.05)),]

gs1 <- subset(plot.set,plot.set$comparison == "dead+NFKBi vs dead")$SYMBOL
gs2 <- subset(plot.set,plot.set$comparison == "hypoxia+NFKBi vs hypoxia")$SYMBOL

figure5b1 <- ggplot(data = df1, aes(x = -hk_log2, y = -ecor2_log2)) +
    geom_point(shape = 1, size = 3, fill = "grey", color = "grey") +
    geom_point(data = df1[(df1$hk_log2 > 0 & df1$ecor2_log2 > 0 & (df1$ecor2_padj < 0.05 | df1$hk_padj < 0.05)),],
               shape = 21, size = 3, fill = color.set[2], color = color.set[2]) + 
    stat_density_2d(data = df1[(df1$hk_log2 > 0 & df1$ecor2_log2 > 0 & (df1$ecor2_padj < 0.05 | df1$hk_padj < 0.05)),],
                    aes(fill = ..level..), geom = "polygon", na.rm = TRUE) +
    facet_grid(comparison2 ~ comparison) +
    xlim(c(-3,3)) + ylim(c(-3,3)) +
    scale_fill_distiller("Density", palette = "Spectral") +
    labs(x = expression(Log[2]*"FC"),
         y = expression(Log[2]*"FC")) +
     annotate("text",
              x = -1.5, y = -3,
              label = c(
                  paste("Gene Set I -",
                      length(
                          rownames(
                              subset(plot.set,plot.set$comparison == "dead+NFKBi vs dead"))),
                      "genes"),
                  paste("Gene Set II -",
                      length(
                          rownames(
                              subset(plot.set,plot.set$comparison == "hypoxia+NFKBi vs hypoxia"))),
                      "genes")
                  ),
              color = "grey10",
              size = 12, fontface = "bold", hjust = 0.3) +
    theme1 +
    theme(axis.title = element_text(size = 32),
          panel.spacing = unit(1, "lines"),
          #panel.border = element_rect(fill = NA, color = "white"),
          strip.text =  element_text(size = 32))

png(filename = "../figures/figure5/figure5b1.png", width = 1200, height = 600)
print(figure5b1)
dev.off()
#+end_src

#+RESULTS:
[[file:../figures/figure5/figure5b1.png]]

**** Data import and manipulation plot 2

#+begin_src R :session *R* :results silent :exports none :eval yes :tangle figure_Rscripts/figure5.R
ecor2.nfkbi <- readr::read_csv(file = file.path(data.dir,"ECOR2_over_ECOR-NFKBi.csv")) %>% dplyr::rename(SYMBOL = X1)
hk.nfkbi <- readr::read_csv(file = file.path(data.dir,"ECOR2-HK_over_ECOR2-HK-NFKBi.csv")) %>% dplyr::rename(SYMBOL = X1)
hypoxia.nfkbi <- readr::read_csv(file = file.path(data.dir,"hypoxia_over_hypoxia-NFKBi.csv")) %>% dplyr::rename(SYMBOL = X1)

## add comparison ID
ecor2.nfkbi$comparison <- "E. coli/E. coli + SC-514"
hk.nfkbi$comparison <- "HK-E. coli/HK-E. coli + SC-514"
hypoxia.nfkbi$comparison <- "1% O2/1% O2 + SC-514"

## subset columns of interest
ecor2 <- ecor2.nfkbi %>% dplyr::select(SYMBOL, log2FoldChange, padj) %>%
    dplyr::rename(ecor2_log2 = log2FoldChange, ecor2_padj = padj)
hk <- hk.nfkbi %>% dplyr::select(SYMBOL, log2FoldChange, padj) %>%
    dplyr::rename(hk_log2 = log2FoldChange, hk_padj = padj)
hypoxia <- hypoxia.nfkbi %>% dplyr::select(SYMBOL, log2FoldChange, padj) %>%
    dplyr::rename(hypoxia_log2 = log2FoldChange, hypoxia_padj = padj)

## join dataframes
df <- dplyr::left_join(ecor2, hk, by = 'SYMBOL') %>%
    dplyr::left_join(hypoxia, by = 'SYMBOL')

## subset data prior to plotting
df <- subset(df, df$ecor2_padj < 0.05 & (df$hk_padj < 0.05 | df$hypoxia_padj < 0.05), na.rm = TRUE)
test <- df

ecor2.pbs <- readr::read_csv(file = file.path(data.dir,"ECOR2_over_PBS.csv")) %>% dplyr::rename(SYMBOL = X1)
hk.pbs <- readr::read_csv(file = file.path(data.dir,"ECOR2-HK_over_PBS.csv")) %>% dplyr::rename(SYMBOL = X1)
hypoxia.pbs <- readr::read_csv(file = file.path(data.dir,"hypoxia_over_PBS.csv")) %>% dplyr::rename(SYMBOL = X1)

## add comparison ID
ecor2.pbs$comparison <- "E. coli/PBS"
hk.pbs$comparison <- "dead E. coli/PBS"
hypoxia.pbs$comparison <- "hypoxia/PBS"

df3 <- rbind(hk.pbs, hypoxia.pbs)

## subset columns of interest
ecor2 <- ecor2.pbs %>% dplyr::select(SYMBOL, log2FoldChange, padj, comparison) %>%
    dplyr::rename(ecor2_log2 = log2FoldChange, ecor2_padj = padj, comparison2 = comparison)
df3 <- df3 %>% dplyr::select(SYMBOL, log2FoldChange, padj, comparison) %>%
    dplyr::rename(hk_log2 = log2FoldChange, hk_padj = padj)

## join dataframes
df2 <- dplyr::left_join(df3, ecor2, by = 'SYMBOL') 


df2 <- df2[-which(df2$SYMBOL %in% df$SYMBOL),]

df <- df2

## subset data prior to plotting
df <- subset(df, df$ecor2_padj < 0.05 |
                     df[df$comparison == "dead E. coli/PBS",]$hk_padj < 0.05 |

                                                              df[df$comparison == "hypoxia/PBS",]$hk_padj < 0.05, na.rm = TRUE)

df$comparison <- factor(df$comparison,
                        levels = c("dead E. coli/PBS",
                                   "hypoxia/PBS"))
#+end_src

**** Generate plot 2

#+begin_src R :session *R* :exports none :results graphics :file ../figures/figure5/figure5b2.png :eval yes :tangle figure_Rscripts/figure5.R
library(ggplot2)
source("ggplot2-themes.R")
#df <- df[complete.cases(df),]
plot.set <- df[(df$hk_log2 > 0 & df$ecor2_log2 > 0 & (df$ecor2_padj < 0.05 | df$hk_padj < 0.05)),]
#plot.set <- df[(df$hk_log2 > 0 & df$ecor2_log2 > 0),]

plot.set <- plot.set[complete.cases(plot.set),]

gs3 <- subset(plot.set,plot.set$comparison == "dead E. coli/PBS")$SYMBOL
gs4 <- subset(plot.set,plot.set$comparison == "hypoxia/PBS")$SYMBOL

figure5b2 <- ggplot(data = df, aes(x = hk_log2, y = ecor2_log2)) +
    geom_point(shape = 1, size = 3, fill = "grey", color = "grey") +
     ## geom_point(data = df[(df$hk_log2 < 0 & df$ecor2_log2 < 0 ),],
     ##            shape = 21, size = 3, fill = color.set[2], color = color.set[2]) + 
     ## stat_density_2d(data = df[(df$hk_log2 < 0 & df$ecor2_log2 < 0),],
     ##                 aes(fill = ..level..), geom = "polygon", na.rm = TRUE) +
     geom_point(data = plot.set,
                shape = 21, size = 3, fill = color.set[2], color = color.set[2]) + 
     stat_density_2d(data = plot.set,
                     aes(fill = ..level..), geom = "polygon", na.rm = TRUE) +

     facet_grid(comparison2 ~ comparison) +
    xlim(c(-3,3)) + ylim(c(-3,3)) +
    scale_fill_distiller("Density", palette = "Spectral") +
    labs(x = expression(Log[2]*"FC"),
         y = expression(Log[2]*"FC")) +
    annotate("text",
             x = -1.5, y = 3,
              label = c(
                  paste("Gene Set III -",
                      length(
                          rownames(
                              subset(plot.set,plot.set$comparison == "dead E. coli/PBS"))),
                      "genes"),
                  paste("Gene Set IV -",
                      length(
                          rownames(
                              subset(plot.set,plot.set$comparison == "hypoxia/PBS"))),
                      "genes")
                  ),

              color = "grey10",
              size = 12, fontface = "bold", hjust = 0.1) +
    theme1 +
    theme(axis.title = element_text(size = 32),
          panel.spacing = unit(1, "lines"),
          #panel.border = element_rect(fill = NA, color = "white"),
          strip.text =  element_text(size = 32))

png(filename = "../figures/figure5/figure5b2.png", width = 1200, height = 600)
print(figure5b2)
dev.off()
#+end_src

#+RESULTS:
[[file:../figures/figure5/figure5b2.png]]

**** Multipanel Figure 5B
#+begin_src R :session *R* :exports none :results graphics :file ../figures/figure5/figure5b.png :eval yes :tangle figure_Rscripts/figure5.R
library(gridExtra)
png(filename = "../figures/figure5/figure5b.png", width = 2400, height = 600)
gridExtra::grid.arrange(figure5b1, figure5b2, ncol = 2)
dev.off()


ggsave(filename = "../figures/figure5/eps/figure5b.eps", 
       plot = gridExtra::grid.arrange(figure5b1, figure5b2, ncol = 2), 
       width = 48, height = 12)
#+end_src

#+RESULTS:
[[file:../figures/figure5/figure5b.png]]

*** Gene set table
#+begin_src R :session *R* :results silent :exports none :eval yes :tangle figure_Rscripts/figure5.R
## Output supplemental table with genes in each set
write.csv(gs1, file = "../results/supplemental/Figure5_Gene_set1.csv")
write.csv(gs2, file = "../results/supplemental/Figure5_Gene_set2.csv")
write.csv(gs3, file = "../results/supplemental/Figure5_Gene_set3.csv")
write.csv(gs4, file = "../results/supplemental/Figure5_Gene_set4.csv")
#+end_src

*** TODO Add GO & REACTOME over-abundance test  
*** Figure 5C: GO & REACTOME plot
    
**** Data import and manipulation 
#+begin_src R :session *R* :results silent :exports none :eval yes :tangle figure_Rscripts/figure5.R
## FIGURE 5 --------------------------------------------------------------------
## Figure 5C: GO & REACTOME plot
## import data
## load data
data.dir <- "../results/ECOR2_hypoxia_nfkb/"
data <- readr::read_csv(file = file.path(data.dir, "nfkb-dependent_complete-goANDreactome-results.csv.bak"))

data2 <- readr::read_csv(file = file.path(data.dir, "nfkb-independent_complete-goANDreactome-results.csv"))

reactome.data <- readr::read_csv(file = file.path(data.dir, "REACTOME-requireslive_nfkbindependent_ecoli_subset.csv"))

reactome.data$comparison <- "live-hypoxia"

data2 <- rbind(data2, reactome.data)
data$nfkb <- "SC-514 suppressed"
data2$nfkb <- ""
data2$comparison <- gsub(", nfkb-independent", "", data2$comparison)
data <- rbind(data, data2)

data$comparison <- paste0(data$comparison,"\n",data$nfkb)
## load list of pathways to plot
select <- readr::read_csv(file = file.path(data.dir, "unique_nfkb_pathways.csv"), col_names = TRUE)

## subset data to selections
#data <- data[which(data$Description %in% unique(select$X2)),]
data <- data[which(data$Description %in% select$Description),]
test <- data #check
data <- subset(data, data$pvalue < 0.004 | data$Description == "Defensins")
data <- dplyr::left_join(data, select, by = "Description")

data$Description <- gsub("Hypoxia-inducible Factor Alpha", "HIF1a",data$Description)
data$Description <- gsub("kappa", "k",data$Description)
data$Description <- gsub("toll-like receptor", "TLR",data$Description)
data$Description <- gsub("Toll Like Receptor", "TLR",data$Description)
data$Description <- gsub("Toll-Like Receptors", "All TLR",data$Description)
data$Description <- gsub(" initiated on plasma membrane", "",data$Description)
data$Description <- gsub("interleukin", "IL",data$Description)
data$Description <- gsub("positive regulation", "up-regulation",data$Description)
data$Description <- gsub("Mediated ", "",data$Description)
#data$Description <- gsub("response to ", "",data$Description)
data$Description <- gsub("mediated ", "",data$Description)
data$Description <- gsub("negative regulation", "down-regulation",data$Description)
data$Description <- gsub("nucleotide-binding oligomerization domain containing", "NOD-like",data$Description)
data$Description <- gsub("lic process", "",data$Description)
data$Description <- gsub("catabo", "catabolism",data$Description)
data$Description <- gsub("metabo", "metabolism",data$Description)
data$Description <- gsub("signaling pathway", "pathway",data$Description)
data$Description <- gsub("TLR T", "T",data$Description)
data$Description <- gsub("The citric acid ", "",data$Description)
data$Description <- gsub("\\(TCA\\)", "TCA",data$Description)
data$Description <- gsub("TAK1 activates NFkB by phosphorylation and activation of IKKs complex", "TAK1 activates NFkB",data$Description)
data$Description <- gsub("\\(TLR5\\)|\\(TLR10\\)|\\(TLR9\\)|\\(TLR2\\)|\\(TLR3\\)|\\(TLR4\\)|", "",data$Description)
data$Description <- gsub("  ", " ",data$Description)

data$comparison <- gsub(pattern = "live-HK",
                       replacement = "Associated with\nbacterial contact", data$comparison)
data$comparison <- gsub(pattern = "live-hypoxia",
                       replacement = "Associated with\nbacterial hypoxia", data$comparison)
data$category <- gsub("Innate and adaptive defense", "Innate and adaptive\ndefense",data$category)

## apply gene ratio cut-off
data <- data[data$gene_ratio > 0.01,]

data$comparison <- factor(data$comparison,
                          levels = c(
                              "Associated with\nbacterial contact\nSC-514 suppressed",
                              "Associated with\nbacterial hypoxia\nSC-514 suppressed",
                              "Associated with\nbacterial contact\n",                 
                              "Associated with\nbacterial hypoxia\n",                 
                              "hk-hypoxia\nSC-514 suppressed",                        
                              "hk-hypoxia\n"))   

 data$category <- factor(data$category,
                         levels = c(
                             "TLR signaling",
                             "Innate and adaptive\ndefense",
                             "NF-kB signaling",
                             "Epithelial barrier",
                             "Mucins",
                             "Metabolism",
                             "Mitochondria",
                             "Hypoxia",
                             "Development",
                             "Cell cycle"))

data <- data[order( data$comparison,data$gene_ratio, decreasing = FALSE),]

data$Description <- factor(data$Description,
                                levels = unique(data$Description))


#data$combo_group <- paste0(data$hypoxia_status," \n ",data$hk_status)
write.csv(data, file = file.path(data.dir, "plotted-nfkb_complete-goANDreactome-results.csv"))

#+end_src

**** Generate plot
#+begin_src R :session *R* :exports none :results graphics :file ../figures/figure5/figure5c.png :eval yes :tangle figure_Rscripts/figure5.R
library(ggplot2)
library(ggstance)
source("ggplot2-themes.R")

## Use "Gene Set" names
data$comparison <- gsub("Associated with\nbacterial contact\nSC-514 suppressed", "Gene Set I", data$comparison)
data$comparison <- gsub("Associated with\nbacterial hypoxia\nSC-514 suppressed", "Gene Set II", data$comparison)
data$comparison <- gsub("Associated with\nbacterial contact\n", "Gene Set III", data$comparison)
data$comparison <- gsub("Associated with\nbacterial hypoxia\n", "Gene Set IV", data$comparison)                 


figure5c <- ggplot(data = data[data$comparison != "hk-hypoxia\n" &
                                        #   data$category != "Hypoxia" &
                                             data$category != "NF-kB signaling" &                               
                                              data$comparison != "hk-hypoxia\nSC-514 suppressed",],
                   aes(x = gene_ratio*100, y = Description, fill = -log10(pvalue))) +
    geom_barh(stat = "identity") +
    facet_grid(category ~ comparison, scales = "free_y", space = "free_y") +
    scale_fill_gradient(expression(paste("-log"[10],"(P-value)")),
                        high = blue.set[8],
                        low = blue.set[4])+
    xlab("% genes matched to pathway") + ylab("") +
    theme1 + 
    theme(strip.text.x =  element_text(size = 32, face = "bold"),
          strip.text.y =  element_text(size = 32, 
                                       angle = 360),
          strip.background = element_rect(color = "grey30", fill = "white", size = 2.5),
          panel.background = element_rect(color = NA, fill = "grey90"),
          legend.position = "bottom",
	  legend.title = element_text(size = 24),
          axis.text.y = element_text(size = 24),
	  axis.title = element_text(size = 24),
	  plot.subtitle = element_text(size = 26, hjust = 0.5, face = "bold"),
	  panel.spacing.x = unit(0.25, "lines"),
	  panel.spacing = unit(1.5, "lines"),
	  panel.border = element_blank(),
	  legend.key.size = unit(1,"cm")) + ggtitle("C")


png(filename = "../figures/figure5/figure5c.png", width = 2400, height = 1550)
print(figure5c)
dev.off()
ggsave(filename = "../figures/figure5/eps/figure5c.eps", 
       plot = figure5c, 
       width = 48, height = 31)
#+end_src

#+RESULTS:
[[file:../figures/figure5/figure5c.png]]

*** Figure 5 Multipanel 
#+begin_src R :session *R* :exports none :eval yes :tangle figure_Rscripts/figure5.R
## multipanel plot -------------------------------------------------------------
library(ggplot2)
source("ggplot2-themes.R")
source("custom_fun.R")

if (file.exists("../figures/figure5/figure5a-cairo.Rdata") == TRUE) {
    load(file = "../figures/figure5/figure5a-cairo.Rdata")
} else {    
    ##https://www.stat.auckland.ac.nz/~paul/Reports/Rlogo/Rlogo.html
    ##convertPicture("../figures/figure5/figure5a.svg", "../figures/figure5/figure5a-cairo.svg")
    ## this step takes a while
    figure5a <- grImport2::readPicture("../figures/figure5/figure5a-cairo.svg")
    save(figure5a, file = "../figures/figure5/figure5a-cairo.Rdata")
    load(file = "../figures/figure5/figure5a-cairo.Rdata")
}

library(grid)
library(gridSVG)
library(grImport2)
fig4a <- gTree(children = gList(pictureGrob(figure5a, ext = "gridSVG")))

figure5a <- qplot(1:100, 1:100, alpha = I(0)) +
    theme_bw() +
    annotation_custom(fig4a, xmin = -Inf,
                      xmax = Inf,
                      ymin = -Inf,
                      ymax = Inf) +
    img.theme + ggtitle("A") + coord_fixed(ratio = 0.354)

layout <- rbind(c(1),
                c(1),
                c(2),
		c(3),
                c(3),
                c(3),
                c(3))

library(gridExtra)
library(grid)

figure5b <- gridExtra::grid.arrange(figure5b1, figure5b2, ncol = 2,
                                  top = textGrob("B", hjust = 32,
                                                 gp = gpar(fontsize = 45, font = 2)))

## PDF output
pdf(file = "../figures/figure5/figure5_multipanel.pdf", width = 9200/300, height = 14562/300, onefile = FALSE)
gridExtra::grid.arrange(figure5a, figure5b, figure5c, layout_matrix = layout)
dev.off()

## EPS output
ggsave(filename = "../figures/figure5/eps/figure5_multipanel.eps", 
       plot = gridExtra::grid.arrange(figure5a, figure5b, figure5c, layout_matrix = layout), 
       width = 48, height = 67, limitsize = FALSE, device = "eps")
#+end_src

#+RESULTS:


**** PNG 
 #+begin_src R :session *R* :exports none :eval yes :tangle figure_Rscripts/figure5.R
## PNG output
png(filename = "../figures/figure5/figure5_multipanel.png", width = 2400, height = 3350)
gridExtra::grid.arrange(figure5a, figure5b, figure5c, layout_matrix = layout)
dev.off()
 #+end_src


*** Gene set table
  #+begin_src R :session *R* :results silent :exports none :eval yes
## load data and set directory for output
data.dir <- "../results/ECOR2_hypoxia_nfkb/"
library(magrittr)
ecor2.pbs <- readr::read_csv(file = file.path(data.dir,"ECOR2_over_PBS.csv")) %>% dplyr::rename(SYMBOL = X1)
hk.pbs <- readr::read_csv(file = file.path(data.dir,"ECOR2-HK_over_PBS.csv")) %>% dplyr::rename(SYMBOL = X1)
hypoxia.pbs <- readr::read_csv(file = file.path(data.dir,"hypoxia_over_PBS.csv")) %>% dplyr::rename(SYMBOL = X1)
ecor2i.pbs <- readr::read_csv(file = file.path(data.dir,"ECOR2-NFKBi_over_PBS.csv")) %>% dplyr::rename(SYMBOL = X1)

## create groups
up.ecor2 <- subset(ecor2.pbs, ecor2.pbs$log2FoldChange > 0 & ecor2.pbs$padj < 0.05)$SYMBOL
down.ecor2 <- subset(ecor2.pbs, ecor2.pbs$log2FoldChange < 0 & ecor2.pbs$padj < 0.05)$SYMBOL
diff.ecor2 <- subset(ecor2.pbs, ecor2.pbs$padj < 0.05)$SYMBOL

up.hk <- subset(hk.pbs, hk.pbs$log2FoldChange > 0 & hk.pbs$padj < 0.05)$SYMBOL
down.hk <- subset(hk.pbs, hk.pbs$log2FoldChange < 0 & hk.pbs$padj < 0.05)$SYMBOL
diff.hk <- subset(hk.pbs, hk.pbs$padj < 0.05)$SYMBOL

up.hypoxia <- subset(hypoxia.pbs, hypoxia.pbs$log2FoldChange > 0 & hypoxia.pbs$padj < 0.05)$SYMBOL
down.hypoxia <- subset(hypoxia.pbs, hypoxia.pbs$log2FoldChange < 0 & hypoxia.pbs$padj < 0.05)$SYMBOL
diff.hypoxia <- subset(hypoxia.pbs, hypoxia.pbs$padj < 0.05)$SYMBOL

up.ecor2i <- subset(ecor2i.pbs, ecor2i.pbs$log2FoldChange > 0 & ecor2i.pbs$padj < 0.05)$SYMBOL
down.ecor2i <- subset(ecor2i.pbs, ecor2i.pbs$log2FoldChange < 0 & ecor2i.pbs$padj < 0.05)$SYMBOL
diff.ecor2i <- subset(ecor2i.pbs, ecor2i.pbs$padj < 0.05)$SYMBOL

up.ecor2.up.hk <- intersect(up.ecor2, up.hk)
up.ecor2.up.ecor2i <- intersect(up.ecor2, up.ecor2i)
up.ecor2.up.hypoxia <- intersect(up.ecor2, up.hypoxia)

up.ecor2.up.hk.up.ecor2i <- intersect(up.ecor2.up.hk, up.ecor2.up.ecor2i)

gs1 <- 

write.csv(go.results, file = file.path(data.dir, "hypoxia-hk-nfkb_complete-go-results2.csv"))

  #+end_src

** Makefile 
#+begin_src makefile :tangle ../makefile :results silent :exports none :eval no
## Figure 5 multipanel ---------------------------------------------------------
figure5: ./figures/figure5/figure5_multipanel.pdf
./figures/figure5/figure5_multipanel.pdf ./results/ECOR2_hypoxia_nfkb/plotted-nfkb_complete-goANDreactome-results.csv : ./src/figure_Rscripts/figure5.R \
	./results/ECOR2_hypoxia_nfkb/ECOR2-HK_over_ECOR2-HK-NFKBi.csv \
	./results/ECOR2_hypoxia_nfkb/ECOR2-HK_over_PBS.csv \
	./results/ECOR2_hypoxia_nfkb/ECOR2_over_ECOR-NFKBi.csv \
	./results/ECOR2_hypoxia_nfkb/ECOR2_over_PBS.csv \
	./results/ECOR2_hypoxia_nfkb/hypoxia_over_hypoxia-NFKBi.csv \
	./results/ECOR2_hypoxia_nfkb/hypoxia_over_PBS.csv
	R -e "setwd('./src/'); source('figure_Rscripts/figure5.R')"
#+end_src

* Figure 6 
*** Figure 6A: Antimcrobial peptide expression is broadly up-regulated
    
**** Data import and manipulation 
#+begin_src R :session *R* :results silent :exports none :eval yes :tangle figure_Rscripts/figure6.R
## FIGURE 5 --------------------------------------------------------------------
## Figure 6A: title
## import data
## load data
data.dir <- "../results/ECOR2_hypoxia_nfkb/"
library(magrittr)
ecor2.pbs <- readr::read_csv(file = file.path(data.dir,"ECOR2_over_PBS.csv")) %>% dplyr::rename(SYMBOL = X1)
## load list of defensins
def <- readr::read_delim(file = "../figures/figure6/defensin_gene_family.txt", delim = "\t")

amps <- c("CAMP", "CAP18","FALL39", "LTF", "HAMP", "HTN1", "HTN3", "LEAP2", "PPBP", "CXCL14", "REG3A", "CCL20", "CXCL1", "CXCL2", "CXCL3", "CXCL9","CXCL10","CXCL11", "CXCL12","CXCL13", "CCL1", "CCL8", "CCL11","CCL13","CCL17","CCL18","CCL19","CCL25","CCL21", "SLPI", "CXCL4","CXCL6", "CCL27", "LYZ", "CCL24", "CCL26")
amps <- c(unlist(def[,2]), amps)
plot.data <- ecor2.pbs[which(ecor2.pbs$SYMBOL %in% amps),]
#plot.data <- plot.data[complete.cases(plot.data),]

## sort by fold change
plot.data <- plot.data[order(plot.data$log2FoldChange),]
plot.data$SYMBOL <- factor(plot.data$SYMBOL,
                         levels = unique(plot.data$SYMBOL))
#+end_src

**** Generate plot
#+begin_src R :session *R* :exports none :results graphics :file ../figures/figure6/figure6a.png :eval yes :tangle figure_Rscripts/figure6.R
## plot
library(ggplot2)
library(ggstance)
source("ggplot2-themes.R")

figure6a <- ggplot(plot.data[plot.data$baseMean > 1,],
              aes(x = log2FoldChange, y = SYMBOL, fill = log2FoldChange, color =log2FoldChange)) +
    geom_barh(stat = "identity") +
    geom_errorbarh(aes(xmax = log2FoldChange + lfcSE, xmin = log2FoldChange - lfcSE), width = 0, color = "grey70") +
    scale_fill_gradient2(low = color.set[2], high = color.set[1]) +
    scale_color_gradient2(low = color.set[2], high = color.set[1]) +
    xlab(expression(paste(Log[2],"FC")))+ ylab("") +
    geom_hline(yintercept = 0, color = "black", size = 0.5, linetype = "solid") +
    theme1 + 
    ggtitle("A", subtitle = "Antimicrobial peptides") +
    theme(plot.subtitle = element_text(size = 32, hjust = 0.5, face = "bold"))

png(filename = "../figures/figure6/figure6a.png", width = 600, height = 1000)
print(figure6a)
dev.off()
ggsave(filename = "../figures/figure6/eps/figure6a.eps", 
       plot = figure6a, 
       width = 12, height = 16)
#+end_src

#+RESULTS:
[[file:../figures/figure6/figure6a.png]]

*** Figure 6B: DEFB4A expression is NF-kB independent
    
**** Data import and manipulation 
#+begin_src R :session *R* :results silent :exports none :eval yes :tangle figure_Rscripts/figure6.R
## FIGURE 5 --------------------------------------------------------------------
## Figure 6B: DEFB4A expression is NF-kB independent
## import data
data.dir <- "../results/ECOR2_hypoxia_nfkb/"
library(magrittr)
ecor2.pbs <- readr::read_csv(file = file.path(data.dir,"ECOR2_over_PBS.csv")) %>% dplyr::rename(SYMBOL = X1)
hk.pbs <- readr::read_csv(file = file.path(data.dir,"ECOR2-HK_over_PBS.csv")) %>% dplyr::rename(SYMBOL = X1)
hypoxia.pbs <- readr::read_csv(file = file.path(data.dir,"hypoxia_over_PBS.csv")) %>% dplyr::rename(SYMBOL = X1)
ecor2i.pbs <- readr::read_csv(file = file.path(data.dir,"ECOR2-NFKBi_over_PBS.csv")) %>% dplyr::rename(SYMBOL = X1)

## add comparison ID
ecor2.pbs$comparison <- "E. coli"
hk.pbs$comparison <- "heat-inactivated"
hypoxia.pbs$comparison <- "hypoxia"
ecor2i.pbs$comparison <- "E. coli + SC-514"

## bind in single dataframe
data <- rbind(ecor2.pbs,
              hk.pbs,
              hypoxia.pbs,
              ecor2i.pbs)

plot.data <- data

plot.data$comparison <- factor(plot.data$comparison,
                               levels = c(
                                   "E. coli", 
                                   "heat-inactivated",
                                   "E. coli + SC-514",
                                   "hypoxia"))

data.sub <- plot.data[which(plot.data$SYMBOL %in% c("DEFB4A", "DEFB4B")),]

## t.test
source("custom_fun.R")
tt1 <- t.test2(m1 = data.sub[data.sub$comparison == 'E. coli',]$log2FoldChange[1],
               m2 = data.sub[data.sub$comparison == 'heat-inactivated',]$log2FoldChange[1],
               s1 = data.sub[data.sub$comparison == 'E. coli',]$lfcSE[1],
               s2 = data.sub[data.sub$comparison == 'heat-inactivated',]$lfcSE[1],
               n1 = 4, n2 = 4) 

tt2 <- t.test2(m1 = data.sub[data.sub$comparison == 'E. coli',]$log2FoldChange[1],
               m2 = data.sub[data.sub$comparison == 'hypoxia',]$log2FoldChange[1],
               s1 = data.sub[data.sub$comparison == 'E. coli',]$lfcSE[1],
               s2 = data.sub[data.sub$comparison == 'hypoxia',]$lfcSE[1],
               n1 = 4, n2 = 4)

tt3 <- t.test2(m1 = data.sub[data.sub$comparison == 'E. coli',]$log2FoldChange[2],
               m2 = data.sub[data.sub$comparison == 'heat-inactivated',]$log2FoldChange[2],
               s1 = data.sub[data.sub$comparison == 'E. coli',]$lfcSE[2],
               s2 = data.sub[data.sub$comparison == 'heat-inactivated',]$lfcSE[2],
               n1 = 4, n2 = 4) 

tt4 <- t.test2(m1 = data.sub[data.sub$comparison == 'E. coli',]$log2FoldChange[2],
               m2 = data.sub[data.sub$comparison == 'hypoxia',]$log2FoldChange[2],
               s1 = data.sub[data.sub$comparison == 'E. coli',]$lfcSE[2],
               s2 = data.sub[data.sub$comparison == 'hypoxia',]$lfcSE[2],
               n1 = 4, n2 = 4)


#+end_src

#+begin_src R :session *R* :results silent :exports none :eval yes :tangle figure_Rscripts/text-stats.R
## FIGURE 5 --------------------------------------------------------------------
## Figure 6B: DEFB4A expression is NF-kB independent
## import data
data.dir <- "../results/ECOR2_hypoxia_nfkb/"
library(magrittr)
ecor2.pbs <- readr::read_csv(file = file.path(data.dir,"ECOR2_over_PBS.csv")) %>% dplyr::rename(SYMBOL = X1)
hk.pbs <- readr::read_csv(file = file.path(data.dir,"ECOR2-HK_over_PBS.csv")) %>% dplyr::rename(SYMBOL = X1)
hypoxia.pbs <- readr::read_csv(file = file.path(data.dir,"hypoxia_over_PBS.csv")) %>% dplyr::rename(SYMBOL = X1)
ecor2i.pbs <- readr::read_csv(file = file.path(data.dir,"ECOR2-NFKBi_over_PBS.csv")) %>% dplyr::rename(SYMBOL = X1)

## add comparison ID
ecor2.pbs$comparison <- "E. coli"
hk.pbs$comparison <- "heat-inactivated"
hypoxia.pbs$comparison <- "hypoxia"
ecor2i.pbs$comparison <- "E. coli + SC-514"

## bind in single dataframe
data <- rbind(ecor2.pbs,
              hk.pbs,
              hypoxia.pbs,
              ecor2i.pbs)

plot.data <- data

plot.data$comparison <- factor(plot.data$comparison,
                               levels = c(
                                   "E. coli", 
                                   "heat-inactivated",
                                   "E. coli + SC-514",
                                   "hypoxia"))

data.sub <- plot.data[which(plot.data$SYMBOL %in% c("DEFB4A", "DEFB4B")),]

## t.test
source("custom_fun.R")
tt1 <- t.test2(m1 = data.sub[data.sub$comparison == 'E. coli',]$log2FoldChange[1],
               m2 = data.sub[data.sub$comparison == 'heat-inactivated',]$log2FoldChange[1],
               s1 = data.sub[data.sub$comparison == 'E. coli',]$lfcSE[1],
               s2 = data.sub[data.sub$comparison == 'heat-inactivated',]$lfcSE[1],
               n1 = 4, n2 = 4) 

tt1.1 <- t.test2(m1 = data.sub[data.sub$comparison == 'E. coli',]$log2FoldChange[1],
               m2 = data.sub[data.sub$comparison == 'E. coli + SC-514',]$log2FoldChange[1],
               s1 = data.sub[data.sub$comparison == 'E. coli',]$lfcSE[1],
               s2 = data.sub[data.sub$comparison == 'E. coli + SC-514',]$lfcSE[1],
               n1 = 4, n2 = 4) 

tt2 <- t.test2(m1 = data.sub[data.sub$comparison == 'E. coli',]$log2FoldChange[1],
               m2 = data.sub[data.sub$comparison == 'hypoxia',]$log2FoldChange[1],
               s1 = data.sub[data.sub$comparison == 'E. coli',]$lfcSE[1],
               s2 = data.sub[data.sub$comparison == 'hypoxia',]$lfcSE[1],
               n1 = 4, n2 = 4)

#+end_src
**** Generate plot
#+begin_src R :session *R* :exports none :results graphics :file ../figures/figure6/figure6b.png :eval yes :tangle figure_Rscripts/figure6.R
## subset to show DEFB4A only (possibly plot duplicate in supplement)
figure6b <- ggplot(data.sub[data.sub$baseMean > 1 & data.sub$SYMBOL == 'DEFB4A',],
                   aes(y = log2FoldChange, x = comparison,
                       fill = comparison, color = comparison)) +
    geom_bar(stat = "identity") +
    geom_errorbar(aes(ymax = log2FoldChange + lfcSE, ymin = log2FoldChange - lfcSE), size = 1.5, width = 0, color = "grey70") +
    scale_fill_brewer(palette = "Spectral") +
    scale_color_brewer(palette = "Spectral") +
    facet_grid(. ~ SYMBOL) +
    ylab(expression(paste(Log[2],"FC")))+ xlab("") +
    geom_hline(yintercept = 0, color = "black", size = 0.5, linetype = "solid") +
    theme1 + 
    ggtitle("B") +
    annotate("segment",
             x = 1, xend = 2, y = 9.5, yend = 9.5,
             color = "grey30", size = 2) +  
    annotate("text", x = 1.5, y = 9.75, label = paste("P =", round(tt1[4], digits =3)), size = 10, color = "grey30") +
    theme(plot.subtitle = element_text(size = 32, hjust = 0.5, face = "bold"),
          axis.text.x = element_text(angle = 45, hjust = 1, vjust = 1),
	  strip.text.x =  element_text(size = 32, face = "bold"))

png(filename = "../figures/figure6/figure6b.png", width = 600, height = 1000)
print(figure6b)
dev.off()
ggsave(filename = "../figures/figure6/eps/figure6b.eps", 
       plot = figure6b, 
       width = 12, height = 16)
#+end_src

#+RESULTS:
[[file:../figures/figure6/figure6b.png]]

**** Generate supplemental plot
#+begin_src R :session *R* :exports none :results graphics :file ../figures/supplemental/DEFB4B-expression.png :eval yes :tangle figure_Rscripts/figure6.R
## subset to show DEFB4A only (possibly plot duplicate in supplement)
defb4b.supp <- ggplot(data.sub[data.sub$baseMean > 1 & data.sub$SYMBOL == 'DEFB4B',],
                   aes(y = log2FoldChange, x = comparison,
                       fill = comparison, color = comparison)) +
    geom_bar(stat = "identity") +
    geom_errorbar(aes(ymax = log2FoldChange + lfcSE, ymin = log2FoldChange - lfcSE), size = 1.5, width = 0, color = "grey70") +
    scale_fill_brewer(palette = "Spectral") +
    scale_color_brewer(palette = "Spectral") +
    facet_grid(. ~ SYMBOL) +
    ylab(expression(paste(Log[2],"FC")))+ xlab("") +
    geom_hline(yintercept = 0, color = "black", size = 0.5, linetype = "solid") +
    theme1 + 
    annotate("segment",
             x = 1, xend = 2, y = 6.5, yend = 6.5,
             color = "grey30", size = 2) +  
    annotate("text", x = 1.5, y = 6.75, label = paste("P =", round(tt3[4], digits =3)), size = 10, color = "grey30") +
    theme(plot.subtitle = element_text(size = 32, hjust = 0.5, face = "bold"),
          axis.text.x = element_text(angle = 45, hjust = 1, vjust = 1),
	  strip.text.x =  element_text(size = 32, face = "bold"))

png(filename = "../figures/supplemental/DEFB4B-expression.png", width = 600, height = 1000)
print(defb4b.supp)
dev.off()

pdf(file = "../figures/supplemental/DEFB4B-expression.pdf", width = 2400/300, height = 4000/300)
print(defb4b.supp)
dev.off()

#+end_src

#+RESULTS:
[[file:../figures/supplemental/DEFB4B-expression.png]]



*** Figure 6C: /E. coli/ colonization is associated with increased h\beta{}D-2 expression
    
**** Data import and manipulation 
#+begin_src R :session *R* :results silent :exports none :eval yes :tangle figure_Rscripts/figure6.R
## FIGURE 5 --------------------------------------------------------------------
## Figure 6C: /E. coli/ colonization is associated with increased h\beta{}D-2 expression
## import data

data <- readr::read_csv(file = "../data/figure1/161206_survival/survival_and_ELISA.csv")
## create unique IDs
data$ID <- paste(data$well,data$plate, sep = "P")
## load libraries
library(reshape2)
library(dplyr)

## reshape dataframe
data <- dplyr::select(data, ID, day, bd1, bd2, il6, il8, vegf, treatment)
data <- dplyr::rename(data, BD1 = bd1, BD2 = bd2, IL6 = il6, IL8 = il8, VEGF = vegf)
data <- reshape2::melt(data, id.vars = c('ID', 'day', 'treatment'))

## convert from pg/ml to ug/ml
data$value <- (data$value)/1000 # pg/1ml = 2*pg/0.5ml
data$treatment <- gsub("HK- E. coli", "heat-inactivated", data$treatment)
data$treatment <- factor(data$treatment,
                         levels = c("PBS", "E. coli", "heat-inactivated", "E. coli + SC-514", "hypoxia", "E. coli + vehicle"),
                         ordered = TRUE)
dat <- data[data$variable == "BD2" & data$day == 1,]
stats <- t.test(dat[dat$treatment == "E. coli",]$value,dat[dat$treatment == "PBS",]$value, alternative = "two.sided")
hbd2.stats2 <- t.test(dat[dat$treatment == "E. coli",]$value,dat[dat$treatment == "E. coli + SC-514",]$value, alternative = "two.sided")
hbd2.stats3 <- t.test(dat[dat$treatment == "E. coli",]$value,dat[dat$treatment == "heat-inactivated",]$value, alternative = "two.sided")
hbd2.stats4 <- t.test(dat[dat$treatment == "E. coli",]$value,dat[dat$treatment == "hypoxia",]$value, alternative = "two.sided")
#+end_src

#+begin_src R :session *R* :results silent :exports none :eval yes :tangle figure_Rscripts/text-stats.R
data <- readr::read_csv(file = "../data/figure1/161206_survival/survival_and_ELISA.csv")
## create unique IDs
data$ID <- paste(data$well,data$plate, sep = "P")
## load libraries
library(reshape2)
library(dplyr)

## reshape dataframe
data <- dplyr::select(data, ID, day, bd1, bd2, il6, il8, vegf, treatment)
data <- dplyr::rename(data, BD1 = bd1, BD2 = bd2, IL6 = il6, IL8 = il8, VEGF = vegf)
data <- reshape2::melt(data, id.vars = c('ID', 'day', 'treatment'))

## convert from pg/ml to ug/ml
data$value <- (data$value)/1000 # pg/1ml = 2*pg/0.5ml
data$treatment <- gsub("HK- E. coli", "heat-inactivated", data$treatment)
data$treatment <- factor(data$treatment,
                         levels = c("PBS", "E. coli", "heat-inactivated", "E. coli + SC-514", "hypoxia", "E. coli + vehicle"),
                         ordered = TRUE)
dat <- data[data$variable == "BD2" & data$day == 1,]
hbd2.stats <- t.test(dat[dat$treatment == "E. coli",]$value,dat[dat$treatment == "PBS",]$value, alternative = "two.sided")
hbd2.stats2 <- t.test(dat[dat$treatment == "E. coli",]$value,dat[dat$treatment == "E. coli + SC-514",]$value, alternative = "two.sided")
hbd2.stats3 <- t.test(dat[dat$treatment == "E. coli",]$value,dat[dat$treatment == "heat-inactivated",]$value, alternative = "two.sided")
hbd2.stats4 <- t.test(dat[dat$treatment == "E. coli",]$value,dat[dat$treatment == "hypoxia",]$value, alternative = "two.sided")

#+end_src
**** Generate plot
#+begin_src R :session *R* :exports none :results graphics :file ../figures/figure6/figure6c.png :eval yes :tangle figure_Rscripts/figure6.R
library(scales)
library(grid)
library(ggplot2)
source("ggplot2-themes.R")
data <- subset(data, data$treatment != "E. coli + vehicle")

## mean data
library(magrittr)
data_mean <- data %>% dplyr::group_by(day, treatment, variable) %>%
    summarize(mean = mean(value),
              sem = sd(value)/sqrt(n()))

figure6c <- ggplot(data[data$variable == "BD2" & data$day == 1,],
               aes(x = treatment, y = value, color = factor(treatment))) +
    geom_boxplot(size = 2, outlier.size = 3) +
    xlab("") +
    ylab(expression(paste("BD-2 (",mu,"g/mL)"))) +
    ylim(c(0, 2)) +
    scale_color_brewer(palette = "Set1") +
#    scale_fill_manual(values = c(color.set[2], color.set[1])) +
    annotate("segment", x = 1, xend = 2, y = 1.6, yend = 1.6, size = 2, color = "grey30") +
    annotate("text", x = 1.5, y = 1.65,
             label = paste("P = ",format(stats$p.value, digits = 1)),
             size = 6, color = "grey30") +
    annotate("segment", x = 2, xend = 3, y = 1.7, yend = 1.7, size = 2, color = "grey30") +
    annotate("text", x = 2.5, y = 1.75,
             label = paste("P = ",format(hbd2.stats3$p.value, digits = 1)),
             size = 6, color = "grey30") +
    annotate("segment", x = 2, xend = 4, y = 1.8, yend = 1.8, size = 2, color = "grey30") +
    annotate("text", x = 3, y = 1.85,
             label = paste("P = ",format(hbd2.stats2$p.value, digits = 1)),
             size = 6, color = "grey30") +
    annotate("segment", x = 2, xend = 5, y = 1.9, yend = 1.9, size = 2, color = "grey30") +
    annotate("text", x = 3.5, y = 1.95,
             label = paste("P = ",format(hbd2.stats4$p.value, digits = 1)),
             size = 6, color = "grey30") +
    theme1 +
    ggtitle("C") +
        theme(plot.subtitle = element_text(size = 32, hjust = 0.5, face = "bold"),
          axis.text.x = element_text(angle = 45, hjust = 1, vjust = 1),
	  strip.text.x =  element_text(size = 32, face = "bold"))

figure6c.alt <- ggplot(data[data$variable == "BD2" & data$day == 1,],
               aes(x = treatment, y = value, fill = factor(treatment), color = factor(treatment))) +
    geom_bar(stat = "identity", size = 0.5) +
    geom_errorbar(aes(ymax = mean + sem, ymin = mean - sem), size = 1.5, width = 0, color = "grey70") +
    xlab("") +
    ylab(expression(paste("BD-2 (",mu,"g/mL)"))) +
    ylim(c(0, 1)) +
    scale_color_brewer(palette = "Set1") +
    scale_fill_brewer(palette = "Set1") +
#    scale_fill_manual(values = c(color.set[2], color.set[1])) +
    annotate("segment", x = 1, xend = 2, y = 0.75, yend = 0.75, size = 2, color = "grey30") +
    annotate("text", x = 1.5, y = 0.78,
             label = paste("P = ",format(stats$p.value, digits = 1)),
             size = 6, color = "grey30") +
    annotate("segment", x = 2, xend = 3, y = 0.82, yend = 0.82, size = 2, color = "grey30") +
    annotate("text", x = 2.5, y = 0.85,
             label = paste("P = ",format(hbd2.stats3$p.value, digits = 1)),
             size = 6, color = "grey30") +
    annotate("segment", x = 2, xend = 4, y = 0.89, yend = 0.89, size = 2, color = "grey30") +
    annotate("text", x = 3, y = 0.92,
             label = paste("P = ",format(hbd2.stats4$p.value, digits = 1)),
             size = 6, color = "grey30") +
    annotate("segment", x = 2, xend = 5, y = 0.96, yend = 0.96, size = 2, color = "grey30") +
    annotate("text", x = 3.5, y = 0.99,
             label = paste("P = ",format(hbd2.stats2$p.value, digits = 1)),
             size = 6, color = "grey30") +
    theme1 +
    ggtitle("C") +
        theme(plot.subtitle = element_text(size = 32, hjust = 0.5, face = "bold"),
          axis.text.x = element_text(angle = 45, hjust = 1, vjust = 1),
	  strip.text.x =  element_text(size = 32, face = "bold"))


png(filename = "../figures/figure6/figure6c.png", width = 600, height = 800)
print(figure6c)
dev.off()

ggsave(filename = "../figures/figure6/eps/figure6c.eps", 
       plot = figure6c, 
       width = 12, height = 16)
#+end_src

#+RESULTS:
[[file:../figures/figure6/figure6c.png]]

*** Figure 6D: BD-2 suppresses growth of /E. coli/ /in vitro/
    
**** Data import and manipulation 
#+begin_src R :session *R* :results silent :exports none :eval yes :tangle figure_Rscripts/figure6.R
## FIGURE 5 --------------------------------------------------------------------
## Figure 6D: BD-2 suppresses growth of /E. coli/ /in vitro/
## import data
data2 <- read.csv(file = "../data/figure6/160518_ECOR2_BD2/160517_ECOR2_BD2_OD600.csv",
                   header = TRUE, skip = 2, stringsAsFactors = FALSE)

plate2 <- read.csv(file = "../data/figure6/160518_ECOR2_BD2/160505_OD600-ECOR2-BD1_plate.csv",
                  header = TRUE, stringsAsFactors = FALSE)
data2 <- reshape2::melt(data2, id.vars =c("Time", "Temperature..C."))
data2 <- plyr::rename(data2, c("variable"="cell"))

data2$Time <- sapply(strsplit(data2$Time, ":"), function(x) {
    x <- as.numeric(x)
    x[1] + ((x[2] + (x[3]/60))/60)
}
)
      
data2 <- plyr::join(data2, plate2, by ="cell")
data2$dose <- as.numeric(data2$dose)
data2 <- data2[complete.cases(data2),]

test1 <- t.test(data2[data2$Time == 18 & data2$dose == 1,]$value,
                data2[data2$Time == 18 & data2$dose == 0.1,]$value,
                alternative = "two.sided")

test2 <- t.test(data2[data2$Time == 18 & data2$dose == 1,]$value,
                data2[data2$Time == 18 & data2$dose == 1e-8,]$value,
                alternative = "two.sided")

plot.data <- data2[data2$dose == 1e-8| data2$dose == 0.1 |data2$dose == 1,] %>%
    dplyr::group_by(dose, Time) %>%
    dplyr::summarize(avg = mean(value), sem = sd(value)/sqrt(n()))

plot.data[plot.data$dose == 1e-8,]$dose <- 0
#+end_src


#+begin_src R :session *R* :results silent :exports none :eval yes :tangle figure_Rscripts/text-stats.R
## FIGURE 5 --------------------------------------------------------------------
## Figure 6D: BD-2 suppresses growth of /E. coli/ /in vitro/
## import data
data2 <- read.csv(file = "../data/figure6/160518_ECOR2_BD2/160517_ECOR2_BD2_OD600.csv",
                   header = TRUE, skip = 2, stringsAsFactors = FALSE)

plate2 <- read.csv(file = "../data/figure6/160518_ECOR2_BD2/160505_OD600-ECOR2-BD1_plate.csv",
                  header = TRUE, stringsAsFactors = FALSE)
data2 <- reshape2::melt(data2, id.vars =c("Time", "Temperature..C."))
data2 <- plyr::rename(data2, c("variable"="cell"))

data2$Time <- sapply(strsplit(data2$Time, ":"), function(x) {
    x <- as.numeric(x)
    x[1] + ((x[2] + (x[3]/60))/60)
}
)
      
data2 <- plyr::join(data2, plate2, by ="cell")
data2$dose <- as.numeric(data2$dose)
data2 <- data2[complete.cases(data2),]


test1 <- t.test(data2[data2$Time == 18 & data2$dose == 1,]$value,
                data2[data2$Time == 18 & data2$dose == 0.1,]$value,
                alternative = "two.sided")

test2 <- t.test(data2[data2$Time == 18 & data2$dose == 1,]$value,
                data2[data2$Time == 18 & data2$dose == 1e-8,]$value,
                alternative = "two.sided")

library(magrittr) 
plot.data <- data2[data2$dose == 1e-8| data2$dose == 0.1 |data2$dose == 1,] %>%
    dplyr::group_by(dose, Time) %>%
    dplyr::summarize(avg = mean(value), sem = sd(value)/sqrt(n()))

plot.data[plot.data$dose == 1e-8,]$dose <- 0

#+end_src

**** Generate plot
#+begin_src R :session *R* :exports none :results graphics :file ../figures/figure6/figure6d.png :eval yes :tangle figure_Rscripts/figure6.R
library(ggplot2)
source("ggplot2-themes.R")
figure6d <- ggplot(data = plot.data, aes(x = Time, y = avg)) +
    geom_point(shape = 21, size = 3.5, aes(fill = factor(dose), color = factor(dose))) +
    geom_errorbar(aes(ymax = avg + sem, ymin = avg - sem, 
                      color = factor(dose)), width = 0) +
    xlab("Time (h)") +
    ylab(expression(paste(Delta,"OD"[600]))) +
    scale_fill_manual(name = expression(paste("BD-2 (",mu,"g/mL)")), values = c(color.set[3], color.set[2], color.set[1])) +
    scale_color_manual(name = expression(paste("BD-2 (",mu,"g/mL)")), values = c(color.set[3], color.set[2], color.set[1])) +
    scale_x_continuous(limits = c(0,21),  breaks = c(0, 3, 6, 9, 12, 15, 18)) +
    theme1 +
    annotate("segment", x = 18.5, xend = 18.5,
             y = mean(plot.data[plot.data$Time == 18 & plot.data$dose == 0.1,]$avg),
             yend = mean(plot.data[plot.data$Time == 18 & plot.data$dose == 1,]$avg),
             size = 2, color = "grey30") +
    annotate("text", x = 20, y = 0.3,
             label = paste("P = ", round(test1$p.value, digits = 3)),
             size = 8, color = "grey30") +
    annotate("segment", x = 18.25, xend = 18.25,
             y = mean(plot.data[plot.data$Time == 18 & plot.data$dose == 0,]$avg),
             yend = mean(plot.data[plot.data$Time == 18 & plot.data$dose == 1,]$avg),
             size = 2, color = "grey30") +
    annotate("text", x = 20, y = 0.45,
             label = paste("P = ", round(test2$p.value, digits = 3)),
             size = 8, color = "grey30") +
    theme(legend.position = c(0.8, 0.15),
          legend.title = element_text(size = 24),
	  legend.key.size = unit(1.5,"cm"),
	  legend.text = element_text(size = 24)) +

    ggtitle("D")

png(filename = "../figures/figure6/figure6d.png", width = 1200, height = 800)
print(figure6d)
dev.off()
ggsave(filename = "../figures/figure6/eps/figure6d.eps", 
plot = figure6d, 
width = 24, height = 16)
#+end_src

#+RESULTS:
[[file:../figures/figure6/figure6d.png]]

**** K and DT calculation
#+begin_src R :session *R* :results silent :exports none :eval yes :tangle figure_Rscripts/figure6.R
## calculate growth curves & carrying capacity
library(magrittr)
## limit dataset to log - stationary phase (exclude post-stationary phase)
data3 <- subset(data2, data2$Time < 10)

gc.data <- dplyr::group_by(data3, cell) %>%
    dplyr::summarise(K = growthcurver::SummarizeGrowth(Time, value)[1]$vals$k,
                     DT = growthcurver::SummarizeGrowth(Time, value)[1]$vals$t_gen,
                     t_mid = growthcurver::SummarizeGrowth(Time, value)[1]$vals$t_mid) %>%
    dplyr::right_join(dplyr::select(data2, cell, dose) , by = "cell") %>%
    dplyr::distinct(cell, K, DT, dose, t_mid)

gc.data <- subset(gc.data, gc.data$dose > 1e-02 | gc.data$dose == 1e-8)
gc.data[gc.data$dose == 1e-8,]$dose <- 0

## statistical tests
gc.test1 <- t.test(gc.data[gc.data$dose == 0,]$K,
                   gc.data[gc.data$dose == 1,]$K,
                   alternative = "two.sided")
gc.test2 <- t.test(gc.data[gc.data$dose == 0,]$K,
                   gc.data[gc.data$dose == 0.1,]$K,
                   alternative = "two.sided")
gc.test3 <- t.test(gc.data[gc.data$dose == 0,]$DT,
                   gc.data[gc.data$dose == 1,]$DT,
                   alternative = "two.sided")
gc.test4 <- t.test(gc.data[gc.data$dose == 0,]$DT,
                   gc.data[gc.data$dose == 0.1,]$DT,
                   alternative = "two.sided")

#+end_src

**** Generate plot
#+begin_src R :session *R* :exports none :results graphics :file ../figures/figure6/figure6e.png :eval yes :tangle figure_Rscripts/figure6.R
library(ggplot2)
source("ggplot2-themes.R")
figure6e <- ggplot(data = gc.data, aes(x = factor(dose), y = K)) +
    geom_boxplot(aes(color = factor(dose)), size = 2, outlier.size = 3) +
    xlab(expression(paste("BD-2 (",mu,"g/mL)"))) +
    ylab("Carrying capacity (K)") +
    scale_fill_manual(name = expression(paste("BD-2 (",mu,"g/mL)")), values = c(color.set[3], color.set[2], color.set[1])) +
    scale_color_manual(name = expression(paste("BD-2 (",mu,"g/mL)")), values = c(color.set[3], color.set[2], color.set[1])) +
    theme1 +
    theme(legend.position = "none",
          legend.title = element_text(size = 24),
	  legend.key.size = unit(1.5,"cm"),
	  legend.text = element_text(size = 24)) +
    annotate("text", x = 2, y = 0.49,
             label = paste("P = ", round(gc.test2$p.value, digits = 3)),
             size = 6, color = "grey30") +
    annotate("text", x = 3, y = 0.47,
             label = paste("P = ", round(gc.test1$p.value, digits = 4)),
             size = 6, color = "grey30") +
    ggtitle("E")

figure6f <- ggplot(data = gc.data, aes(x = factor(dose), y = DT)) +
    geom_boxplot(aes(color = factor(dose)), size = 2, outlier.size = 3) +
    xlab(expression(paste("BD-2 (",mu,"g/mL)"))) +
    ylab("Doubling time (h)") +
    scale_fill_manual(name = expression(paste("BD-2 (",mu,"g/mL)")), values = c(color.set[3], color.set[2], color.set[1])) +
    scale_color_manual(name = expression(paste("BD-2 (",mu,"g/mL)")), values = c(color.set[3], color.set[2], color.set[1])) +
    theme1 +
    theme(legend.position = "none",
          legend.title = element_text(size = 24),
	  legend.key.size = unit(1.5,"cm"),
	  legend.text = element_text(size = 24)) +
    ggtitle("F")

png(filename = "../figures/figure6/figure6e.png", width = 800, height = 800)
#print(figure6e)
gridExtra::grid.arrange(figure6e, figure6f, ncol = 2)
dev.off()
ggsave(filename = "../figures/figure6/eps/figure6e.eps", 
plot = figure6e, 
width = 16, height = 16)
#+end_src

#+RESULTS:
[[file:../figures/figure6/figure6e.png]]


*** Figure 6 multipanel 
#+begin_src R :session *R* :exports none :results graphics :file ../figures/figure6/figure6_multipanel.png  :width 1600 :height 1600 :eval yes :tangle figure_Rscripts/figure6.R
## Figure 6 multipanel ---------------------------------------------------------
source("ggplot2-themes.R")
library(ggplot2)
library(gridExtra)
source("custom_fun.R")

layout <- rbind(c(1,2,3),
                c(4,4,5))


## PDF output
pdf(file = "../figures/figure6/figure6_multipanel.pdf", width = 6000/300, height = 6000/300, onefile = FALSE)
gridExtra::grid.arrange(figure6a, figure6b, figure6c, figure6d, figure6e, layout_matrix = layout)
dev.off()

## EPS output
ggsave(filename = "../figures/figure6/eps/figure6_multipanel.eps", 
       plot = gridExtra::grid.arrange(figure6a, figure6b, figure6c, figure6d, figure6e, layout_matrix = layout), 
       width = 20, height = 20)

## PNG output
png(filename = "../figures/figure6/figure6_multipanel.png", width = 1600, height = 1600)
gridExtra::grid.arrange(figure6a, figure6b, figure6c, figure6d, figure6e, layout_matrix = layout)
dev.off()
#+end_src

#+RESULTS:
[[file:../figures/figure6/figure6_multipanel.png]]


** Makefile 
#+begin_src makefile :tangle ../makefile :results silent :exports none :eval no
## Figure 6 multipanel ---------------------------------------------------------
figure6: ./figures/figure6/figure6_multipanel.pdf
./figures/figure6/figure6_multipanel.pdf : ./src/figure_Rscripts/figure6.R \
	./results/ECOR2_hypoxia_nfkb/ECOR2-HK_over_PBS.csv \
	./results/ECOR2_hypoxia_nfkb/ECOR2_over_PBS.csv \
	./results/ECOR2_hypoxia_nfkb/ECOR2-NFKBi_over_PBS.csv \
	./results/ECOR2_hypoxia_nfkb/hypoxia_over_PBS.csv \
	./figures/figure6/defensin_gene_family.txt \
	./data/figure6/160518_ECOR2_BD2/160517_ECOR2_BD2_OD600.csv \
	./data/figure1/161206_survival/survival_and_ELISA.csv
	R -e "setwd('./src/'); source('figure_Rscripts/figure6.R')"
#+end_src

* Figure 7 

*** Figure 7A: RNA-seq mucus expression and glycotransferases timecourse
    
**** Data import and manipulation 
#+begin_src R :session *R* :results silent :exports none :eval yes :tangle figure_Rscripts/figure7.R
## FIGURE 7 --------------------------------------------------------------------
## Figure 7A: RNA-seq mucus expression and glycotransferases timecourse
## import data
## Load dataset from file
data.dir <- "../results/ECOR2HIO_24-96-RNAseq/"
library(magrittr)
df <- readr::read_csv(file = file.path(data.dir,"complete-dataset_DESeq2-normalized-counts.csv")) %>% dplyr::rename(SYMBOL = X1)

## list of genes to extract
paths <- readr::read_csv("../results/ECOR2_hypoxia_nfkb/plotted-nfkb_complete-goANDreactome-results.csv")

mucins <- paths[grep("O-linked", paths$Description),]$geneID
muc.genes <- sapply(mucins, 
                    function(x) {
                        v <- stringr::str_split(x, "/")
                                         })
muc.genes <- c(unique(unlist(muc.genes))[-c(21:24)], "MUC5AC", "FUT2", "FUT3")
muc.genes <- muc.genes[-grep("MUC12|B3GNT6|ADAM|IL|CHST4", muc.genes)]



data.sub <- df[which(df$SYMBOL %in% muc.genes),]
melt.data <- reshape::melt(as.data.frame(data.sub), id.vars = "SYMBOL")
melt.data$variable <- gsub("\\_[0-9]*$", "", melt.data$variable)
melt.data <- tidyr::separate(melt.data, col = variable, into = c('treatment', 'hr'), sep = "-")
#melt.data <- dplyr::left_join(melt.data, muc.genes, by = 'SYMBOL')
#melt.data$hr <- as.numeric(melt.data$hr)


library(magrittr)
## calculate mean and stats
data.mean <- dplyr::group_by(melt.data, SYMBOL, hr) %>%
    dplyr::summarise(stdev = sd(value),
                     num = n(),
                     iqr = IQR(value),
                     min = min(value),
                     max = max(value),
		     mean = mean(value),
                     median = median(value))

data.mean$sem <- data.mean$stdev/sqrt(data.mean$num)

## claculate zscore
scale_this <- function(x) as.vector(scale(x))

data.scaled <- dplyr::group_by(melt.data, SYMBOL) %>%
    dplyr::mutate(zscore = scale_this(value)) %>%
    dplyr::group_by(SYMBOL, hr) %>%
    dplyr::summarize(mean_zscore = mean(zscore))

data.scaled$category <- "Glycotransferases"
data.scaled[grep("MUC", data.scaled$SYMBOL),]$category <- "Mucins"

data.scaled <- data.scaled[order(data.scaled$hr,data.scaled$mean_zscore),]
data.scaled$SYMBOL <- factor(data.scaled$SYMBOL,
                         levels = unique(data.scaled$SYMBOL))

#+end_src

**** Generate plot
#+begin_src R :session *R* :exports none :results graphics :file ../figures/figure7/figure7a.png :eval yes :tangle figure_Rscripts/figure7.R
## plot
library(ggplot2)
source("ggplot2-themes.R")

figure7a <- ggplot(data.scaled,
              aes(y = SYMBOL, x = hr)) +
    geom_tile(stat = "identity", aes(fill = mean_zscore)) +
    facet_grid(category ~ ., scales = "free_y", space = "free", switch = "y") +
    scale_fill_distiller(name = "Z-score ", palette = "RdYlBu") +
    scale_y_discrete(position = "right") +
    ylab("") + xlab("") + 
    theme1 + 
    theme(strip.text =  element_text(size = 32),
          legend.position = "bottom",
	  legend.title = element_text(size = 32),
	  legend.key.size = unit(1,"cm"),
	  panel.spacing = unit(2, "lines"),
	  panel.border = element_blank()) +
    ggtitle("A")

png(filename = "../figures/figure7/figure7a.png", width = 600, height = 1000)
print(figure7a)
dev.off()
ggsave(filename = "../figures/figure7/eps/figure7a.eps", 
       plot = figure7a, 
       width = 12, height = 20)
#+end_src

#+RESULTS:
[[file:../figures/figure7/figure7a.png]]

*** Figure 7E: Mucin expression is NF-kB dependent
    
**** Data import and manipulation 
#+begin_src R :session *R* :results silent :exports none :eval yes :tangle figure_Rscripts/figure7.R
## FIGURE 7 --------------------------------------------------------------------
## Figure 7E: Mucin expression is NF-kB dependent
## import data
data.dir <- "../results/ECOR2_hypoxia_nfkb/"
library(magrittr)
ecor2.pbs <- readr::read_csv(file = file.path(data.dir,"ECOR2_over_PBS.csv")) %>% dplyr::rename(SYMBOL = X1)
hk.pbs <- readr::read_csv(file = file.path(data.dir,"ECOR2-HK_over_PBS.csv")) %>% dplyr::rename(SYMBOL = X1)
hypoxia.pbs <- readr::read_csv(file = file.path(data.dir,"hypoxia_over_PBS.csv")) %>% dplyr::rename(SYMBOL = X1)
ecor2i.pbs <- readr::read_csv(file = file.path(data.dir,"ECOR2-NFKBi_over_PBS.csv")) %>% dplyr::rename(SYMBOL = X1)

## directory where data is stored
data.dir <- "../results/ECOR2HIO_24-96-RNAseq/"

## read in the data from DESeq2 output csv files

hr48 <- readr::read_csv(file = file.path(data.dir,"ECOR2_over_PBS_48hr.csv")) %>% dplyr::rename(SYMBOL = X1)
data.dir <- "../results/ECOR2_hypoxia_nfkb/"
## add comparison ID
ecor2.pbs$comparison <- "E. coli (24h)"
hk.pbs$comparison <- "HK-E. coli"
hypoxia.pbs$comparison <- "hypoxia"
ecor2i.pbs$comparison <- "E. coli + SC-514"
hr48$comparison <- "E. coli (48h)"

## bind in single dataframe
data <- rbind(ecor2.pbs,
              hk.pbs,
              hypoxia.pbs,
              ecor2i.pbs,
	      hr48)

plot.data <- data

## list of genes to extract
paths <- readr::read_csv("../results/ECOR2_hypoxia_nfkb/plotted-nfkb_complete-goANDreactome-results.csv")

mucins <- paths[grep("O-linked", paths$Description),]$geneID
muc.genes <- sapply(mucins, 
                    function(x) {
                        v <- stringr::str_split(x, "/")
                                         })
muc.genes <- c(unique(unlist(muc.genes))[-c(21:24)], "MUC5AC", "FUT2", "FUT3")
muc.genes <- muc.genes[-grep("MUC12|B3GNT6|ADAM|IL|CHST4", muc.genes)]



plot.data <- plot.data[which(plot.data$SYMBOL %in% muc.genes),]


library(magrittr)

## claculate zscore
scale_this <- function(x) as.vector(scale(x))

data.scaled <- dplyr::group_by(plot.data, SYMBOL) %>%
    dplyr::mutate(zscore = scale_this(log2FoldChange)) %>%
    dplyr::group_by(SYMBOL, comparison) %>%
    dplyr::summarize(mean_zscore = mean(zscore))

data.scaled$category <- "Glycotransferases"
data.scaled[grep("MUC", data.scaled$SYMBOL),]$category <- "Mucins"

data.scaled$comparison <- factor(data.scaled$comparison,
                               levels = c("E. coli (48h)",
			       "E. coli (24h)", 
                                          "HK-E. coli",
                                          "E. coli + SC-514",
					  "hypoxia"))
#+end_src

**** Generate plot
#+begin_src R :session *R* :exports none :results graphics :file ../figures/figure7/figure7e.png :eval yes :tangle figure_Rscripts/figure7.R
## plot
library(ggplot2)
source("ggplot2-themes.R")

figure7e <- ggplot(data.scaled,
              aes(y = SYMBOL, x = comparison)) +
    geom_tile(stat = "identity", aes(fill = mean_zscore)) +
    facet_grid(category ~ ., scales = "free_y", space = "free", switch = "y") +
    scale_fill_distiller(name = "Z-score ", palette = "RdYlBu") +
    scale_y_discrete(position = "right") +
    ylab("") + xlab("") + 
    theme1 + 
    theme(strip.text =  element_text(size = 32),
          axis.text.x = element_text(angle = 60, hjust = 1, vjust = 1, size = 20),
          legend.position = "bottom",
	  legend.title = element_text(size = 32),
	  legend.key.size = unit(1,"cm"),
	  panel.spacing = unit(2, "lines"),
	  panel.border = element_blank()) +
    ggtitle("E")

png(filename = "../figures/figure7/figure7e.png", width = 600, height = 1000)
print(figure7e)
dev.off()
ggsave(filename = "../figures/figure7/eps/figure7e.eps", 
plot = figure7e, 
width = 16, height = 16)
#+end_src

#+RESULTS:
[[file:../figures/figure7/figure7e.png]]

*** Figure 7 multipanel 
#+begin_src R :session *R* :exports none :results graphics :file ../figures/figure7/figure7_multipanel.png  :width 1600 :height 1600 :eval yes :tangle figure_Rscripts/figure7.R
## Figure 7 multipanel ---------------------------------------------------------
source("ggplot2-themes.R")
source("custom_fun.R")
library(ggplot2)
library(gridExtra)

## control & E. coli 10X PAS-Alcian blue
figure7b <- png2ggplot("../figures/figure7/figure7b.png") +
    img.theme + coord_fixed(ratio = 1/1.75) + ggtitle("B")

## control & E. coli 100X H&E, AB, PAS, and PAS-Alcian blue
figure7c <- png2ggplot("../figures/figure7/figure7c.png") +
    img.theme + coord_fixed(ratio = 1/2) + ggtitle("C")

## control & E. coli 60X confocal
figure7d <- png2ggplot("../figures/figure7/figure7d.png") +
    img.theme + coord_fixed(ratio = 1/2) + ggtitle("D")

figure7f <- png2ggplot("../figures/figure7/figure7f.png") +
    img.theme + coord_fixed(ratio = 1/3) + ggtitle("F")

layout <- rbind(c(1,2,2,2),
                c(3,3,4,4),
		c(5,6,6,6))

## PDF output
pdf(file = "../figures/figure7/figure7_multipanel.pdf", width = 7000/300, height = 8250/300, onefile = FALSE)
gridExtra::grid.arrange(figure7a, figure7b, figure7c, figure7d, figure7e, figure7f, layout_matrix = layout)
dev.off()

## EPS output
ggsave(filename = "../figures/figure7/eps/figure7_multipanel.eps", 
       plot = gridExtra::grid.arrange(figure7a, figure7b, figure7c, figure7d, figure7e, figure7f, layout_matrix = layout), 
       width = 20, height = 20)

## PNG output
png(filename = "../figures/figure7/figure7_multipanel.png", width = 1865, height = 2000)
gridExtra::grid.arrange(figure7a, figure7b, figure7c, figure7d, figure7e, figure7f, layout_matrix = layout)
dev.off()
#+end_src

#+RESULTS:
[[file:../figures/figure7/figure7_multipanel.png]]

** Makefile 
#+begin_src makefile :tangle ../makefile :results silent :exports none :eval no
## Figure 7 multipanel ---------------------------------------------------------
figure7: ./figures/figure7/figure7_multipanel.pdf
./figures/figure7/figure7_multipanel.pdf : ./src/figure_Rscripts/figure7.R \
	./results/ECOR2_hypoxia_nfkb/ECOR2-HK_over_PBS.csv \
	./results/ECOR2_hypoxia_nfkb/ECOR2_over_PBS.csv \
	./results/ECOR2_hypoxia_nfkb/ECOR2-NFKBi_over_PBS.csv \
	./results/ECOR2_hypoxia_nfkb/hypoxia_over_PBS.csv \
	./results/ECOR2_hypoxia_nfkb/plotted-nfkb_complete-goANDreactome-results.csv \
	./figures/figure7/figure7b.png \
	./figures/figure7/figure7c.png \
	./figures/figure7/figure7d.png \
	./figures/figure7/figure7f.png
	R -e "setwd('./src/'); source('figure_Rscripts/figure7.R')"
#+end_src

* Figure 8 
*** Figure 8A: Regulation of cytoskeleton organization and cell-cell adhesion is NF-kB dependent
    
**** Data import and manipulation 
#+begin_src R :session *R* :results silent :exports none :eval yes :tangle figure_Rscripts/figure8.R
## FIGURE 8 --------------------------------------------------------------------
## Figure 8A: Regulation of cytoskeleton organization and cell-cell adhesion is NF-kB dependent
## import data
data.dir <- "../results/ECOR2_hypoxia_nfkb/"
library(magrittr)
ecor2.pbs <- readr::read_csv(file = file.path(data.dir,"ECOR2_over_PBS.csv")) %>% dplyr::rename(SYMBOL = X1)
hk.pbs <- readr::read_csv(file = file.path(data.dir,"ECOR2-HK_over_PBS.csv")) %>% dplyr::rename(SYMBOL = X1)
hypoxia.pbs <- readr::read_csv(file = file.path(data.dir,"hypoxia_over_PBS.csv")) %>% dplyr::rename(SYMBOL = X1)
ecor2i.pbs <- readr::read_csv(file = file.path(data.dir,"ECOR2-NFKBi_over_PBS.csv")) %>% dplyr::rename(SYMBOL = X1)

## add comparison ID
ecor2.pbs$comparison <- "E. coli"
hk.pbs$comparison <- "HK-E. coli"
hypoxia.pbs$comparison <- "hypoxia"
ecor2i.pbs$comparison <- "E. coli + SC-514"

## bind in single dataframe
data <- rbind(ecor2.pbs,
              hk.pbs,
              hypoxia.pbs,
              ecor2i.pbs)

plot.data <- data

## list of genes to extract
paths <- readr::read_csv("../results/ECOR2_hypoxia_nfkb/plotted-nfkb_complete-goANDreactome-results.csv")

adhesion <- paths[grep("Adherens junctions interactions", paths$Description),]$geneID

genes <- sapply(adhesion, 
                    function(x) {
                        v <- stringr::str_split(x, "/")
                                         })
genes <- c(unique(unlist(genes)))
genes <- genes[-grep("CDH9", genes)]

plot.data <- data[which(data$SYMBOL %in% genes),]

plot.data$category <- "Adherens junction"

adhesion <- paths[grep("cell-cell junction assembly", paths$Description),]$geneID
#adhesion <- paths[grep("cytoskeleton organization", paths$Description),]$geneID

genes <- sapply(adhesion, 
                    function(x) {
                        v <- stringr::str_split(x, "/")
                                         })
genes <- c(unique(unlist(genes)))
#genes <- genes[-grep("CDH9", genes)]

plot.data2 <- data[which(data$SYMBOL %in% genes),]

plot.data2$category <- "Cell-cell junction assembly"

plot.data <- rbind(plot.data, plot.data2)

library(magrittr)

## claculate zscore
scale_this <- function(x) as.vector(scale(x))

data.scaled <- dplyr::group_by(plot.data, SYMBOL) %>%
    dplyr::mutate(zscore = scale_this(log2FoldChange)) %>%
    dplyr::group_by(SYMBOL, comparison, category) %>%
    dplyr::summarize(mean_zscore = mean(zscore))

#data.scaled$category <- "Adherens junction interactions"
#data.scaled[grep("MUC", data.scaled$SYMBOL),]$category <- "Mucins"

data.scaled$comparison <- factor(data.scaled$comparison,
                                 levels = c(
                                            "E. coli", 
                                            "HK-E. coli",
                                            "E. coli + SC-514",
                                            "hypoxia"))

data.scaled <- data.scaled[order(data.scaled$comparison,data.scaled$mean_zscore),]
data.scaled$SYMBOL <- factor(data.scaled$SYMBOL,
                         levels = unique(data.scaled$SYMBOL))
#+end_src

**** Generate plot
#+begin_src R :session *R* :exports none :results graphics :file ../figures/figure8/figure8a.png :eval yes :tangle figure_Rscripts/figure8.R
## plot
library(ggplot2)
source("ggplot2-themes.R")

figure8a <- ggplot(data.scaled,
              aes(y = SYMBOL, x = comparison)) +
    geom_tile(stat = "identity", aes(fill = mean_zscore)) +
    facet_grid(category ~ ., scales = "free_y", space = "free", switch = "y", labeller = labeller(groupwrap = label_wrap_gen(10))) +
    scale_fill_distiller(name = "Z-score ", palette = "RdYlBu", breaks = c(-1, 0, 1)) +
    scale_y_discrete(position = "right") +
    ylab("") + xlab("") + 
    theme1 + 
    theme(strip.text =  element_text(size = 30),
          axis.text.x = element_text(angle = 60, hjust = 1, vjust = 1, size = 20),
          legend.position = "bottom",
	  legend.title = element_text(size = 18),
	  legend.key.size = unit(1,"cm"),
	  panel.spacing = unit(2, "lines"),
	  panel.border = element_blank()) +
    ggtitle("A")

png(filename = "../figures/figure8/figure8a.png", width = 400, height = 1200)
print(figure8a)
dev.off()
ggsave(filename = "../figures/figure8/eps/figure8a.eps", 
       plot = figure8a, 
       width = 8, height = 24)
#+end_src

#+RESULTS:
[[file:../figures/figure8/figure8a.png]]

*** Figure 8B&D: FD4 permeability is reduced in /E. coli/ colonized HIOs treated with TNF and IFN 
    
**** Data import and manipulation 
#+begin_src R :session *R* :results silent :exports none :eval yes :tangle figure_Rscripts/figure8.R
## FIGURE 8 --------------------------------------------------------------------
## Figure 8B: FD4 permeability is reduced in /E. coli/ colonized HIOs treated with TNF and IFN 
## import data
## read in the raw data file from ImageJ
data <- readr::read_csv(file = "../data/figure8/results.csv")

## data wrangling ##########

## extract sample number from Label
sno <- "[_]([0-9]{2})[_R3D]"
## extract time point (image number) from label
time <- "t([0-9]{3})"
data$organoid <- as.numeric(stringr::str_match(data$Label, sno)[,2])
data$image <- as.numeric(stringr::str_match(data$Label, time)[,2])
## calculate minutes and hr timepoints
data$min <- (data$image * 10) - 10
data$hr <- data$min/60

## convert NaN to 0
is.nan.data.frame <- function(x) {
    do.call(cbind, lapply(x, is.nan))}
data$Mean[is.nan.data.frame(data$Mean)] <- 0

data$Mean_area <- data$Mean * data$Area

## subset baseline measurement
baseline <- subset(data, data$image == 1)
baseline$t0 <- baseline$Mean
baseline$t0_area <- baseline$Mean_area

baseline <- dplyr::select(baseline, organoid, t0, t0_area)
## create column with baseline measurements
data <- dplyr::left_join(data, baseline, by = "organoid") 

## read in sample key
key <- readr::read_csv(file = "../data/figure8/sample_key.csv")
## ... and merge
data <- dplyr::left_join(data, key, by = "organoid") 

## normalized fluorescence
data$normalized <- data$Mean/data$t0
data$normalized_area <- data$Mean_area/data$t0_area

library(magrittr)
data_mean <- dplyr::group_by(data, treatment, hr) %>%
    dplyr::summarise(mean = mean(normalized), 
                     stdev = sd(normalized),
                     num = n(),
                     iqr = IQR(normalized),
                     min = min(normalized),
                     max = max(normalized),
                     median = median(normalized))

data_mean$sem <- data_mean$stdev/sqrt(data_mean$num)


##Import csv
data <- read.table("../data/figure8/ECOR2_TNF_IFN_permeability.csv",header=TRUE,sep=",", stringsAsFactors = FALSE)

library(ggplot2)

#list of sample columns
samples <- grep("HIO",colnames(data))

#calculate row mean
data$mean <- rowMeans(data[,samples],na.rm=TRUE)
#calculate row SEM (counts number of non NA samples)
data$sem <- apply(data[,samples],1,sd,na.rm=TRUE)/sqrt(rowSums(!is.na(data[,samples])))
data$n <- rowSums(!is.na(data[,samples]))

## get the two datasets to play nicely
data <- dplyr::select(data, hr, mean, sem, treatment)
data_mean <- dplyr::select(data_mean, hr, mean, sem, treatment)
attributes(data_mean) <- NULL
data_mean <- rbind(data, data_mean)
data_mean <- data_mean[order(data_mean$treatment,data_mean$mean),]
## read in the raw data file from ImageJ
data <- readr::read_csv(file = "../data/figure8/041417_deltavision/thresh40.csv")

## data wrangling ##########

## extract sample number from Label
sno <- "[_]([0-9]{2})[_R3D]"
## extract time point (image number) from label
time <- "t([0-9]{3})"
data$organoid <- as.numeric(stringr::str_match(data$Label, sno)[,2])
data$image <- as.numeric(stringr::str_match(data$Label, time)[,2])
## calculate minutes and hr timepoints
data$min <- (data$image * 10) - 10
data$hr <- data$min/60

## convert NaN to 0
is.nan.data.frame <- function(x) {
    do.call(cbind, lapply(x, is.nan))}
data$Mean[is.nan.data.frame(data$Mean)] <- 0

data$Mean_area <- data$Mean * data$Area

## subset baseline measurement
baseline <- subset(data, data$image == 1)
baseline$t0 <- baseline$Mean
baseline$t0_area <- baseline$Mean_area

baseline <- dplyr::select(baseline, organoid, t0, t0_area)
## create column with baseline measurements
data <- dplyr::left_join(data, baseline, by = "organoid") 

## read in sample key
key <- readr::read_csv(file = "../data/figure8/041417_deltavision/sample_key.csv")
## ... and merge
data <- dplyr::left_join(data, key, by = "organoid") 

## normalized fluorescence
data$normalized <- data$Mean/data$t0
data$normalized_area <- data$Mean_area/data$t0_area

#data <- data[data$exclude != 1,]
#data <- subset(data, data$organoid > 3 & data$organoid < 15)
#data <- subset(data, data$organoid < 11 & data$organoid > 3)
library(magrittr)
data_mean2 <- dplyr::group_by(data, treatment, hr) %>%
    dplyr::summarise(mean = mean(normalized, na.rm = TRUE), 
                     stdev = sd(normalized, na.rm = TRUE),
                     num = n(),
                     iqr = IQR(normalized, na.rm = TRUE),
                     min = min(normalized, na.rm = TRUE),
                     max = max(normalized, na.rm = TRUE),
                     median = median(normalized, na.rm = TRUE))

data_mean2$sem <- data_mean2$stdev/sqrt(data_mean2$num)

data_mean2 <- dplyr::select(data_mean2, hr, mean, sem, treatment)
attributes(data_mean2) <- NULL
data_mean <- rbind(data_mean, data_mean2)

## read in the raw data file from ImageJ
data <- readr::read_csv(file = "../data/figure8/041717_deltavision/thesh40.csv")

## data wrangling ##########

## extract sample number from Label
sno <- "[_]([0-9]{2})[_R3D]"
## extract time point (image number) from label
time <- "t([0-9]{3})"
data$organoid <- as.numeric(stringr::str_match(data$Label, sno)[,2])
data$image <- as.numeric(stringr::str_match(data$Label, time)[,2])
## calculate minutes and hr timepoints
data$min <- (data$image * 10) - 10
data$hr <- data$min/60

## convert NaN to 0
is.nan.data.frame <- function(x) {
    do.call(cbind, lapply(x, is.nan))}
data$Mean[is.nan.data.frame(data$Mean)] <- 0

data$Mean_area <- data$Mean * data$Area

## subset baseline measurement
baseline <- subset(data, data$image == 1)
baseline$t0 <- baseline$Mean
baseline$t0_area <- baseline$Mean_area

baseline <- dplyr::select(baseline, organoid, t0, t0_area)
## create column with baseline measurements
data <- dplyr::left_join(data, baseline, by = "organoid") 

## read in sample key
key <- readr::read_csv(file = "../data/figure8/041717_deltavision/sample_key.csv")
## ... and merge
data <- dplyr::left_join(data, key, by = "organoid") 

## normalized fluorescence
data$normalized <- data$Mean/data$t0
data$normalized_area <- data$Mean_area/data$t0_area

## remove unreliable data
data <- subset(data, data$treatment != "PBS" & data$organoid != 7) ## HIOs dried out

library(magrittr)
data_mean3 <- dplyr::group_by(data, treatment, hr) %>%
    dplyr::summarise(mean = mean(normalized, na.rm = TRUE), 
                     stdev = sd(normalized, na.rm = TRUE),
                     num = n(),
                     iqr = IQR(normalized, na.rm = TRUE),
                     min = min(normalized, na.rm = TRUE),
                     max = max(normalized, na.rm = TRUE),
                     median = median(normalized, na.rm = TRUE))

data_mean3$sem <- data_mean3$stdev/sqrt(data_mean3$num)

data_mean3 <- dplyr::select(data_mean3, hr, mean, sem, treatment)
attributes(data_mean3) <- NULL
data_mean <- rbind(data_mean, data_mean3)
#+end_src
#+begin_src R :session *R* :results silent :exports none :eval yes :tangle figure_Rscripts/text-stats.R
,#+begin_src R :session *R* :results silent :exports none :eval yes :tangle figure_Rscripts/figure8.R
## FIGURE 8 --------------------------------------------------------------------
## Figure 8B&D: FD4 permeability is reduced in /E. coli/ colonized HIOs treated with TNF and IFN 
## import data
## read in the raw data file from ImageJ
data <- readr::read_csv(file = "../data/figure8/results.csv")

## data wrangling ##########

## extract sample number from Label
sno <- "[_]([0-9]{2})[_R3D]"
## extract time point (image number) from label
time <- "t([0-9]{3})"
data$organoid <- as.numeric(stringr::str_match(data$Label, sno)[,2])
data$image <- as.numeric(stringr::str_match(data$Label, time)[,2])
## calculate minutes and hr timepoints
data$min <- (data$image * 10) - 10
data$hr <- data$min/60

## convert NaN to 0
is.nan.data.frame <- function(x) {
    do.call(cbind, lapply(x, is.nan))}
data$Mean[is.nan.data.frame(data$Mean)] <- 0

data$Mean_area <- data$Mean * data$Area

## subset baseline measurement
baseline <- subset(data, data$image == 1)
baseline$t0 <- baseline$Mean
baseline$t0_area <- baseline$Mean_area

baseline <- dplyr::select(baseline, organoid, t0, t0_area)
## create column with baseline measurements
data <- dplyr::left_join(data, baseline, by = "organoid") 

## read in sample key
key <- readr::read_csv(file = "../data/figure8/sample_key.csv")
## ... and merge
data <- dplyr::left_join(data, key, by = "organoid") 

## normalized fluorescence
data$normalized <- data$Mean/data$t0
data$normalized_area <- data$Mean_area/data$t0_area

library(magrittr)
data_mean <- dplyr::group_by(data, treatment, hr) %>%
    dplyr::summarise(mean = mean(normalized), 
                     stdev = sd(normalized),
                     num = n(),
                     iqr = IQR(normalized),
                     min = min(normalized),
                     max = max(normalized),
                     median = median(normalized))

data_mean$sem <- data_mean$stdev/sqrt(data_mean$num)


##Import csv
data <- read.table("../data/figure8/ECOR2_TNF_IFN_permeability.csv",header=TRUE,sep=",", stringsAsFactors = FALSE)

library(ggplot2)

#list of sample columns
samples <- grep("HIO",colnames(data))

#calculate row mean
data$mean <- rowMeans(data[,samples],na.rm=TRUE)
#calculate row SEM (counts number of non NA samples)
data$stdev <- apply(data[,samples],1,sd,na.rm=TRUE)
data$sem <- data$stdev/sqrt(rowSums(!is.na(data[,samples])))
data$num <- rowSums(!is.na(data[,samples]))

## get the two datasets to play nicely
data <- dplyr::select(data, hr, mean, sem, stdev, num, treatment)
data_mean <- dplyr::select(data_mean, hr, mean, sem, stdev, num, treatment)
attributes(data_mean) <- NULL
data_mean <- rbind(data, data_mean)
data_mean <- data_mean[order(data_mean$treatment,data_mean$mean),]
## read in the raw data file from ImageJ
data <- readr::read_csv(file = "../data/figure8/041417_deltavision/thresh40.csv")

## data wrangling ##########

## extract sample number from Label
sno <- "[_]([0-9]{2})[_R3D]"
## extract time point (image number) from label
time <- "t([0-9]{3})"
data$organoid <- as.numeric(stringr::str_match(data$Label, sno)[,2])
data$image <- as.numeric(stringr::str_match(data$Label, time)[,2])
## calculate minutes and hr timepoints
data$min <- (data$image * 10) - 10
data$hr <- data$min/60

## convert NaN to 0
is.nan.data.frame <- function(x) {
    do.call(cbind, lapply(x, is.nan))}
data$Mean[is.nan.data.frame(data$Mean)] <- 0

data$Mean_area <- data$Mean * data$Area

## subset baseline measurement
baseline <- subset(data, data$image == 1)
baseline$t0 <- baseline$Mean
baseline$t0_area <- baseline$Mean_area

baseline <- dplyr::select(baseline, organoid, t0, t0_area)
## create column with baseline measurements
data <- dplyr::left_join(data, baseline, by = "organoid") 

## read in sample key
key <- readr::read_csv(file = "../data/figure8/041417_deltavision/sample_key.csv")
## ... and merge
data <- dplyr::left_join(data, key, by = "organoid") 

## normalized fluorescence
data$normalized <- data$Mean/data$t0
data$normalized_area <- data$Mean_area/data$t0_area

#data <- data[data$exclude != 1,]
#data <- subset(data, data$organoid > 3 & data$organoid < 15)
#data <- subset(data, data$organoid < 11 & data$organoid > 3)
library(magrittr)
data_mean2 <- dplyr::group_by(data, treatment, hr) %>%
    dplyr::summarise(mean = mean(normalized, na.rm = TRUE), 
                     stdev = sd(normalized, na.rm = TRUE),
                     num = n(),
                     iqr = IQR(normalized, na.rm = TRUE),
                     min = min(normalized, na.rm = TRUE),
                     max = max(normalized, na.rm = TRUE),
                     median = median(normalized, na.rm = TRUE))

data_mean2$sem <- data_mean2$stdev/sqrt(data_mean2$num)

data_mean2 <- dplyr::select(data_mean2, hr, mean, sem, stdev, num, treatment)
attributes(data_mean2) <- NULL
data_mean <- rbind(data_mean, data_mean2)

## read in the raw data file from ImageJ
data <- readr::read_csv(file = "../data/figure8/041717_deltavision/thesh40.csv")

## data wrangling ##########

## extract sample number from Label
sno <- "[_]([0-9]{2})[_R3D]"
## extract time point (image number) from label
time <- "t([0-9]{3})"
data$organoid <- as.numeric(stringr::str_match(data$Label, sno)[,2])
data$image <- as.numeric(stringr::str_match(data$Label, time)[,2])
## calculate minutes and hr timepoints
data$min <- (data$image * 10) - 10
data$hr <- data$min/60

## convert NaN to 0
is.nan.data.frame <- function(x) {
    do.call(cbind, lapply(x, is.nan))}
data$Mean[is.nan.data.frame(data$Mean)] <- 0

data$Mean_area <- data$Mean * data$Area

## subset baseline measurement
baseline <- subset(data, data$image == 1)
baseline$t0 <- baseline$Mean
baseline$t0_area <- baseline$Mean_area

baseline <- dplyr::select(baseline, organoid, t0, t0_area)
## create column with baseline measurements
data <- dplyr::left_join(data, baseline, by = "organoid") 

## read in sample key
key <- readr::read_csv(file = "../data/figure8/041717_deltavision/sample_key.csv")
## ... and merge
data <- dplyr::left_join(data, key, by = "organoid") 

## normalized fluorescence
data$normalized <- data$Mean/data$t0
data$normalized_area <- data$Mean_area/data$t0_area

#data <- data[data$exclude != 1,]
#data <- subset(data, data$organoid > 3 & data$organoid < 15)
data <- subset(data, data$treatment != "PBS") ## HIOs dried out
library(magrittr)
data_mean3 <- dplyr::group_by(data, treatment, hr) %>%
    dplyr::summarise(mean = mean(normalized, na.rm = TRUE), 
                     stdev = sd(normalized, na.rm = TRUE),
                     num = n(),
                     iqr = IQR(normalized, na.rm = TRUE),
                     min = min(normalized, na.rm = TRUE),
                     max = max(normalized, na.rm = TRUE),
                     median = median(normalized, na.rm = TRUE))

data_mean3$sem <- data_mean3$stdev/sqrt(data_mean3$num)

data_mean3 <- dplyr::select(data_mean3, hr, mean, sem, stdev, num, treatment)
attributes(data_mean3) <- NULL
data_mean <- rbind(data_mean, data_mean3)

#T-tests
source("custom_fun.R")
## t-test
# m1, m2: the sample means
# s1, s2: the sample standard deviations
# n1, n2: the same sizes
# m0: the null value for the difference in means to be tested for. Default is 0. 
# equal.variance: whether or not to assume equal variance. Default is FALSE. 
# t.test2 <- function(m1,m2,s1,s2,n1,n2,m0=0,equal.variance=FALSE)
tt.fig8b <- t.test2(m1 = data_mean[data_mean$treatment == "E. coli" &
                                       data_mean$hr == 20,]$mean[1],
                    m2 = data_mean[data_mean$treatment == "E. coli + SC-514" &
                                       data_mean$hr == 20,]$mean,
                    s1 = data_mean[data_mean$treatment == "E. coli" &
                                       data_mean$hr == 20,]$stdev[1],
                    s2 = data_mean[data_mean$treatment == "E. coli + SC-514" &
                                       data_mean$hr == 20,]$stdev[1],
                    n1 = data_mean[data_mean$treatment == "E. coli" &
                                       data_mean$hr == 20,]$num[1],
                    n2 = data_mean[data_mean$treatment == "E. coli + SC-514" &
                                       data_mean$hr == 20,]$num,
                    equal.variance = TRUE)
tt.fig8d <- t.test2(m1 = data_mean[data_mean$treatment == "PBS" &
                                       data_mean$hr == 20,]$mean[2],
                    m2 = data_mean[data_mean$treatment == "TNF&IFN" &
                                       data_mean$hr == 20,]$mean[1],
                    s1 = data_mean[data_mean$treatment == "PBS" &
                                       data_mean$hr == 20,]$stdev[2],
                    s2 = data_mean[data_mean$treatment == "TNF&IFN" &
                                       data_mean$hr == 20,]$stdev[1],
                    n1 = data_mean[data_mean$treatment == "PBS" &
                                       data_mean$hr == 20,]$num[2],
                    n2 = data_mean[data_mean$treatment == "TNF&IFN" &
                                       data_mean$hr == 20,]$num[1],
                    equal.variance = TRUE)
tt.fig8d2 <- t.test2(m1 = data_mean[data_mean$treatment == "E. coli + TNF&IFN" &
                                       data_mean$hr == 20,]$mean[2],
                    m2 = data_mean[data_mean$treatment == "TNF&IFN" &
                                       data_mean$hr == 20,]$mean[1],
                    s1 = data_mean[data_mean$treatment == "E. coli + TNF&IFN" &
                                       data_mean$hr == 20,]$stdev[2],
                    s2 = data_mean[data_mean$treatment == "TNF&IFN" &
                                       data_mean$hr == 20,]$stdev[1],
                    n1 = data_mean[data_mean$treatment == "E. coli + TNF&IFN" &
                                       data_mean$hr == 20,]$num[2],
                    n2 = data_mean[data_mean$treatment == "TNF&IFN" &
                                       data_mean$hr == 20,]$num[1],
                    equal.variance = TRUE)

#+end_src
**** Generate plot
#+begin_src R :session *R* :exports none :results graphics :file ../figures/figure8/figure8d.png :eval yes :tangle figure_Rscripts/figure8.R
library(ggplot2)
source("ggplot2-themes.R")
data_mean$treatment <- factor(data_mean$treatment,
                              levels = c(
                                  "PBS",
				  "PBS + SC-514",
                                  "E. coli",
                                  "E. coli + TNF&IFN",
                                  "TNF&IFN",
                                  "E. coli + SC-514",
                                  "E. coli + TNF&IFN + SC-514",
                                  "LPS",
                                  "LPS + SC-514"))

plot.data1 <- subset(data_mean,
                     data_mean$treatment %in% c("PBS",
                                                "E. coli",
                                                "TNF&IFN",
                                                "E. coli + TNF&IFN"))

plot.data2 <- subset(data_mean,
                     data_mean$treatment %in% c("PBS",
                                                "E. coli",
                                                "PBS + SC-514",
                                                "E. coli + SC-514"))


figure8d <- ggplot(plot.data1, aes(x = hr, y = mean, color = treatment)) +
    scale_color_brewer(palette = "Spectral", name = "Treatment group", direction = -1) +
    geom_smooth(size = 3) +
    ylim(c(0.25, 1.05)) +
    xlab("Time post-treatment (h)") +
    ylab("Relative Fluorescence") +
    scale_x_continuous(breaks = c(0, 3, 6, 9, 12, 15, 18, 21, 24)) +
    theme1 + ggtitle("D") +
    theme(
       # legend.position = "bottom",
          legend.position = c(0.3,0.13),
    	  legend.key.size = unit(1,"cm"),
          legend.text = element_text(size = 32))

png(filename = "../figures/figure8/figure8d.png", width = 800, height = 800)
print(figure8d)
dev.off()
ggsave(filename = "../figures/figure8/eps/figure8d.eps", 
       plot = figure8d, 
       width = 16, height = 16)
#+end_src

#+RESULTS:
[[file:../figures/figure8/figure8d.png]]

#+begin_src R :session *R* :exports none :results graphics :file ../figures/figure8/figure8b.png :eval yes :tangle figure_Rscripts/figure8.R
library(ggplot2)
source("ggplot2-themes.R")
data_mean$treatment <- factor(data_mean$treatment,
                              levels = c(
                                  "PBS",
                                  "E. coli",
                                  "E. coli + TNF&IFN",
                                  "PBS + SC-514",
                                  "TNF&IFN",
                                  "E. coli + SC-514",
                                  "E. coli + TNF&IFN + SC-514",
                                  "LPS",
                                  "LPS + SC-514"))

plot.data1 <- subset(data_mean,
                     data_mean$treatment %in% c("PBS",
                                                "E. coli",
                                                "TNF&IFN",
                                                "E. coli + TNF&IFN"))

plot.data2 <- subset(data_mean,
                     data_mean$treatment %in% c("PBS",
                                                "E. coli",
                                                "PBS + SC-514",
                                                "E. coli + SC-514"))



figure8b <- ggplot(plot.data2, aes(x = hr, y = mean, color = treatment)) +
    scale_color_brewer(palette = "Spectral", name = "Treatment group", direction = -1) +
    geom_smooth(size = 3) +
    ylim(c(0.25, 1.05)) +
    xlab("Time post-treatment (h)") +
    ylab("Relative Fluorescence") +
    scale_x_continuous(breaks = c(0, 3, 6, 9, 12, 15, 18, 21, 24)) +
    theme1 + ggtitle("B") +
    theme(
       # legend.position = "bottom",
          legend.position = c(0.25,0.15),
    	  legend.key.size = unit(1,"cm"),
          legend.text = element_text(size = 32))

png(filename = "../figures/figure8/figure8b.png", width = 800, height = 800)
print(figure8b)
dev.off()
ggsave(filename = "../figures/figure8/eps/figure8b.eps", 
       plot = figure8b, 
       width = 16, height = 16)
#+end_src

#+RESULTS:
[[file:../figures/figure8/figure8b.png]]




*** Figure 8C: Survival is impaired in presence of NFkB inhibitor
    
**** Data import and manipulation 

#+begin_src R :session *R* :results silent :exports none :eval yes :tangle figure_Rscripts/figure8.R
## FIGURE 8 --------------------------------------------------------------------
## Figure 8C: Survival is impaired in presence of NFkB inhibitor
## import data
data <- readr::read_csv(file = "../data/figure1/161206_survival/survival_and_ELISA.csv")
## subset data
#data <- subset(data, data$plate > 3)
## create unique IDs
data$ID <- paste(data$well,data$plate, sep = "P")

## reshape dataframe
data <- dplyr::select(data, ID, day, bd1, bd2, il6, il8, vegf, treatment, Survival = dead)
data <- dplyr::rename(data, BD1 = bd1, BD2 = bd2, IL6 = il6, IL8 = il8, VEGF = vegf)
data <- reshape2::melt(data, id.vars = c('ID', 'day', 'treatment'))

## convert from pg/ml to pg/HIO
#data$value <- as.numeric(data$value, na.rm = TRUE)/2 # pg/1ml = 2*pg/0.5ml

## dotplot +/- SEM
library(magrittr)
data2 <- dplyr::group_by(data,day, treatment, variable) %>%
    dplyr::summarise(avg = mean(value,na.rm = TRUE),
              sem = sd(value, na.rm = TRUE)/n(), 
              total = sum(value, na.rm = TRUE))

data2[data2$variable == "Survival",]$avg <- 1 - data2[data2$variable == "Survival",]$avg
data2[data2$variable == "Survival",]$total <- 48 - data2[data2$variable == "Survival",]$total

levels(data2$variable) <- c("BD1 (pg/ml)", "BD2 (pg/ml)", "IL-6 (pg/ml)", "IL-8 (pg/ml)", "VEGF (pg/ml)", "Survival")

## list PBS first
data2 <- data2[data2$treatment !="HK- E. coli" ,]
data2 <- data2[complete.cases(data2),]
data2$treatment <- factor(data2$treatment,
                          levels = c("PBS", "E. coli", "E. coli + vehicle", "E. coli + SC-514"))

## survival numbers to reference in text
d9surv <- data2[data2$variable == "Survival" & data2$treatment == "E. coli" & data2$day == 9,]$total
d0surv <- data2[data2$variable == "Survival" & data2$treatment == "E. coli" & data2$day == 0,]$total
d3surv <- data2[data2$variable == "Survival" & data2$treatment == "E. coli" & data2$day == 3,]$total
d2surv <- data2[data2$variable == "Survival" & data2$treatment == "E. coli" & data2$day == 2,]$total
#+end_src

#+begin_src R :session *R* :results silent :exports none :eval yes :tangle figure_Rscripts/text-stats.R
## FIGURE 8 --------------------------------------------------------------------
## Figure 8C: Survival is impaired in presence of NFkB inhibitor
## import data
data <- readr::read_csv(file = "../data/figure1/161206_survival/survival_and_ELISA.csv")
## subset data
#data <- subset(data, data$plate > 3)
## create unique IDs
data$ID <- paste(data$well,data$plate, sep = "P")

## reshape dataframe
data <- dplyr::select(data, ID, day, bd1, bd2, il6, il8, vegf, treatment, Survival = dead)
data <- dplyr::rename(data, BD1 = bd1, BD2 = bd2, IL6 = il6, IL8 = il8, VEGF = vegf)
data <- reshape2::melt(data, id.vars = c('ID', 'day', 'treatment'))

data <- data[data$variable == "Survival",]
library(survival)
f7s <- Surv(time = data$day, event = data$value)
model <- coxph(f7s ~ treatment, data = data)

library(magrittr)
data2 <- dplyr::group_by(data,day, treatment, variable) %>%
    dplyr::summarise(avg = mean(value,na.rm = TRUE),
              sem = sd(value, na.rm = TRUE)/n(), 
              total = sum(value, na.rm = TRUE))

#+end_src     
**** Generate plot
#+begin_src R :session *R* :exports none :results graphics :file ../figures/figure8/figure8c.png :eval yes :tangle figure_Rscripts/figure8.R
library(ggplot2)
source("ggplot2-themes.R")

figure8c  <- ggplot(data = data2[data2$variable == "Survival" & data2$treatment != "HK- E. coli",], 
                    aes(x = day, y = 1-avg, fill = treatment)) +
    geom_step(data = data2[data2$variable == "Survival" & data2$treatment != "HK- E. coli",],
              direction = "hv", aes(color = treatment), 
              size = 5) +
    xlab("Days post-microinjection") +
    ylab("Incidence of bacterial translocation") +
    scale_x_continuous(breaks = c(0,1,2,3,4,5,6,7), limits = c(0,7)) +
    ylim(c(0,1)) +
    scale_colour_brewer(palette = "Spectral", direction = -1) +
    guides(fill = guide_legend(title = NULL),
           color = guide_legend(title = NULL)) +
    theme1 + 
    #coord_fixed(ratio = 4) + 
    ggtitle("C") +
    theme(legend.position = c(0.2,0.85),
          legend.key.size = unit(1,"cm"),
	  legend.text = element_text(size = 32))

png(filename = "../figures/figure8/figure8c.png", width = 1000, height = 800)
print(figure8c)
dev.off()

ggsave(filename = "../figures/figure8/eps/figure8c.eps", 
       plot = figure8c, 
       width = 20, height = 16)
#+end_src

#+RESULTS:
[[file:../figures/figure8/figure8c.png]]


*** Figure 8 multipanel  
#+begin_src R :session *R* :exports none :results graphics :file ../figures/figure8/figure8_multipanel.png :eval yes :tangle figure_Rscripts/figure8.R
## Figure 7 multipanel ---------------------------------------------------------
source("ggplot2-themes.R")
source("custom_fun.R")
library(ggplot2)
library(gridExtra)

figure8e <- png2ggplot("../figures/figure8/figure8e.png") +
    img.theme + coord_fixed(ratio = 1/1.6) + ggtitle("E")

layout <- rbind(c(1,2,2,3,3,3),
                c(1,4,4,5,5,5))

## PDF output
pdf(file = "../figures/figure8/figure8_multipanel.pdf", width = 8250/300, height = 5250/300, onefile = FALSE)
gridExtra::grid.arrange(figure8a, figure8b, figure8c, figure8d, figure8e, layout_matrix = layout)
dev.off()

## EPS output
ggsave(filename = "../figures/figure8/eps/figure8_multipanel.eps", 
       plot = gridExtra::grid.arrange(figure8a, figure8b, figure8c, figure8d, figure8e, layout_matrix = layout), 
       width = 44, height = 28)

## PNG output
png(filename = "../figures/figure8/figure8_multipanel.png", width = 2200, height = 1400)
gridExtra::grid.arrange(figure8a, figure8b, figure8c, figure8d,figure8e, layout_matrix = layout)
dev.off()
#+end_src

#+RESULTS:
[[file:../figures/figure8/figure8_multipanel.png]]

*** Supplemental  multipanel  
#+begin_src R :session *R* :exports none :results graphics :file ../figures/supplemental/sfigure5_multipanel.png :eval yes :tangle figure_Rscripts/supplemental.R
## Figure 8 multipanel ---------------------------------------------------------
source("ggplot2-themes.R")
source("custom_fun.R")
library(ggplot2)
library(gridExtra)

sfig4a <- png2ggplot("../data/figure8/occludin_cropped.png") +
    img.theme + coord_fixed(ratio = 1/1.6) + ggtitle("A")

sfig4b <- png2ggplot("../data/figure8/acTub_cropped.png") +
    img.theme + coord_fixed(ratio = 1/1.6) + ggtitle("B")


layout <- rbind(c(1),
                c(2))

## PDF output
pdf(file = "../figures/supplemental/sfigure5_multipanel.pdf", width = 4125/300, height = 5250/300, onefile = FALSE)
gridExtra::grid.arrange(sfig4a,sfig4b, layout_matrix = layout)
dev.off()

## EPS output
ggsave(filename = "../figures/supplemental/sfigure5_multipanel.eps", 
       plot = gridExtra::grid.arrange(sfig4a,sfig4b, layout_matrix = layout), 
       width = 22, height = 28)

## PNG output
png(filename = "../figures/supplemental/sfigure5_multipanel.png", width = 1100, height = 1400)
gridExtra::grid.arrange(sfig4a,sfig4b, layout_matrix = layout)
dev.off()
#+end_src

#+RESULTS:
[[file:../figures/supplemental/sfigure5_multipanel.png]]

** Makefile 
#+begin_src makefile :tangle ../makefile :results silent :exports none :eval no
## Figure 8 multipanel ---------------------------------------------------------
figure8: ./figures/figure8/figure8_multipanel.pdf
./figures/figure8/figure8_multipanel.pdf : ./src/figure_Rscripts/figure8.R \
	./results/ECOR2_hypoxia_nfkb/ECOR2-HK_over_PBS.csv \
	./results/ECOR2_hypoxia_nfkb/ECOR2_over_PBS.csv \
	./results/ECOR2_hypoxia_nfkb/ECOR2-NFKBi_over_PBS.csv \
	./results/ECOR2_hypoxia_nfkb/hypoxia_over_PBS.csv \
	./results/ECOR2_hypoxia_nfkb/plotted-nfkb_complete-goANDreactome-results.csv \
	./data/figure8/results.csv \
	./data/figure8/sample_key.csv \
	./data/figure8/ECOR2_TNF_IFN_permeability.csv
	R -e "setwd('./src/'); source('figure_Rscripts/figure8.R')"
#+end_src

* Supplemental Figures  

** Supplemental Figure 1: enteroid dataset
   
*** Data import and manipulation 
#+begin_src R :session *R* :results silent :exports none :eval yes :tangle figure_Rscripts/supplemental.R
## Supplemental FIGURE  --------------------------------------------------------------------
## supplemental figure 1A
## import data
## Differential expression of kallisto results with DESeq2

## read in table with sample metadata
samples <- readr::read_csv(file = "../data/RNA-seq/sfigure1_sample_sheet.csv")

## setup access to kallisto read files
files <- file.path(samples$directory,
                   samples$file_name,
                   "abundance.h5")

## set sample names as description_rep#_seq_rep#
names(files) <- paste0(samples$description,"_",
                       samples$rep,"_L00",samples$seq_rep)

## check that all files are found
if (all(file.exists(files)) == FALSE) {
    print("kallisto files not found")
    stop()
}

## associate transcripts with gene IDs
## create biomart reference
mart <- biomaRt::useMart(biomart = "ENSEMBL_MART_ENSEMBL",
  dataset = "hsapiens_gene_ensembl",
  host = 'ensembl.org')
## create index of gene names
tx2gene <- biomaRt::getBM(attributes = c("ensembl_transcript_id",
                                         "external_gene_name"),
                          mart = mart)

## import kallisto data and generate count dataframe (dds)
## http://bioconductor.org/packages/release/bioc/vignettes/tximport/inst/doc/tximport.html
library(readr)
txi <- tximport::tximport(files, type = "kallisto", tx2gene = tx2gene)

data.dir <- "../results/supplemental"
## export abundance counts
write.csv(txi$abundance, file = file.path(data.dir, "tximport_abundance counts.csv"))

library(DESeq2)
## https://bioconductor.org/packages/devel/bioc/vignettes/DESeq2/inst/doc/DESeq2.html
dds <- DESeq2::DESeqDataSetFromTximport(txi,
                                        colData = samples,
                                        design = ~ status)
## collapse technical replicates
ddsColl <- DESeq2::collapseReplicates(object = dds,
                                      groupby = dds$sample_id, 
                                      run = dds$seq_rep,
                                      renameCols = TRUE)

## pre-filter out counts < 1
dds <- dds[rowSums(counts(dds)) > 1, ]
ddsColl <- ddsColl[rowSums(counts(ddsColl)) > 1, ]

## write out normalized expression counts
ddsColl <- DESeq2::estimateSizeFactors(ddsColl)
ddsCollcounts <- DESeq2::counts(ddsColl, normalized = TRUE)
## give the columns better names
colnames(ddsCollcounts) <- paste0(colData(ddsColl)@listData$status,"_",
                                  colData(ddsColl)@listData$origin,"_",
                                  colData(ddsColl)@listData$rep)
## write expression matrix to file
write.csv(ddsCollcounts, file =  file.path(data.dir, "DESeq2-normalized-counts.csv"))
save(dds, file = file.path(data.dir, "dds.Rdata"))
rm(list = ls()) 
#+end_src
 
*** Figure 1A: Correlation analysis 
#+begin_src R :session *R* :results silent :exports none :eval yes :tangle figure_Rscripts/supplemental.R
## Pearson's correlation matrix ------------------------------------------------
## Load dataset from file
data.dir <- "../results/supplemental"

df <- readr::read_csv(file.path(data.dir, "DESeq2-normalized-counts.csv"))


num.data <- df[,sapply(df,is.numeric)]
group <- gsub('.{2}$', '', colnames(num.data))

## pca.data <- num.data[apply(num.data, 1, sd, na.rm=TRUE) != 0,]
## calculate variance by row (gene)
var <- apply(num.data, 1, sd, na.rm=TRUE)
## adjust cut off according to variance percentile
pca.data <- num.data[var > quantile(var, 0.2) & var != 0,]
colnames(pca.data) <- gsub("hES_hES", "hPSC", colnames(pca.data))
colnames(pca.data) <- gsub("_", " ", colnames(pca.data))
colnames(pca.data) <- gsub("in vivo", "tx", colnames(pca.data))
cor1 <- cor(pca.data, method = "pearson")
#+end_src

**** Generate plot
 #+begin_src R :session *R* :exports none :results graphics :file ../figures/supplemental/sfigure1a.png :eval yes :tangle figure_Rscripts/supplemental.R
## determine order for axis clustering
library(magrittr)
library(ggtree)
library(ape)
tree <- dist(cor1, method = "canberra") %>% hclust(method = "mcquitty") %>% as.phylo
plot <- ggplot(tree) + geom_tree(size = 3) + theme_tree() + geom_tiplab(size = 4)

library(gtable)
library(ggplot2)
library(grid)
source("ggplot2-themes.R")
## Correlation matrix
ord <- hclust(dist(cor1, method = "canberra"), method = "mcquitty")$order
melted_cormat <- reshape2::melt(cor1[ord,ord])
sfigure1a <- ggplot(data = melted_cormat, aes(x=Var1, y=Var2, fill=value)) + 
##  geom_tile(color = "grey", size = 0.5) +  # add tiles?
    geom_tile() +
    scale_fill_distiller(expression(paste(italic(r))),palette = "Spectral") +
    xlab("") + ylab("") + coord_fixed(ratio = 1) + theme1 +
    theme(axis.text = element_text(size = 18, face ="bold"),
          axis.text.x = element_text(angle = 45, vjust = 1, hjust = 1),
          legend.title = element_text(size = 18, face ="bold"),
	  panel.background = element_rect(fill = "white"),
	  panel.border = element_blank(),
          legend.text = element_text(size = 12, face ="bold")) + ggtitle("A") 
## tree <- dist(cor1, method = "canberra") %>% hclust(method = "mcquitty") %>% as.phylo
## tree.plot <- ggplot(tree) + geom_tree(size = 2) + theme_tree() + geom_tiplab(size = 0)

## ## left strip of labels
## b.labels <- data.frame(names = rownames(cor1)[ord], x = c(1:18))
## p <- ggplot(b.labels, aes(xmin=0, xmax=1, ymin=1, ymax=x+1)) + geom_rect(fill = "white")
## p <- p + geom_text(aes(y=x+0.5, x=1, label=paste0(names, " ")), hjust=1, vjust=0.5, angle=0, size = 5, fontface = "bold") 
## p <- p + scale_x_discrete(expand = c(0,0)) + scale_y_continuous(expand = c(0,0))
## pleft <- p

## ## setp grid plot
## g <- gtable_filter(ggplotGrob(plot), pattern = "panel", trim = TRUE, fixed=TRUE)
## g <- gtable_add_cols(g, unit(0.25, "null"), 0) # left labels
## g <- gtable_add_cols(g, unit(0.2, "null"), 1) # left labels
## g <- gtable_add_cols(g, unit(0.15, "null"), -1) # left labels
## g <- gtable_add_rows(g, unit(0.15, "null"), 4) # bottom labels
## g <- gtable_add_grob(g, gtable_filter(ggplotGrob(tree.plot), pattern = "panel", trim = TRUE, fixed=TRUE), 1,1)
## g <- gtable_add_grob(g, gtable_filter(ggplotGrob(pleft), pattern = "panel", trim = TRUE, fixed=TRUE), 1,2)
## g <- gtable_add_grob(g, gtable_filter(ggplotGrob(plot), pattern = "axis-b", trim = TRUE, fixed=TRUE), 2,3)
## g <- gtable_add_grob(g, gtable_filter(ggplotGrob(plot), pattern = "guide-box", trim = TRUE, fixed=TRUE), 1,4)
#grid.newpage()
#grid.draw(g)
 
png(filename = "../figures/supplemental/sfigure1a.png", width = 900, height = 900)
print(sfigure1a)
 dev.off()
 ## ggsave(filename = "../figures/supplmental/eps/sfigure1a.eps", 
 ## plot = grid.draw(g), 
 ## width = 20, height = 20)
 #+end_src

 #+RESULTS:
 [[file:../figures/supplemental/sfigure1a.png]]


*** Figure 1B: 
#+begin_src R :session *R* :results silent :exports none :eval yes :tangle figure_Rscripts/supplemental.R
library(magrittr)
cordf <- cor1 %>% as.data.frame() %>% dplyr::select(dplyr::matches("HIO|fetal|adult"))
## select adult SI comparisons
set <- grep("adult", rownames(cordf))
cordf <- cordf[set,]
## reshape for easy ggplot
cordf <- cordf %>% reshape2::melt()
## generic group names
cordf$variable <- gsub('.{2}$', '', cordf$variable)
cordf$variable <- factor(cordf$variable,
                         levels = c("in vitro HIO", "fetal SI","tx HIO", "adult SI", "hPSC"),
                         ordered = TRUE) 

## stats
test <- t.test(x = cordf[cordf$variable == "in vitro HIO",]$value,
               y= cordf[cordf$variable == "tx HIO",]$value,
               alternative = "two.sided")

cordf2 <- cor1 %>% as.data.frame() %>% dplyr::select(dplyr::matches("HIO|fetal|adult|hPSC"))
set <- grep("fetal SI", rownames(cordf2))
cordf2 <- cordf2[set,]
## reshape for easy ggplot
cordf2 <- cordf2 %>% reshape2::melt()
## generic group names
cordf2$variable <- gsub('.{2}$', '', cordf2$variable)
cordf2$variable <- factor(cordf2$variable,
                         levels = c("in vitro HIO", "fetal SI","tx HIO", "adult SI", "hPSC"),
                         ordered = TRUE)

## These tests are referenced in the text
# format(test2$p.value, digits = 3)
test2 <- t.test(x = cordf2[cordf2$variable == "in vitro HIO",]$value,
               y= cordf2[cordf2$variable == "hPSC",]$value,
               alternative = "two.sided") 

test3 <- t.test(x = cordf2[cordf2$variable == "tx HIO",]$value,
               y= cordf2[cordf2$variable == "hPSC",]$value,
               alternative = "two.sided")

#+end_src
**** Generate plot
#+begin_src R :session *R* :exports none :results graphics :file ../figures/supplemental/sfigure1b.png :eval yes :tangle figure_Rscripts/supplemental.R
library(ggplot2)
source("ggplot2-themes.R")

sfigure1b <- ggplot(data = cordf, aes(x = variable, y = value, color = variable)) +
    geom_boxplot(size = 2, outlier.size = 5) + theme1 +
    ylab(expression(paste("Pearson's correlation coefficent (", italic(r),")"))) +
    xlab("Comparison vs. adult SI") +
    scale_color_manual(values = c(color.set[2], color.set[3], color.set[4], color.set[1])) + theme1 +
    theme(axis.text.x = element_text(angle = 45, vjust = 0.5)) +
    annotate("segment", x = 1, xend = 3, y = 0.96, yend = 0.96, color = "black", size = 2) +
    annotate("text", x = 2, y = 0.965, size = 10, label = paste("P =", round(test$p.value, 5))) +
    ggtitle("B")

png(filename = "../figures/supplemental/sfigure1b.png", width = 500, height = 1000)
print(sfigure1b)
dev.off()
#+end_src

#+RESULTS:
[[file:../figures/supplemental/sfigure1b.png]]

*** Supplemental Figure 1C: PCA analysis
#+begin_src R :session *R* :exports none :results graphics :file ../figures/supplemental/sfigure1c.png :eval yes :tangle figure_Rscripts/supplemental.R
## PCA analysis ------------------------------------------------------
## Load dataset from file
data.dir <- "../results/supplemental"
df <- readr::read_csv(file.path(data.dir, "DESeq2-normalized-counts.csv"))
## rename for SeqRetriever compatibility
df <- df[,-grep("hES", colnames(df))]
num.data <- df[,sapply(df,is.numeric)]
group <- gsub('.{2}$', '', colnames(num.data))
group <- gsub("_", " ", group)
group <- gsub("in vivo", "tx", group)

## pca.data <- num.data[apply(num.data, 1, sd, na.rm=TRUE) != 0,]
## calculate variance by row (gene)
var <- apply(num.data, 1, sd, na.rm=TRUE)
## adjust cut off according to variance percentile
pca.data <- num.data[var > quantile(var, 0.2) & var != 0,]
cor1 <- cor(pca.data, method = "pearson")
pca <- prcomp(t(pca.data),scale = TRUE,center = TRUE)
scores <- data.frame(colnames(pca.data), pca$x[,1:ncol(pca$x)],group)

index <- data.frame(group = as.vector(unique(scores$group)),
                    ellipse = c("mature", "immature","immature", "mature"))

scores <- plyr::join(scores, index, by = 'group')


## PCA plot
## function to format decimals as precentage
percent <- function(x, digits = 2, format = "f", ...) {
  paste0(formatC(100 * x, format = format, digits = digits, ...), "%")
}

library(ggplot2)
library(RColorBrewer)
sfigure1c <- qplot(x = PC1, y = PC2, data = scores) +  
    geom_point(shape = 21,aes(fill = factor(group)), size = 10, color = "white") +
    scale_fill_manual(values = colorRampPalette(brewer.pal(length(unique(scores$group)), "Set1"))(length(unique(scores$group)))) +
    theme1 +
   # theme(legend.position="bottom",
         # legend.background = element_rect(colour = "white"),
        #  legend.key = element_rect(color = "white",fill = "white"),
#	  panel.border = element_rect(fill = NA, color = "white")) +
    theme(legend.position="bottom",
          legend.background = element_rect(colour = "white"),
          legend.key = element_rect(color = "white",fill = "white"),
	  panel.border = element_rect(fill = NA, color = "grey70"),
          legend.title = element_text(size = 32),
          legend.text = element_text(size = 24)) +
    guides(fill = guide_legend(title = "Epithelium", nrow = 4, byrow=TRUE, order =1),
           color = guide_legend(title = "Status", nrow = 2, byrow=TRUE, order =2)) +
    coord_fixed(ratio = 1) +
    xlab(paste("PC1 (",percent(round(summary(pca)$importance[2,1],4)),")",sep = "")) +
    ylab(paste("PC2 (",percent(round(summary(pca)$importance[2,2],4)),")",sep = "")) +
    stat_ellipse(type = "t", linetype = 2, size = 2, aes(color = factor(ellipse))) + 
    ggtitle("C")

png(filename = "../figures/supplemental/sfigure1c.png", width = 1000, height = 1000)
print(sfigure1c)
dev.off()

#+end_src

#+RESULTS:
[[file:../figures/supplemental/sfigure1c.png]]

*** DESeq2 expression counts
**** importing data from kallisto output 
#+begin_src R :session *R* :results silent :exports none :eval yes :tangle figure_Rscripts/supplemental.R
## Enteroids ONLY processing
## Differential expression of kallisto results with DESeq2

## read in table with sample metadata
## read in table with sample metadata
samples <- readr::read_csv(file = "../data/RNA-seq/sfigure1_sample_sheet.csv")
## remove hES samples
samples <- subset(samples, samples$description != "hES")

## setup access to kallisto read files
files <- file.path(samples$directory,
                   samples$file_name,
                   "abundance.h5")

## set sample names as description_rep#_seq_rep#
names(files) <- paste0(samples$description,"_",
                       samples$rep,"_L00",samples$seq_rep)

## check that all files are found
if (all(file.exists(files)) == FALSE) {
    print("kallisto files not found")
    stop()
}

## associate transcripts with gene IDs
## create biomart reference
mart <- biomaRt::useMart(biomart = "ENSEMBL_MART_ENSEMBL",
  dataset = "hsapiens_gene_ensembl",
  host = 'ensembl.org')
## create index of gene names
tx2gene <- biomaRt::getBM(attributes = c("ensembl_transcript_id",
                                         "external_gene_name"),
                          mart = mart)

## import kallisto data and generate count dataframe (dds)
## http://bioconductor.org/packages/release/bioc/vignettes/tximport/inst/doc/tximport.html
library(readr)
txi <- tximport::tximport(files, type = "kallisto", tx2gene = tx2gene)

## export abundance counts
data.dir <- "../results/supplemental"
write.csv(txi$abundance, file = file.path(data.dir,"tximport_abundance counts_noPSC.csv"))

library(DESeq2)
## https://bioconductor.org/packages/devel/bioc/vignettes/DESeq2/inst/doc/DESeq2.html
dds <- DESeq2::DESeqDataSetFromTximport(txi,
                                        colData = samples,
                                        design = ~ status)
## collapse technical replicates
ddsColl <- DESeq2::collapseReplicates(object = dds,
                                      groupby = dds$sample_id, 
                                      run = dds$seq_rep,
                                      renameCols = TRUE)

## pre-filter out counts < 1
dds <- dds[rowSums(counts(dds)) > 1, ]
ddsColl <- ddsColl[rowSums(counts(ddsColl)) > 1, ]

## write out normalized expression counts
ddsColl <- DESeq2::estimateSizeFactors(ddsColl)
ddsCollcounts <- DESeq2::counts(ddsColl, normalized = TRUE)
## give the columns better names
colnames(ddsCollcounts) <- paste0(colData(ddsColl)@listData$status,"_",
                                  colData(ddsColl)@listData$origin,"_",
                                  colData(ddsColl)@listData$rep)
## write expression matrix to file
write.csv(ddsCollcounts, file =  file.path(data.dir,"DESeq2-normalized-counts_noPSC.csv"))
save(ddsColl, file = file.path(data.dir, "dds2.Rdata"))
rm(list = ls())
#+end_src

#+begin_src R :session *R* :results silent :exports none :eval yes :tangle figure_Rscripts/supplemental.R
## enable parallel processes
library("BiocParallel")
register(MulticoreParam(4))
load("../results/supplemental/dds2.Rdata")
## setup multifactor design
ddsMF <- ddsColl
DESeq2::design(ddsMF) <- ~ status

## Likelihood ratio test (ANOVA-like)
ddsMF <- DESeq2::DESeq(ddsMF, test = "LRT", reduced = ~1, parallel = TRUE)
res <- DESeq2::results(ddsMF)

## need to specify Wald test when later making specific comparisons
res.ivit <- DESeq2::results(ddsMF, test ="Wald",
                           contrast = c("status", "in_vivo", "in_vitro"))
res.af <- DESeq2::results(ddsMF, test ="Wald",
                           contrast = c("status", "adult", "fetal"))
## write out stats results
data.dir <- "../results/supplemental"
write.csv(res.ivit, file = file.path(data.dir,"in-vivo_in-vitro_Wald.csv"))
write.csv(res.af, file = file.path(data.dir,"adult_fetal_Wald.csv"))
 #+end_src

#+begin_src R :session *R* :results silent :exports none :eval yes :tangle figure_Rscripts/supplemental.R
## Expression plot -------------------------------------------------------------
## Load dataset from file
data.dir <- "../results/supplemental"
## adult/fetal
adfe <- readr::read_csv(file = file.path(data.dir,"in-vivo_in-vitro_Wald.csv"))
## in vivo/in vitro
ivit <- readr::read_csv(file = file.path(data.dir,"adult_fetal_Wald.csv"))

## subset columns of interest
library(magrittr)
adfe <- adfe %>% dplyr::select(X1, log2FoldChange, padj) %>% dplyr::rename(adfe_log2 = log2FoldChange, adfe_padj = padj)
ivit <- ivit %>% dplyr::select(X1, log2FoldChange, padj) %>% dplyr::rename(ivit_log2 = log2FoldChange, ivit_padj = padj)

## join dataframes
df <- dplyr::left_join(adfe, ivit, by = 'X1')

## subset data prior to plotting
df <- subset(df, df$adfe_padj < 0.05 | df$ivit_padj < 0.05, na.rm = TRUE)

## number of DE genes on each axis, reference in text
num.DE.si <- length(rownames(subset(df, df$adfe_padj < 0.05)))
num.DE.hio <- length(rownames(subset(df, df$ivit_padj < 0.05)))
## number of fetal signature genes
num.fetal <- length(rownames(subset(df, df$adfe_log2 < 0 &  df$ivit_log2 < 0)))
## number of adult signature genes
num.adult <- length(rownames(subset(df, df$adfe_log2 > 0 &  df$ivit_log2 > 0)))

## create adult/in vitro gene set
adult.tHIO.gs <- df[df$adfe_log2 > 0 &
                        df$ivit_log2 > 0 &
                        df$adfe_padj < 0.001  &
                        df$ivit_padj < 0.001,] %>% dplyr::rename(SYMBOL = X1)
write.csv(adult.tHIO.gs, file = file.path(data.dir,"adult-tHIO-gene-set.csv"))

## create adult/in vitro gene set
adult.tHIO.gs <- df[df$adfe_log2 > 1 &
                        df$ivit_log2 > 1 &
                        df$adfe_padj < 0.05  &
                        df$ivit_padj < 0.05,] %>% dplyr::rename(SYMBOL = X1)
write.csv(adult.tHIO.gs, file = file.path(data.dir,"adult-tHIO-gene-set2.csv"))

## create adult/in vitro gene set
adult.tHIO.gs <- df[df$adfe_log2 > 0 &
                        df$ivit_log2 > 0 &
                        df$adfe_padj < 0.05  &
                        df$ivit_padj < 0.05,] %>% dplyr::rename(SYMBOL = X1)
write.csv(adult.tHIO.gs, file = file.path(data.dir,"adult-tHIO-gene-set3.csv"))

## linear regression
model1d <- lm(df$adfe_log2 ~ df$ivit_log2)
#+end_src
**** Generate plot
#+begin_src R :session *R* :exports none :results graphics :file ../figures/supplemental/sfigure1d.png :eval yes :tangle figure_Rscripts/supplemental.R
library(ggplot2)
source("ggplot2-themes.R")

sfigure1d <- ggplot(data = df, aes(x = ivit_log2, y = adfe_log2)) +
    stat_density_2d(aes(fill = ..density..), geom = "raster", na.rm = TRUE, contour = FALSE) +
    xlim(c(-1.5, 1.5)) +
    ylim(c(-1.5,1.5)) +
    theme1 +
    scale_fill_distiller("Density", palette = "Blues", direction = 1) +
    labs(x = expression(Log[2]*"FC(in vivo HIO / in vitro HIO)"),
         y = expression(Log[2]*"FC(adult SI / fetal SI)")) +
    annotate("segment", size =1, x = 0, xend = 0,  y = -1.5, yend =1.5, color = "white", linetype = "dashed") +
    annotate("segment", size =1, x = -1.5, xend = 1.5,  y = 0, yend = 0, color = "white", linetype = "dashed") +
    theme(legend.position = "bottom",
          axis.title = element_text(size = 32),
          legend.title = element_text(size = 24),
          legend.text = element_text(size = 12),
          panel.border = element_rect(fill = NA, color = "white")) +
    ggtitle("D")

png(filename = "../figures/supplemental/sfigure1d.png", width = 1000, height = 1000)
print(sfigure1d)
dev.off()
#+end_src

#+RESULTS:
[[file:../figures/supplemental/sfigure1d.png]]
*** Multipanel Supplemental Figure 1
 #+begin_src R :session *R* :exports none :results graphics :file ../figures/supplemental/sfigure1_multipanel.png :width 2100 :height 2100 :eval yes :tangle figure_Rscripts/supplemental.R
## Figure 1 multipanel ---------------------------------------------------------
library(ggplot2)

## PDF output
pdf(file = "../figures/supplemental/sfigure1_multipanel.pdf", width = 8400/300, height = 8400/300, onefile = FALSE)
gridExtra::grid.arrange(sfigure1a, sfigure1b, sfigure1c, sfigure1d, 
             layout_matrix = rbind(c(1,1,2,2),
                                   c(3,3,4,4)))
dev.off()

## PNG output
png(filename = "../figures/supplemental/sfigure1_multipanel.png", width = 2100, height = 2100)
gridExtra::grid.arrange(sfigure1a, sfigure1b, sfigure1c, sfigure1d, 
             layout_matrix = rbind(c(1,1,2,2),
                                   c(3,3,4,4)))
dev.off()


 #+end_src

 #+RESULTS:
 [[file:../figures/supplemental/sfigure1_multipanel.png]]

** Figure 1 - Supplement 2
#+begin_src R :session *R* :exports none :eval no :tangle figure_Rscripts/supplemental.R
library(ggplot2)
library(ggtree)
library(magrittr)
source("ggplot2-themes.R")
tree <- read.tree(file = "../data/ecor2/ECOR2-50.nwk")
plot <- ggtree(tree, size = 2) %>% ggtree::collapse(node = 86)
plot <- plot + geom_treescale(width = 0.015) + #xlim(NA, 100) +
  #  geom_hilight(76, "steelblue") +
    geom_tiplab(size = 7) +
    geom_cladelabel(node = 53,
                    label = "non-pathogenic E. coli",
                    align = FALSE,
                    offset = 0.01,
                    offset.text = 1e-3,
                    fontsize = 12,
                    barsize = 2) +
    #geom_text2(aes(subset=!isTip, label=node), hjust=-.3) + 
    geom_tippoint(aes(subset=(node == 26)),
                  size = 8,
                  shape = 21,
                  fill = color.set[1],
                  color = color.set[1])

    
## PDF output
pdf(file = "../figures/figure1/sfigure1-2_tree.pdf", width = 9000/300, height = 7500/300, onefile = FALSE)
print(plot)
dev.off()
#+end_src

#+RESULTS:
: 3
** Figure 1 - Supplement 3
*** Test 24 h ECOR2 growth in LB vs. PBS microinjection

 #+begin_src R :session *R* :exports results :results graphics :file ../data/figure1/culture_optimization/ECOR2growthLBvPBS.png :width 400 :height 400 :eval yes :tangle figure_Rscripts/supplemental.R
## Figure 1 - Supplement 3
# Import dataset in SRC header
library(ggplot2)
source("ggplot2-themes.R")
library(scales)      

cfudata <- readr::read_csv(file = "../data/figure1/culture_optimization/LB_pbs_data.csv")

# T-test
stats <- t.test(cfudata[cfudata$media == "LB",]$CFU_HIO,cfudata[cfudata$media == "PBS",]$CFU_HIO,alternative= "greater", var.equal =TRUE)
lbplot <- ggplot(cfudata, aes( x= factor(media), y = CFU_HIO)) +
    geom_boxplot(aes(color = factor(media)), size = 2) +
   # geom_dotplot(binaxis='y', stackdir='center', dotsize=1) +
    ylab("CFU/HIO") + xlab("") +
    annotate("text", y=4000000, x= 2,
             label = paste("P = ", format(stats$p.value,digits = 1)),
             color="grey30",size =10) +
    scale_y_log10(breaks = trans_breaks("log10", function(x) 10^x),
                  labels = trans_format("log10", math_format(10^.x))) +
    theme1 + ggtitle("B")

print(lbplot)
 #+END_SRC

 #+RESULTS:
 [[file:../data/figure1/culture_optimization/ECOR2growthLBvPBS.png]]

*** Antibiotic use
 #+begin_src R :session *R* :exports none :results graphics :file ../data/figure1/culture_optimization/antibiotics.png :width 400 :height 400 :eval yes :tangle figure_Rscripts/supplemental.R
data <- read.table("../data/figure1/culture_optimization/ECOR2growth.csv",
                   header = TRUE, sep = ",",
                   stringsAsFactors=FALSE)
stats <- t.test(data[data$sample == "Remove abx",]$mean,
                data[data$sample == "Retain abx",]$mean,
                alternative= "greater", var.equal =TRUE)
library(ggplot2)
source("ggplot2-themes.R")
library(scales)      
fig1b <- ggplot(data, aes(x=sample, y=mean,)) +
    geom_boxplot(aes(color=sample), size = 2) +
    ylab("CFU/HIO") +
    xlab("") + theme1 + 
    scale_y_log10(breaks = trans_breaks("log10", function(x) 10^x),
                  labels = trans_format("log10", math_format(10^.x))) +
    annotation_logticks(sides="l",size= 2) +
    annotate("text", y=400000, x= 2,
             label = paste(" P = ",round(stats$p.value,digits = 3)),
             color = "grey30", size = 8) + ggtitle("C")

print(fig1b)
 #+end_src

 #+RESULTS:
 [[file:../data/figure1/culture_optimization/antibiotics.png]]
*** Media efficacy against E. coli
 #+begin_src R :session *R* :exports none :results graphics :file ../data/figure1/culture_optimization/zoi.png :width 800 :height 1000 :eval yes :tangle figure_Rscripts/supplemental.R
## import data
data <- readr::read_csv(file = "../data/figure1/culture_optimization/zoi_data.csv", col_names = TRUE)

## convert measured pixels to um
## 1mm = 106 px
data$mm <- data$Length/106

## add group designations
data$treatment <- rep(c("ENR + abx", "ENR after washout"), times = length(data$Label)/2)

library(ggplot2)
source("ggplot2-themes.R")
source("custom_fun.R")

library(ggstance)

data$treatment <- factor(data$treatment, levels = c( "ENR after washout", "ENR + abx"))

stats <- t.test(data[data$treatment == "ENR after washout",]$mm,
                data[data$treatment == "ENR + abx",]$mm,
                alternative= "less", var.equal =TRUE)

zoi <- ggplot(data, aes(y = mm, x = treatment,)) +
    geom_boxplot(aes(color=treatment), size = 1) +
    xlab("") +
    ylab("Inhibition zone diameter (mm)") + theme1 + 
    annotation_logticks(sides="l",size= 2) +
    annotate("text", y= 1, x= 1,
             label = paste("P = ", format(stats$p.value,digits = 1)),
             color="grey30",size =10) +
    theme1 +
    theme(axis.text.x = element_text(angle = 45,
                                     vjust = 1,
                                     hjust =1))

fig <- png2ggplot("../data/figure1/culture_optimization/representative_zoi.png") +
    img.theme + coord_fixed(ratio = 1/2) + ggtitle("D")

layout2 <- rbind(c(1),
                c(2),
                c(2))


gridExtra::grid.arrange(fig, zoi, layout_matrix = layout2)
 #+end_src

 #+RESULTS:
 [[file:../data/figure1/culture_optimization/zoi.png]]
*** Multipanel Figure 1 - Supplement 3
#+begin_src R :session *R* :exports none :results graphics :file ../figures/figure1/sfigure1-3_multipanel.png :width 2000 :height 2000 :eval yes :tangle figure_Rscripts/figure1.R :tangle figure_Rscripts/supplemental.R
## Figure 1 - Supplement 3 multipanel ---------------------------------------------------------
library(ggplot2)
library(gridExtra)
source("ggplot2-themes.R")
source("custom_fun.R")

schematic <- png2ggplot(filename = "../figures/figure1/schematic.png") +
    coord_fixed(ratio = 1.5) + ggtitle("A") + img.theme

layout <- rbind(c(1,1,1,2),
                c(1,1,1,3),
                c(1,1,1,4),
                c(1,1,1,4))


sfig3d <- gridExtra::grid.arrange(fig, zoi, layout_matrix = layout2)

## PDF output
pdf(file = "../figures/figure1/sfigure1-3_multipanel.pdf", width = 7500/300, height = 7500/300, onefile = FALSE)
gridExtra::grid.arrange(schematic, lbplot, fig1b, sfig3d, 
             layout_matrix = layout)
dev.off()

#+end_src

#+RESULTS:
[[file:../figures/figure1/sfigure1-3_multipanel.png]]


** Figure 3 - Supplement 1

*** Pathway analysis 
#+begin_src R :session *R* :results silent :exports none :eval yes

## import data
library(magrittr)
data <- readr::read_csv(file = "../results/ECOR2HIO_24-96-RNAseq/ECOR2_over_PBS_48hr.csv") %>%
    dplyr::rename(external_gene_name = X1)
## convert to pathview format
library(pathview)
entrez.names <- id2eg(ids = data$external_gene_name, category ="SYMBOL", org = "Hs")
diff.mat <- data$log2FoldChange
names(diff.mat) <- data$external_gene_name
entrez.data <- mol.sum(mol.data = diff.mat, id.map = entrez.names, sum.method = "sum")

## vecor of multiple pathways to query
setwd("../results/ECOR2HIO_24-96-RNAseq/KEGG-pathview")


pv.out <- pathview(gene.data = entrez.data,
                   pathway.id = "hsa04110",
                   species = "hsa",
                   out.suffix = "cellcycle_48",
                   low = list(gene = color.set[2],
                              cpd = "blue"),
                   high = list(gene = color.set[1]),
                   mid = list(gene = "white"),
                   kegg.native = FALSE,
                   cex = 0.7,
                   pdf.size = c(10,10))

setwd("../../../src")



#+end_src


** Figure 1 - Supplement 2 
Minimum density /E. coli/ required to establish colonization
#+begin_src R :session *R* :exports none :eval yes :tangle figure_Rscripts/supplemental.R
,#+begin_src R :session *R* :exports none :results graphics :file ../figures/supplemental/sfigure1_supp2.pdf :eval yes :tangle figure_Rscripts/supplemental.R
## Minimum density /E. coli/ required to establish colonization 

## E. coli growth in HIOs
## Read in data table
data <- read.table("../data/figure1/ECOR2growth_fig1.csv", header = TRUE, sep = ",", stringsAsFactors=FALSE)
## Index of CFU/HIO injected for each Sample condition (A-G)
sample.table <- read.table("../data/figure1/sample_table_fig1.csv", header = TRUE, sep = ",", stringsAsFactors=FALSE)
## Generate index of rows in sample table that match
## the sample labels in data
id <- match(data$sample,sample.table$sample)
## create column in data of of CFU/HIO values in sample table
## in matching rows listed in id
data$inject <- sample.table[id,]$value
data$fold <- data$mean/data$inject
data$increase <- ifelse(data$mean > data$inject,"increase","decrease")
  
group <- aggregate(mean ~ inject, data = data, FUN = mean)
group.sem <- aggregate(mean ~ inject, data = data,
                       FUN = function(x) sd(x)/sqrt(length(x)))
group$sem <- group.sem$mean

## ANOVA of mean CFU/HIO among colonized HIOs
fit <- aov(mean ~ sample, data = data[data$inject >1,])
fit2 <- lm(log(data[data$inject > 0 & data$fold !=0,]$fold) ~ log(log(data[data$inject > 0 & data$fold !=0,]$inject)), data[data$inject > 0 & data$fold !=0,])

p1c <- summary(fit)[[1]][["Pr(>F)"]][[1]]

## % colonized at < 5 CFU
pct1 <- round(100*(1-length(rownames(data[data$inject < 5 & data$inject > 1 & data$mean < 1,] ))/length(rownames(data[data$inject < 5 & data$inject > 1 & data$mean > 1,] ))),1)

## % colonized at > 100 CFU
pct2 <- round(100*(1-length(rownames(data[data$inject > 100 & data$mean < 1,] ))/length(rownames(data[data$inject < 5 & data$inject > 1 & data$mean > 1,] ))),2)

## plot
library(ggplot2)
library(grid)
library(scales)
source("ggplot2-themes.R")

scientific_10 <- function(x) {
    parse(text=gsub("e", " %*% 10^", scientific_format()(x)))
}

## generate stats string for plot
source("custom_fun.R")
stats <- lm_eqn(data[data$inject > 0 & data$fold !=0,],
                data[data$inject > 0 & data$fold !=0,]$inject,
                data[data$inject > 0 & data$fold !=0,]$mean)


fig2c <- ggplot(data, aes(x=inject, y=mean)) +
    geom_smooth(
                aes(x=inject, y=mean), colour = "black",
                size = 2,
                method = "lm",
                formula = y ~ x,
                level = 0.95) +
  #  geom_boxplot(aes(group = inject), size =2, fill = color.set[2]) +
    geom_point(size = 8, shape =21, fill = color.set[2]) +
    scale_fill_brewer(palette = "Set1") + 
    ylab(latex2exp::TeX("$\\textbf{CFU$\\cdot{}HIO^{-1}_{$\\textit{t}=24}}$")) +
    xlab("CFU injected per HIO") + theme1 +
    scale_y_log10(limits = c(1,50000000),
                  breaks = trans_breaks("log10", function(x) 10^x),
                  labels = trans_format("log10", math_format(10^.x))) +
    scale_x_log10(limits = c(1,100000),
                  breaks = trans_breaks("log10", function(x) 10^x),
                  labels = trans_format("log10", math_format(10^.x))) +    
    annotation_logticks(sides = "bl", size = 2,
                        short = unit(.75,"mm"),
                        mid = unit(3,"mm"),
                        long = unit(5,"mm")) +
        ## size of stats label
    annotate("text",x = 5e3, y = 5e7,
                           label = substr(stats,62,150),
                           parse = TRUE,
                           size = 10) +


pdf(file = "../figures/supplemental/sfigure1_supp2.pdf", width = 10, height = 10, onefile = FALSE)
print(fig2c)
dev.off()
#+end_src

#+RESULTS:
: 1
** Figure 5 - Supplement 1
*** Supplemental NF-kB pathway heatmap
**** Data import and manipulation 
#+begin_src R :session *R* :results silent :exports none :eval yes :tangle figure_Rscripts/supplemental.R
## FIGURE 5 - Supplement 1 ---------------------------------------------------
## Figure 5 Supplement 1A: RNA-seq NF-kb heatmap
## import data
## Load dataset from file
data.dir <- "../results/ECOR2HIO_24-96-RNAseq/"
library(magrittr)
df <- readr::read_csv(file = file.path(data.dir,"complete-dataset_DESeq2-normalized-counts.csv")) %>% dplyr::rename(SYMBOL = X1)

## list of genes to extract
paths <- readr::read_csv("../results/ECOR2_hypoxia_nfkb/plotted-nfkb_complete-goANDreactome-results.csv")

nfkb <- paths[grep("NF-kB", paths$Description),]$geneID
nfkb.path <- paths[grep("NF-kB", paths$Description),]$Description

nfkb.genes <- sapply(nfkb, 
                    function(x) {
                        v <- stringr::str_split(x, "/")
                                         })
nfkb.genes.list <- c(unique(unlist(nfkb.genes)))
#nfkb.genes <- nfkb.genes[-grep("MUC12|B3GNT6|ADAM|IL|CHST4", nfkb.genes)]



data.sub <- df[which(df$SYMBOL %in% nfkb.genes.list),]
melt.data <- reshape::melt(as.data.frame(data.sub), id.vars = "SYMBOL")
melt.data$variable <- gsub("\\_[0-9]*$", "", melt.data$variable)
melt.data <- tidyr::separate(melt.data, col = variable, into = c('treatment', 'hr'), sep = "-")
#melt.data <- dplyr::left_join(melt.data, nfkb.genes, by = 'SYMBOL')
#melt.data$hr <- as.numeric(melt.data$hr)


library(magrittr)
## calculate mean and stats
data.mean <- dplyr::group_by(melt.data, SYMBOL, hr) %>%
    dplyr::summarise(stdev = sd(value),
                     num = n(),
                     iqr = IQR(value),
                     min = min(value),
                     max = max(value),
		     mean = mean(value),
                     median = median(value))

data.mean$sem <- data.mean$stdev/sqrt(data.mean$num)

## claculate zscore
scale_this <- function(x) as.vector(scale(x))

melt.data$hr <- as.numeric(melt.data$hr)
data.scaled <- dplyr::group_by(melt.data, SYMBOL) %>%
    dplyr::mutate(zscore = scale_this(value)) %>%
    dplyr::group_by(SYMBOL, hr) %>%
    dplyr::summarize(mean_zscore = mean(zscore))

data.cor <- dplyr::group_by(melt.data, SYMBOL) %>%
    dplyr::summarize(cor = cor(hr, value))

top.cor <- data.cor[data.cor$cor > quantile(data.cor$cor, 0.75) | data.cor$cor < quantile(data.cor$cor, 0.25),]

## data.scaled$category <- "Glycotransferases"
## data.scaled[grep("MUC", data.scaled$SYMBOL),]$category <- "Mucins"
data.scaled <- data.scaled[which(data.scaled$SYMBOL %in% top.cor$SYMBOL),]
## data.scaled <- data.scaled[order(data.scaled$hr,-data.scaled$mean_zscore),]
## data.scaled$SYMBOL <- factor(data.scaled$SYMBOL,
##                          levels = unique(data.scaled$SYMBOL))
data.scaled$hr <- as.character(data.scaled$hr)
data.scaled$hr <- factor(data.scaled$hr, levels = c("0", "24", "48", "96"))
dat <- dplyr::select(data.scaled, hr, mean_zscore) %>% tidyr::spread(hr, mean_zscore)
ord <- hclust(dist(dat[,2:5], method = "euclidean"), method = "ward.D")$order

data.scaled$SYMBOL <- factor(data.scaled$SYMBOL, levels = unique(data.scaled$SYMBOL)[ord])

#+end_src

**** Generate plot
#+begin_src R :session *R* :exports none :results graphics :file ../figures/figure5/figure5-NFkB_supplement.png :eval yes :tangle figure_Rscripts/supplemental.R
## plot
library(ggplot2)
source("ggplot2-themes.R")

figure5s1a <- ggplot(data.scaled,
              aes(y = SYMBOL, x = factor(hr))) +
    geom_tile(stat = "identity", aes(fill = mean_zscore)) +
   # facet_grid(category ~ ., scales = "free_y", space = "free", switch = "y") +
    scale_fill_distiller(name = "Z-score ", palette = "RdYlBu") +
    scale_y_discrete(position = "right") +
    ylab("") + xlab("") + 
    theme1 + 
    theme(strip.text =  element_text(size = 32),
          legend.position = "bottom",
	  legend.title = element_text(size = 32),
	  legend.key.size = unit(1.5,"cm"),
	  panel.spacing = unit(2, "lines"),
	  panel.border = element_blank()) +
	  coord_fixed(ratio =0.5) + ggtitle("A")
pdf(file = "../figures/figure5/figure5-NFkB_supplement.pdf", width = 2500/300, height = 4500/300, onefile = FALSE)
print(figure5s1a)
dev.off()

png(filename = "../figures/figure5/figure5-NFkB_supplement.png", width = 550, height = 1000)
print(figure5s1a)
dev.off()
ggsave(filename = "../figures/figure5/figure5-NFkB_supplement.eps", 
       plot = figure5s1a, 
       width = 12, height = 20)
#+end_src

#+RESULTS:
[[file:../figures/figure5/figure5-NFkB_supplement.png]]


*** Multi-volcano plot 
#+begin_src R :session *R* :exports none :results graphics :file ../figures/figure5/NFKBi_multivolcano_figure.png :width 1000 :height 1000 :eval yes :tangle figure_Rscripts/supplemental.R
## load data and set directory for output
## plotting

library(ggplot2)
library(ggstance)
source("ggplot2-themes.R")
library(RColorBrewer)
red.set <- brewer.pal(n = 8, name = "Reds")

## multi-volcano ---------------------------------------------------------------
data.dir <- "../results/ECOR2_hypoxia_nfkb"
library(magrittr)
ecor2.pbs <- readr::read_csv(file = file.path(data.dir,"ECOR2_over_PBS.csv")) %>% dplyr::rename(SYMBOL = X1)
hk.pbs <- readr::read_csv(file = file.path(data.dir,"ECOR2-HK_over_PBS.csv")) %>% dplyr::rename(SYMBOL = X1)
hypoxia.pbs <- readr::read_csv(file = file.path(data.dir,"hypoxia_over_PBS.csv")) %>% dplyr::rename(SYMBOL = X1)
ecor2i.pbs <- readr::read_csv(file = file.path(data.dir,"ECOR2-NFKBi_over_PBS.csv")) %>% dplyr::rename(SYMBOL = X1)
nfkbi.pbs <- readr::read_csv(file = file.path(data.dir,"NFkBi_over_PBS.csv")) %>% dplyr::rename(SYMBOL = X1)
hki.pbs <- readr::read_csv(file = file.path(data.dir,"ECOR2-HK_over_ECOR2-HK-NFKBi.csv")) %>% dplyr::rename(SYMBOL = X1)
hypoxiai.pbs <- readr::read_csv(file = file.path(data.dir,"ECOR2-HK_over_ECOR2-HK-NFKBi.csv")) %>% dplyr::rename(SYMBOL = X1)

## add comparison ID
ecor2.pbs$comparison <- "E. coli"
hk.pbs$comparison <- "HK-E. coli"
hypoxia.pbs$comparison <- "1% O2"
ecor2i.pbs$comparison <- "E. coli + SC-514"
nfkbi.pbs$comparison <- "SC-514 alone"
hki.pbs$comparison <- "HK-E. coli + SC-514"
hypoxiai.pbs$comparison <- "1% O2 + SC-514"

## bind in single dataframe
data <- rbind(ecor2.pbs,
              hk.pbs,
              hypoxia.pbs,
              ecor2i.pbs,
	      nfkbi.pbs,
	      hki.pbs,
	      hypoxiai.pbs)

plot.data <- data

plot.data$comparison <- factor(plot.data$comparison,
                               levels = rev(c("E. coli", 
                                          "1% O2",
                                          "HK-E. coli",
					  "SC-514 alone",
                                          "E. coli + SC-514",
					  "HK-E. coli + SC-514",
					  "1% O2 + SC-514")))

plot.data$status <- ifelse(plot.data$padj > 0.05 | is.na(plot.data$padj), "a",
                    ifelse(plot.data$log2FoldChange > 0, "b", "c"))

plot.data <- plot.data[order(plot.data$status),]

library(ggplot2)
source("ggplot2-themes.R")
figure5s1c <- ggplot(data = plot.data, aes(y = comparison, x = log2FoldChange)) +
    geom_point(position = position_jitter(w = 0.33), aes(fill = status, color = status), shape = 21) +
    scale_fill_manual(values = c("grey70", color.set[1], color.set[2])) +
    scale_color_manual(values = c("grey70", color.set[1], color.set[2])) +
    xlim(c(-5,5)) +
    ylab("") +
    xlab(expression(paste("log"[2],"FC over PBS"))) +
    theme1 + 
    theme(axis.text.x = element_text(size = 20)) + ggtitle("C")

print(figure5s1c)
#+end_src

#+RESULTS:
[[file:../figures/figure5/NFKBi_multivolcano_figure.png]]

*** GO analysis
#+begin_src R :session *R* :results silent :exports none :eval no :tangle figure_Rscripts/supplemental.R
data.dir <- "../results/ECOR2_hypoxia_nfkb"
library(magrittr)
df <- readr::read_csv(file = file.path(data.dir,"NFkBi_over_PBS.csv")) %>% dplyr::rename(SYMBOL = X1)

library(clusterProfiler)
library(org.Hs.eg.db)
## SC-514-regualted genes
up.ids <- bitr(df[df$padj < 0.05 & df$log2FoldChange > 0,]$SYMBOL,
               fromType = "SYMBOL",
               toType = "ENTREZID",
               OrgDb = "org.Hs.eg.db")

## background gene set
all.ids <- bitr(df$SYMBOL,
                fromType = "SYMBOL",
                toType = "ENTREZID",
                OrgDb = "org.Hs.eg.db")

## over-representation test, Up-regualted
go.ec <- enrichGO(gene = up.ids$ENTREZID,
                  universe = all.ids$ENTREZID,
                  OrgDb = "org.Hs.eg.db",
                  ont = "BP",
                  pAdjustMethod = "none",
                  pvalueCutoff = 0.05,
                  qvalueCutoff = 0.05,
                  readable = TRUE)

## KEGG over-representation test
kegg.ec <- enrichKEGG(gene = up.ids$ENTREZID,
                      organism = 'hsa',
                      pvalueCutoff = 0.05)
library(ReactomePA)
## KEGG over-representation test
reactome.ec <- enrichPathway(gene = up.ids$ENTREZID,
                     # organism = 'hsa',
                      pvalueCutoff = 0.05, readable = TRUE)

## add column annotating source
reactome.ec@result$DATABASE <- "REACTOME"
kegg.ec@result$DATABASE <- "KEGG"
go.ec@result$DATABASE <- "GO"

## bind all over-representation test results
enrich.result.ec <- rbind(reactome.ec@result,
                          go.ec@result,
			  kegg.ec@result)

write.csv(enrich.result.ec, file = file.path(data.dir, "nfkbi_up_pathways.csv"))

## SC-514-regualted genes
up.ids <- bitr(df[df$padj < 0.05 & df$log2FoldChange < 0,]$SYMBOL,
               fromType = "SYMBOL",
               toType = "ENTREZID",
               OrgDb = "org.Hs.eg.db")

## background gene set
all.ids <- bitr(df$SYMBOL,
                fromType = "SYMBOL",
                toType = "ENTREZID",
                OrgDb = "org.Hs.eg.db")

## over-representation test, Up-regualted
go.ec <- enrichGO(gene = up.ids$ENTREZID,
                  universe = all.ids$ENTREZID,
                  OrgDb = "org.Hs.eg.db",
                  ont = "BP",
                  pAdjustMethod = "none",
                  pvalueCutoff = 0.05,
                  qvalueCutoff = 0.05,
                  readable = TRUE)

## KEGG over-representation test
kegg.ec <- enrichKEGG(gene = up.ids$ENTREZID,
                      organism = 'hsa',
                      pvalueCutoff = 0.05)
library(ReactomePA)
## KEGG over-representation test
reactome.ec <- enrichPathway(gene = up.ids$ENTREZID,
                     # organism = 'hsa',
                      pvalueCutoff = 0.05, readable = TRUE)

## add column annotating source
reactome.ec@result$DATABASE <- "REACTOME"
kegg.ec@result$DATABASE <- "KEGG"
go.ec@result$DATABASE <- "GO"

## bind all over-representation test results
enrich.result.ec <- rbind(reactome.ec@result,
                          go.ec@result,
			  kegg.ec@result)
write.csv(enrich.result.ec, file = file.path(data.dir, "nfkbi_down_pathways.csv"))
#+end_src
**** Enriched pathways figure
 #+begin_src R :session *R* :exports none :results graphics :file ../figures/figure5/NFKBi_GO_pathways_figure.png :width 1500 :height 1000 :eval yes :tangle figure_Rscripts/supplemental.R
## import data
data.dir <- "../results/ECOR2_hypoxia_nfkb"
go.up <- readr::read_csv(file = file.path(data.dir, "nfkbi_up_pathways.csv"))
go.up$direction <- "Up-regulated by SC-514"
go.down <- readr::read_csv(file = file.path(data.dir, "nfkbi_down_pathways.csv"))
go.down$direction <- "Down-regulated by SC-514"
## combine datasets
go.data <- rbind(go.up, go.down)

library(magrittr)
go.data %<>% dplyr::select(Description, qvalue, DATABASE, direction) %>%
    dplyr::group_by(DATABASE, direction) %>%
    dplyr::mutate(pctile = ecdf(-log10(qvalue))(-log10(qvalue))) %>%
    dplyr::arrange(-pctile) %>%
    subset(.$pctile > 0.9)

go.data <- go.data[order(go.data$qvalue, decreasing = TRUE),]

go.data$Description <- factor(go.data$Description,
                                levels = unique(go.data$Description))

library(ggplot2)
library(ggstance)
source("ggplot2-themes.R")
figure5s1d <- ggplot(data = go.data, aes(x = -log10(qvalue),
                                   y = Description,
                                   fill = -log10(qvalue))) +
    geom_barh(stat = "identity") +
    facet_grid(direction ~ ., scales = "free_y", space = "free") +
    theme1 +
    ylab("") +
    scale_fill_gradient(expression(paste("-log"[10],"(P-value)")),
                        high = blue.set[8],
                        low = blue.set[4]) +
    theme(strip.text.x =  element_text(size = 24, face = "bold"),
          strip.text.y =  element_text(size = 32),
          strip.background = element_rect(color = "grey30", fill = "white", size = 2.5),
          panel.background = element_rect(color = NA, fill = "grey90"),
          legend.position = "bottom",
	  legend.title = element_text(size = 24),
          axis.text.y = element_text(size = 24),
	  axis.title = element_text(size = 24),
	  plot.subtitle = element_text(size = 26, hjust = 0.5, face = "bold"),
	  panel.spacing.x = unit(0.25, "lines"),
	  panel.spacing = unit(1.5, "lines"),
	  panel.border = element_blank(),
	  legend.key.size = unit(1,"cm")) + ggtitle("D")

print(figure5s1d)           
 #+end_src

 #+RESULTS:
 [[file:../figures/figure5/NFKBi_GO_pathways_figure.png]]


*** Gene set overlap
#+begin_src R :session *R* :exports none :results graphics :file ../figures/figure5/NFKBi_GO_venn_figure.png :width 1000 :height 1000 :eval yes :tangle figure_Rscripts/supplemental.R
## import datsets
library(magrittr)
gs1 <-readr::read_csv(file = "../results/supplemental/Figure5_Gene_set1.csv")$x
gs2 <-readr::read_csv(file = "../results/supplemental/Figure5_Gene_set2.csv")$x
nfkbi.dwn <- readr::read_csv(file = "../results/ECOR2_hypoxia_nfkb/NFkBi_over_PBS.csv")
nfkbi.dwn <- subset(nfkbi.dwn, nfkbi.dwn$padj < 0.05 & nfkbi.dwn$log2FoldChange < 0)$X1

library(VennDiagram)
source("ggplot2-themes.R")
venn.plot <- venn.diagram(list(gs1, gs2, nfkbi.dwn), NULL,
                          fill = c(color.set[1], color.set[2], color.set[3]),
                          alpha = 0.5,
                          lwd = 5,
                          cex = 4,
                          fontfamily = "sans",
                          lty = 0,
                          cat.font.family,
                          cat.fontfamily = "sans",
                          cat.cex = 2.5,
                          cat.pos = c(-30,30, 180),
                          cat.dist = c(0.08, 0.08,0.08),
                          category.names = c("Gene Set I\n(contact induced)",
                                              "Gene Set II\n(hypoxia-induced)",
                                              "Genes down-regulated\nby SC-514 at baseline"),
                          main.cex = 4,
                          main.fontfamily = "sans",
                          main.pos =c(0.5,0.025),
                          scaled = TRUE, euler.d = TRUE)

library(gridExtra)
library(grid)
figure5s1e <- grid.arrange(gTree(children=venn.plot), ncol = 1,
                         top = textGrob("E", hjust = 7,
                         gp = gpar(fontsize = 50, font =2)))

print(figure5s1e)
#+end_src

#+RESULTS:
[[file:../figures/figure5/NFKBi_GO_venn_figure.png]]

**** GO analysis of overlap
 #+begin_src R :session *R* :results silent :exports none :eval no :tangle figure_Rscripts/supplemental.R
data.dir <- "../results/ECOR2_hypoxia_nfkb"
library(magrittr)
df <- readr::read_csv(file = file.path(data.dir,"NFkBi_over_PBS.csv")) %>% dplyr::rename(SYMBOL = X1)

library(clusterProfiler)
library(org.Hs.eg.db)
## SC-514-regualted genes
gs1.ids <- bitr(intersect(gs1, nfkbi.dwn),
               fromType = "SYMBOL",
               toType = "ENTREZID",
               OrgDb = "org.Hs.eg.db")

## background gene set
all.ids <- bitr(df$SYMBOL,
                fromType = "SYMBOL",
                toType = "ENTREZID",
                OrgDb = "org.Hs.eg.db")

## over-representation test, Up-regualted
go.ec <- enrichGO(gene = gs1.ids$ENTREZID,
                  universe = all.ids$ENTREZID,
                  OrgDb = "org.Hs.eg.db",
                  ont = "BP",
                  pAdjustMethod = "none",
                  pvalueCutoff = 0.05,
                  qvalueCutoff = 0.05,
                  readable = TRUE)

## KEGG over-representation test
kegg.ec <- enrichKEGG(gene = gs1.ids$ENTREZID,
                      organism = 'hsa',
                      pvalueCutoff = 0.05)
library(ReactomePA)
## KEGG over-representation test
reactome.ec <- enrichPathway(gene = gs1.ids$ENTREZID,
                     # organism = 'hsa',
                      pvalueCutoff = 0.05, readable = TRUE)

## add column annotating source
reactome.ec@result$DATABASE <- "REACTOME"
kegg.ec@result$DATABASE <- "KEGG"
go.ec@result$DATABASE <- "GO"

## bind all over-representation test results
enrich.result.ec <- rbind(reactome.ec@result,
                          go.ec@result,
			  kegg.ec@result)
enrich.result.ec$gene_set <- "Gene Set I - baseline NFkB suppression"
write.csv(enrich.result.ec, file = file.path(data.dir, "nfkbi_gs1_pathways.csv"))

data.dir <- "../results/ECOR2HIO-RNAseq/"
library(magrittr)
df <- readr::read_csv(file = file.path(data.dir,"NFkBi_over_PBS.csv")) %>% dplyr::rename(SYMBOL = X1)

library(clusterProfiler)
library(org.Hs.eg.db)
## SC-514-regualted genes
gs2.ids <- bitr(intersect(gs2, nfkbi.dwn),
               fromType = "SYMBOL",
               toType = "ENTREZID",
               OrgDb = "org.Hs.eg.db")

## background gene set
all.ids <- bitr(df$SYMBOL,
                fromType = "SYMBOL",
                toType = "ENTREZID",
                OrgDb = "org.Hs.eg.db")

## over-representation test, Up-regualted
go.ec <- enrichGO(gene = gs2.ids$ENTREZID,
                  universe = all.ids$ENTREZID,
                  OrgDb = "org.Hs.eg.db",
                  ont = "BP",
                  pAdjustMethod = "none",
                  pvalueCutoff = 0.05,
                  qvalueCutoff = 0.05,
                  readable = TRUE)

## KEGG over-representation test
kegg.ec <- enrichKEGG(gene = gs2.ids$ENTREZID,
                      organism = 'hsa',
                      pvalueCutoff = 0.05)
library(ReactomePA)
## KEGG over-representation test
reactome.ec <- enrichPathway(gene = gs2.ids$ENTREZID,
                     # organism = 'hsa',
                      pvalueCutoff = 0.05, readable = TRUE)

## add column annotating source
reactome.ec@result$DATABASE <- "REACTOME"
kegg.ec@result$DATABASE <- "KEGG"
go.ec@result$DATABASE <- "GO"

## bind all over-representation test results
enrich.result.ec <- rbind(reactome.ec@result,
                          go.ec@result,
			  kegg.ec@result)
enrich.result.ec$gene_set <- "Gene Set II - baseline NFkB suppression"
write.csv(enrich.result.ec, file = file.path(data.dir, "nfkbi_gs2_pathways.csv"))


 #+end_src

**** Plot subset enrichment
#+begin_src R :session *R* :exports none :results graphics :file ../figures/figure5/NFKBi_baseline_GO_pathways_figure.png :width 1000 :height 1000 :eval yes :tangle figure_Rscripts/supplemental.R
## import data
data.dir <- "../results/ECOR2_hypoxia_nfkb/"
go.up <- readr::read_csv(file = file.path(data.dir, "nfkbi_gs1_pathways.csv"))
go.down <- readr::read_csv(file = file.path(data.dir, "nfkbi_gs2_pathways.csv"))
## combine datasets
go.data <- rbind(go.up, go.down)

library(magrittr)
go.data %<>% dplyr::select(Description, qvalue, DATABASE, gene_set) %>%
    dplyr::group_by(DATABASE, gene_set) %>%
    dplyr::mutate(pctile = ecdf(-log10(qvalue))(-log10(qvalue))) %>%
    dplyr::arrange(-pctile) %>%
    subset(.$pctile > 0.9)

go.data <- go.data[order(go.data$qvalue, decreasing = TRUE),]

go.data$Description <- factor(go.data$Description,
                                levels = unique(go.data$Description))

go.data$gene_set <- gsub(pattern = " - baseline NFkB suppression",
                       replacement = "",go.data$gene_set)
library(ggplot2)
library(ggstance)
source("ggplot2-themes.R")
figure5s1f <- ggplot(data = go.data, aes(x = -log10(qvalue),
                                   y = Description,
				   fill = gene_set)) +
#                                   fill = -log10(qvalue))) +
    geom_barh(stat = "identity") +
    facet_grid(gene_set ~ c("Subset supressed by\nSC-514 at baseline"), scales = "free_y", space = "free") +
    theme1 +
    ylab("") +
    scale_fill_brewer(palette = "Set1", direction = 1) +
   # scale_fill_gradient(expression(paste("-log"[10],"(P-value)")),
   #                     high = blue.set[8],
   #                     low = blue.set[4]) +
    theme(strip.text.x =  element_text(size = 24, face = "bold"),
          strip.text.y =  element_text(size = 32),
          strip.background = element_rect(color = "grey30", fill = "white", size = 2.5),
          panel.background = element_rect(color = NA, fill = "#B6D8B5"),
#          legend.position = "bottom",
	  legend.title = element_text(size = 24),
          axis.text.y = element_text(size = 24),
	  axis.title = element_text(size = 24),
	  plot.subtitle = element_text(size = 26, hjust = 0.5, face = "bold"),
	  panel.spacing.x = unit(0.25, "lines"),
	  panel.spacing = unit(1.5, "lines"),
	  panel.border = element_blank(),
	  legend.key.size = unit(1,"cm")) +
    ggtitle("F")

print(figure5s1f)            
#+end_src

#+RESULTS:
[[file:../figures/figure5/NFKBi_baseline_GO_pathways_figure.png]]

*** Figure 5 - Supplement 1 Multipanel 
#+begin_src R :session *R* :exports none :results graphics :file ../figures/supplemental/figure5s1_multipanel.png :width 2000 :height 2000 :eval yes :tangle figure_Rscripts/figure1.R 
## Figure 5 - Supplement 1 Multipanel -------------------------------------------
library(ggplot2)
library(gridExtra)
source("ggplot2-themes.R")
source("custom_fun.R")

figure5s1b <- png2ggplot("../data/figure5/p-65.png") +
    img.theme + ggtitle("B") + coord_fixed(ratio = 0.5)




layout <- rbind(c(1,2,2,4,4,4,4),
                c(1,3,3,4,4,4,4),
                c(1,5,5,5,6,6,6),
                c(1,5,5,5,6,6,6))


## PDF output
pdf(file = "../figures/supplemental/figure5s1_multipanel.pdf", width = 9500/300, height = 7500/300, onefile = FALSE)
gridExtra::grid.arrange(figure5s1a,figure5s1b,figure5s1c,figure5s1d,figure5s1e,figure5s1f,
             layout_matrix = layout)
dev.off()

## PNG output
png(filename = "../figures/supplemental/figure5s1_multipanel.png", width = 3000, height = 2500)
gridExtra::grid.arrange(figure5s1a,figure5s1b,figure5s1c,figure5s1d,figure5s1e,figure5s1f,
             layout_matrix = layout)
dev.off()
#+end_src

#+RESULTS:
[[file:../figures/supplemental/figure5s1_multipanel.png]]

** Figure 5 - Supplement 2

#+begin_src R :session *R* :exports none :eval yes :tangle figure_Rscripts/supplemental.R
## Figure 5 - Supplement 3
## import raw data
data <- readr::read_csv(file = "../data/figure5/170825_ELISA_results.csv")

## load libraries
library(scales)
library(grid)
library(ggplot2)
source("ggplot2-themes.R")
library(magrittr)

## statistical tests
## BD-1
bd1.p <- t.test(data[data$treatment == "PBS" & data$cytokine == "BD-1",]$pg_ml,
                data[data$treatment == "E. coli" & data$cytokine == "BD-1",]$pg_ml,
                alternative = "greater")$p.value
bd1.p2 <- t.test(data[data$treatment == "PBS" & data$cytokine == "BD-1",]$pg_ml,
                data[data$treatment == "Heat-inactivated + hypoxia" & data$cytokine == "BD-1",]$pg_ml,
                alternative = "two.sided")$p.value
bd1.p3 <- t.test(data[data$treatment == "PBS" & data$cytokine == "BD-1",]$pg_ml,
                data[data$treatment == "hypoxia" & data$cytokine == "BD-1",]$pg_ml,
                alternative = "two.sided")$p.value
## BD-2
bd2.p <- t.test(data[data$treatment == "PBS" & data$cytokine == "BD-2",]$pg_ml,
                data[data$treatment == "E. coli" & data$cytokine == "BD-2",]$pg_ml,
                alternative = "less")$p.value
bd2.p2 <- t.test(data[data$treatment == "PBS" & data$cytokine == "BD-2",]$pg_ml,
                data[data$treatment == "Heat-inactivated + hypoxia" & data$cytokine == "BD-2",]$pg_ml,
                alternative = "less")$p.value
## IL-6
il6.p <- t.test(data[data$treatment == "PBS" & data$cytokine == "IL-6",]$pg_ml,
                data[data$treatment == "E. coli" & data$cytokine == "IL-6",]$pg_ml,
                alternative = "less")$p.value
il6.p2 <- t.test(data[data$treatment == "Heat-inactivated + hypoxia" & data$cytokine == "IL-6",]$pg_ml,
                data[data$treatment == "E. coli" & data$cytokine == "IL-6",]$pg_ml,
                alternative = "less")$p.value
il6.p3 <- t.test(data[data$treatment == "PBS" & data$cytokine == "IL-6",]$pg_ml,
                data[data$treatment == "Heat-inactivated + hypoxia" & data$cytokine == "IL-6",]$pg_ml,
                alternative = "less")$p.value
il6.p4 <- t.test(data[data$treatment == "PBS" & data$cytokine == "IL-6",]$pg_ml,
                data[data$treatment == "Heat-inactivated" & data$cytokine == "IL-6",]$pg_ml,
                alternative = "less")$p.value
il6.p5 <- t.test(data[data$treatment == "PBS" & data$cytokine == "IL-6",]$pg_ml,
                data[data$treatment == "hypoxia" & data$cytokine == "IL-6",]$pg_ml,
                alternative = "less")$p.value
## IL-8
il8.p <- t.test(data[data$treatment == "PBS" & data$cytokine == "IL-8",]$pg_ml,
                data[data$treatment == "E. coli" & data$cytokine == "IL-8",]$pg_ml,
                alternative = "less")$p.value
il8.p2 <- t.test(data[data$treatment == "Heat-inactivated + hypoxia" & data$cytokine == "IL-8",]$pg_ml,
                data[data$treatment == "E. coli" & data$cytokine == "IL-8",]$pg_ml,
                alternative = "less")$p.value
il8.p3 <- t.test(data[data$treatment == "PBS" & data$cytokine == "IL-8",]$pg_ml,
                data[data$treatment == "Heat-inactivated + hypoxia" & data$cytokine == "IL-8",]$pg_ml,
                alternative = "less")$p.value
il8.p4 <- t.test(data[data$treatment == "PBS" & data$cytokine == "IL-8",]$pg_ml,
                data[data$treatment == "Heat-inactivated" & data$cytokine == "IL-8",]$pg_ml,
                alternative = "less")$p.value
il8.p5 <- t.test(data[data$treatment == "PBS" & data$cytokine == "IL-8",]$pg_ml,
                data[data$treatment == "hypoxia" & data$cytokine == "IL-8",]$pg_ml,
                alternative = "less")$p.value

## VEGF
vegf.p <- t.test(data[data$treatment == "Heat-inactivated" & data$cytokine == "VEGF",]$pg_ml,
                data[data$treatment == "E. coli" & data$cytokine == "VEGF",]$pg_ml,
                alternative = "less")$p.value


data <- dplyr::group_by(data, treatment, cytokine) %>%
    dplyr::summarise(avg = mean(pg_ml),
                     num = n(),
                     sem = sd(pg_ml, na.rm = TRUE) / n(),
                     total = sum(pg_ml, na.rm = TRUE))

data$treatment <- factor(data$treatment,
                         levels = c("PBS",
                                    "E. coli",
                                    "Heat-inactivated",
                                    "hypoxia",
                                    "Heat-inactivated + hypoxia")
                         )



elisa <- ggplot(data,
                aes(x = treatment, y = avg,
                    fill = factor(treatment),
                    color = factor(treatment))) +
    geom_bar(stat = "identity") +
    geom_errorbar(aes(ymax = avg + sem,
                      ymin = avg - sem),
                  width = 0, color = "grey70", size = 2) +
    facet_wrap(~cytokine, scales = "free_y") +
    xlab("") +
    ylab("pg/ml") +
    scale_fill_brewer(palette = "Set1", direction = 1) +
    scale_color_brewer(palette = "Set1", direction = 1) +
    ## statistical annotations
    ## BD-1
    geom_segment(data = data[data$cytokine == "BD-1",],
                 aes(x = 1,
                     xend = 2, 
                     y = 53+4,
                     yend = 53+4),
                 size = 1,
		 color = "grey30")+
    geom_text(data = data[data$cytokine == "BD-1",],
                 aes(x = 1.5,
                     y = 55+4),
              color = "grey30",
              label = paste("P = ", format(bd1.p, digits = 1))) +
    geom_segment(data = data[data$cytokine == "BD-1",],
                 aes(x = 1,
                     xend = 5, 
                     y = 73+4,
                     yend = 73+4),
                 size = 1,
		 color = "grey30")+
    geom_text(data = data[data$cytokine == "BD-1",],
                 aes(x = 3,
                     y = 75+4),
              color = "grey30",
              label = paste("P = ", format(bd1.p2, digits = 1))) +
    geom_segment(data = data[data$cytokine == "BD-1",],
                 aes(x = 1,
                     xend = 4, 
                     y = 73,
                     yend = 73),
                 size = 1,
		 color = "grey30")+
    geom_text(data = data[data$cytokine == "BD-1",],
                 aes(x = 2.5,
                     y = 75),
              color = "grey30",
              label = paste("P = ", format(bd1.p3, digits = 1))) +
    ## BD-2
    geom_segment(data = data[data$cytokine == "BD-2",],
                 aes(x = 1,
                     xend = 2, 
                     y = 750,
                     yend = 750),
                 size = 1,
		 color = "grey30")+
    geom_text(data = data[data$cytokine == "BD-2",],
                 aes(x = 1.5,
                     y = 750+20),
              color = "grey30",
              label = paste("P = ", format(bd2.p, digits = 1))) +
    geom_segment(data = data[data$cytokine == "BD-2",],
                 aes(x = 1,
                     xend = 5, 
                     y = 750+40,
                     yend = 750+40),
                 size = 1,
		 color = "grey30")+
    geom_text(data = data[data$cytokine == "BD-2",],
                 aes(x = 3,
                     y = 750+60),
              color = "grey30",
              label = paste("P = ", format(bd2.p2, digits = 1))) +
    ## IL-6
    geom_segment(data = data[data$cytokine == "IL-6",],
                 aes(x = 1,
                     xend = 2, 
                     y = 160,
                     yend = 160),
                 size = 1,
		 color = "grey30")+
    geom_text(data = data[data$cytokine == "IL-6",],
                 aes(x = 1.5,
                     y = 160+10),
              color = "grey30",
              label = paste("P = ", format(il6.p, digits = 1))) +
    geom_segment(data = data[data$cytokine == "IL-6",],
                 aes(x = 1,
                     xend = 3, 
                     y = 160+20,
                     yend = 160+20),
                 size = 1,
		 color = "grey30")+
    geom_text(data = data[data$cytokine == "IL-6",],
                 aes(x = 2,
                     y = 160+30),
              color = "grey30",
              label = paste("P = ", format(il6.p4, digits = 1))) +
    geom_segment(data = data[data$cytokine == "IL-6",],
                 aes(x = 1,
                     xend = 4, 
                     y = 160+40,
                     yend = 160+40),
                 size = 1,
		 color = "grey30")+
    geom_text(data = data[data$cytokine == "IL-6",],
                 aes(x = 2.5,
                     y = 160+50),
              color = "grey30",
              label = paste("P = ", format(il6.p5, digits = 1))) +
    geom_segment(data = data[data$cytokine == "IL-6",],
                 aes(x = 1,
                     xend = 5, 
                     y = 160+60,
                     yend = 160+60),
                 size = 1,
		 color = "grey30")+
    geom_text(data = data[data$cytokine == "IL-6",],
                 aes(x = 3,
                     y = 160+70),
              color = "grey30",
              label = paste("P = ", format(il6.p3, digits = 1))) +
    ## IL-8
    geom_segment(data = data[data$cytokine == "IL-8",],
                 aes(x = 1,
                     xend = 2, 
                     y = 2100,
                     yend = 2100),
                 size = 1,
		 color = "grey30")+
    geom_text(data = data[data$cytokine == "IL-8",],
                 aes(x = 1.5,
                     y = 2100+100),
              color = "grey30",
              label = paste("P = ", format(il8.p, digits = 1))) +
    geom_segment(data = data[data$cytokine == "IL-8",],
                 aes(x = 1,
                     xend = 4, 
                     y = 2700,
                     yend = 2700),
                 size = 1,
		 color = "grey30")+
    geom_text(data = data[data$cytokine == "IL-8",],
                 aes(x = 2.5,
                     y = 2700+100),
              color = "grey30",
              label = paste("P = ", format(il8.p5, digits = 1))) +
    geom_segment(data = data[data$cytokine == "IL-8",],
                 aes(x = 1,
                     xend = 5, 
                     y = 3800,
                     yend = 3800),
                 size = 1,
		 color = "grey30")+
    geom_text(data = data[data$cytokine == "IL-8",],
                 aes(x = 3,
                     y = 3800+100),
              color = "grey30",
              label = paste("P = ", format(il8.p3, digits = 1))) +
    ## VEGF
    geom_segment(data = data[data$cytokine == "VEGF",],
                 aes(x = 2,
                     xend = 3, 
                     y = 650,
                     yend = 650),
                 size = 1,
		 color = "grey30")+
    geom_text(data = data[data$cytokine == "VEGF",],
                 aes(x = 2.5,
                     y = 650+25),
              color = "grey30",
              label = paste("P = ", format(vegf.p, digits = 1))) +
    theme1 +
    theme(axis.text.x = element_text(angle = 45,
                                     vjust = 1,
                                     hjust = 1),
          strip.text = element_text(color = "white", size = 24),
	  strip.background = element_rect(color = "white",
                                          fill = "grey30"))
pdf(file = "../figures/supplemental/sfigure5_supp3.pdf", width = 18, height = 15, onefile = FALSE)
print(elisa)
dev.off()
#+end_src

#+RESULTS:
: 1

** Figure 6 - Supplement 2
*** Data import and manipulation 
#+begin_src R :session *R* :results silent :exports none :eval yes :tangle figure_Rscripts/supplemental.R
## FIGURE 5 - Supplement 2 -----------------------------------------------------
## import data
data2 <- read.csv(file = "../data/figure6/170831_BD_invitro_growth/170831_OD600.csv",
                   header = TRUE, skip = 2, stringsAsFactors = FALSE)

plate2 <- read.csv(file = "../data/figure6/170831_BD_invitro_growth/170831_plate_layout.csv",
                  header = TRUE, stringsAsFactors = FALSE)

## long format
data2 <- reshape2::melt(data2, id.vars =c("Time", "Temperature..C."))
data2 <- plyr::rename(data2, c("variable"="cell"))

## reformat time to hours
data2$Time <- sapply(strsplit(data2$Time, ":"), function(x) {
    x <- as.numeric(x)
    x[1] + ((x[2] + (x[3]/60))/60)
}
)

## add cell labels from plate layout      
data2 <- plyr::join(data2, plate2, by ="cell")
data2 <- data2[complete.cases(data2),]


library(magrittr) 
plot.data <- data2 %>%
    dplyr::group_by(treatment, strain, Time) %>%
    dplyr::summarize(avg = mean(value),
                     sem = sd(value)/sqrt(n()))
#+end_src

*** Generate plot
#+begin_src R :session *R* :exports none :results graphics :file ../figures/figure6/sfigure6_2.png :eval yes :tangle figure_Rscripts/supplemental.R
library(ggplot2)
source("ggplot2-themes.R")
sfigure6.2 <- ggplot(data = plot.data[plot.data$Time < 6,], aes(x = Time, y = avg)) +
    geom_point(shape = 21, size = 5, aes(fill = factor(treatment), color = factor(treatment))) +
    geom_errorbar(aes(ymax = avg + sem, ymin = avg - sem, 
                      color = factor(treatment)), width = 0) +
    xlab("Time (h)") +
    ylab(expression(paste(Delta,"OD"[600]))) +
    scale_fill_brewer(name = "Treatment", palette = "Set1", direction = 1) +
    scale_color_brewer(name = "Treatment", palette = "Set1", direction = 1) +
    facet_wrap(~strain, ncol = 2) +
    theme1 +
    theme(legend.position = c(0.15, 0.9),
          legend.title = element_text(size = 24),
	  legend.key.size = unit(1,"cm"),
	  legend.text = element_text(size = 24),
	  strip.text = element_text(size = 32)) +
    ggtitle("A")

png(filename = "../figures/figure6/sfigure6_2.png", width = 1200, height = 800)
print(sfigure6.2)
dev.off()
ggsave(filename = "../figures/figure6/eps/sfigure6_2.eps", 
plot = sfigure6.2, 
width = 24, height = 16)
#+end_src

#+RESULTS:
[[file:../figures/figure6/sfigure6_2.png]]

*** K and DT calculation
#+begin_src R :session *R* :results silent :exports none :eval yes :tangle figure_Rscripts/figure6.R
## calculate growth curves & carrying capacity
library(magrittr)
## limit dataset to log - stationary phase (exclude post-stationary phase)
data3 <- subset(data2, data2$Time < 6)

gc.data <- dplyr::group_by(data3, cell) %>%
    dplyr::summarise(K = growthcurver::SummarizeGrowth(Time, value)[1]$vals$k,
                     DT = growthcurver::SummarizeGrowth(Time, value)[1]$vals$t_gen,
                     t_mid = growthcurver::SummarizeGrowth(Time, value)[1]$vals$t_mid) %>%
    dplyr::right_join(dplyr::select(data2, cell, treatment, strain) , by = "cell") %>%
    dplyr::distinct(cell, K, DT, treatment, strain, t_mid)

## statistical tests
gc.test1 <- t.test(gc.data[gc.data$treatment == 'PBS' & gc.data$strain == "E. coli ECOR2",]$K,
                   gc.data[gc.data$treatment == '1.0 ug/ml BD-2' & gc.data$strain == "E. coli ECOR2",]$K,
                   alternative = "greater")$p.value
gc.test2 <- t.test(gc.data[gc.data$treatment == 'PBS' & gc.data$strain == "E. coli K12",]$K,
                   gc.data[gc.data$treatment == '1.0 ug/ml BD-2' & gc.data$strain == "E. coli K12",]$K,
                   alternative = "greater")$p.value

#+end_src

*** Generate plot
#+begin_src R :session *R* :exports none :results graphics :file ../figures/figure6/sfigure6_2b.png :eval yes :tangle figure_Rscripts/supplemental.R
library(ggplot2)
source("ggplot2-themes.R")
figure6e <- ggplot(data = gc.data, aes(x = stringr::str_wrap(treatment, width = 20), y = K)) +
    geom_boxplot(aes(color = treatment), size = 2, outlier.size = 3) +
    facet_wrap(~strain, ncol = 2) +	
    xlab("") +
    ylab("Carrying capacity (K)") +
    scale_fill_brewer(name = "Treatment", palette = "Set1", direction = 1) +
    scale_color_brewer(name = "Treatment", palette = "Set1", direction = 1) +
    theme1 +
    theme(legend.position = "none",
          legend.title = element_text(size = 24),
	  legend.key.size = unit(1.5,"cm"),
	  legend.text = element_text(size = 24),
          axis.text.x = element_text(angle = 45, hjust = 1, vjust = 1),
	  strip.text = element_text(size = 32)) +
    geom_text(data = gc.data[gc.data$strain == "E. coli ECOR2",],
                 aes(x = 1,
                     y = 0.205),
              size = 10,
              color = "grey30",
              label = paste("P = ", format(gc.test1, digits = 1))) +
    geom_text(data = gc.data[gc.data$strain == "E. coli K12",],
              aes(x = 1,
                  y = 0.220),
              size = 10,
              color = "grey30",
              label = paste("P = ", format(gc.test2, digits = 1))) +
    ggtitle("B")

png(filename = "../figures/figure6/sfigure6_2b.png", width = 1000, height = 800)
print(figure6e)
dev.off()
ggsave(filename = "../figures/figure6/eps/sfigure6_2b.png", 
plot = figure6e, 
width = 16, height = 16)
#+end_src

#+RESULTS:
[[file:../figures/figure6/sfigure6_2b.png]]

*** ECOR2 Stationary phase
**** Data import and manipulation
  #+begin_src R :session *R* :results silent :exports none :eval yes :tangle figure_Rscripts/supplemental.R
## import data 
data <- readr::read_csv(file = "../data/figure6/170825_ECOR2_BD2_invitro/9_1_2017.csv", col_names = TRUE, skip = 12)
## retrieve letter
data$letter <- substr(data$Plate_ID,1,1)

## groups dataframe
groups <- readr::read_csv(file = "../data/figure6/170825_ECOR2_BD2_invitro/170901_plate_layout.csv", col_names = TRUE)

## map to data frame
data <- dplyr::left_join(data, groups, by = 'letter')

## statistical tests
tt1 <- t.test(data[data$letter == "A" | data$letter == "D",]$Count_per_ml,
              data[data$letter == "B",]$Count_per_ml,
              alternative = 'greater')

tt2 <- t.test(data[data$letter == "A" | data$letter == "D",]$Count_per_ml,
              data[data$letter == "C",]$Count_per_ml,
              alternative = 'greater')


  #+end_src
**** Plotting

 #+begin_src R :session *R* :exports none :results graphics :file ../figures/figure6/sfigure6_2c.png :width 600 :height 1000 :eval yes :tangle figure_Rscripts/supplemental.R
library(ggplot2)

source("ggplot2-themes.R")

sfig5.2c <- ggplot(data = data[data$letter != "B",], aes(x = stringr::str_wrap(treatment, width = 20), y = Count_per_ml)) +
    geom_boxplot(aes(color = treatment), size = 3) +
    ylab("CFU/mL") +
    xlab("") +
    theme1 +
    scale_color_brewer(palette = "Set1", direction = 1) +
    geom_text(x = 1, y = 7400, size = 8, color = "grey30",
             label = paste("P =" , round(tt2$p.value, digits = 3))) +
    ylim(c(5800,8100)) +
    facet_wrap(~ c(stringr::str_wrap("E. coli ECOR2 (stationary phase)", width = 20))) +
    theme(legend.position = "none",
          axis.text.x = element_text(angle = 45,
                                     vjust = 1,
                                     hjust = 1),
          strip.text = element_text(size = 24)) +
    ggtitle("C")

print(sfig5.2c)

 #+end_src

 #+RESULTS:
 [[file:../figures/figure6/sfigure6_2c.png]]

*** Multipanel Figure 6 Supplement 2 
#+begin_src R :session *R* :exports none :results graphics :file ../figures/figure6/sfigure6.png :eval yes :tangle figure_Rscripts/supplemental.R
library(gridExtra)
layout <- rbind(c(1,1,1),
                c(2,2,3))

## PDF output
pdf(file = "../figures/figure6/figure6_supplement2.pdf", width = 6400/300, height = 6400/300, onefile = FALSE)
gridExtra::grid.arrange(sfigure6.2,figure6e,sfig5.2c, layout_matrix = layout)
dev.off()

png(filename = "../figures/figure6/sfigure6_2.png", width = 1920, height = 1600)
gridExtra::grid.arrange(sfigure6.2,figure6e,sfig5.2c, layout_matrix = layout)
dev.off()

ggsave(filename = "../figures/figure6/sfigure6_2.eps", 
plot = gridExtra::grid.arrange(sfigure6.2,figure6e, sfig5.2c, layout_matrix = layout),
       width = 48, height = 12)
#+end_src

#+RESULTS:
[[file:../figures/figure6/sfigure6.png]]


* Notes								   :noexport:
*** Figure 8B: FD4 permeability is reduced in /E. coli/ colonized HIOs treated with TNF and IFN 
    
**** Data import and manipulation 
#+begin_src R :session *R* :results silent :exports none :eval yes :tangle figure_Rscripts/figure8.R
## FIGURE 8 --------------------------------------------------------------------
## Figure 8B: FD4 permeability is reduced in /E. coli/ colonized HIOs treated with TNF and IFN 
## import data
## read in the raw data file from ImageJ
data <- readr::read_csv(file = "../data/figure8/results.csv")

## data wrangling ##########

## extract sample number from Label
sno <- "[_]([0-9]{2})[_R3D]"
## extract time point (image number) from label
time <- "t([0-9]{3})"
data$organoid <- as.numeric(stringr::str_match(data$Label, sno)[,2])
data$image <- as.numeric(stringr::str_match(data$Label, time)[,2])
## calculate minutes and hr timepoints
data$min <- (data$image * 10) - 10
data$hr <- data$min/60

## convert NaN to 0
is.nan.data.frame <- function(x) {
    do.call(cbind, lapply(x, is.nan))}
data$Mean[is.nan.data.frame(data$Mean)] <- 0

data$Mean_area <- data$Mean * data$Area

## subset baseline measurement
baseline <- subset(data, data$image == 1)
baseline$t0 <- baseline$Mean
baseline$t0_area <- baseline$Mean_area

baseline <- dplyr::select(baseline, organoid, t0, t0_area)
## create column with baseline measurements
data <- dplyr::left_join(data, baseline, by = "organoid") 

## read in sample key
key <- readr::read_csv(file = "../data/figure8/sample_key.csv")
## ... and merge
data <- dplyr::left_join(data, key, by = "organoid") 

## normalized fluorescence
data$normalized <- data$Mean/data$t0
data$normalized_area <- data$Mean_area/data$t0_area

library(magrittr)
data_mean <- dplyr::group_by(data, treatment, hr) %>%
    dplyr::summarise(mean = mean(normalized), 
                     stdev = sd(normalized),
                     num = n(),
                     iqr = IQR(normalized),
                     min = min(normalized),
                     max = max(normalized),
                     median = median(normalized))

data_mean$sem <- data_mean$stdev/sqrt(data_mean$num)

data_mean_area <- dplyr::group_by(data, treatment, hr) %>%
    dplyr::summarise(mean = mean(normalized_area), 
                     stdev = sd(normalized_area),
                     num = n(),
                     iqr = IQR(normalized_area),
                     min = min(normalized_area),
                     max = max(normalized_area),
                     median = median(normalized_area))

data_mean_area$sem <- data_mean_area$stdev/sqrt(data_mean_area$num)

##Import csv
data <- read.table("../data/figure8/ECOR2_TNF_IFN_permeability.csv",header=TRUE,sep=",")

library(ggplot2)

#list of sample columns
samples <- grep("HIO",colnames(data))

#calculate row mean
data$mean <- rowMeans(data[,samples],na.rm=TRUE)
#calculate row SEM (counts number of non NA samples)
data$sem <- apply(data[,samples],1,sd,na.rm=TRUE)/sqrt(rowSums(!is.na(data[,samples])))
data$n <- rowSums(!is.na(data[,samples]))

## get the two datasets to play nicely
data$treatment <- gsub("E. coli", "ECOR2", data$treatment)
data <- dplyr::select(data, hr, mean, sem, treatment)
data_mean <- dplyr::select(data_mean, hr, mean, sem, treatment)
attributes(data_mean) <- NULL
data_mean <- rbind(data, data_mean)
data_mean <- data_mean[order(data_mean$treatment,data_mean$mean),]
#+end_src

**** Generate plot
#+begin_src R :session *R* :exports none :results graphics :file ../figures/figure8/figure8b.png :eval yes :tangle figure_Rscripts/figure8.R
library(ggplot2)
source("ggplot2-themes.R")
figure8b <- ggplot(data_mean, aes(x = hr, y = mean, color = treatment)) +
    scale_color_brewer(palette = "Spectral", name = "Treatment group", direction = -1) +
    geom_smooth(size = 3) +
    theme_bw() +
    ylim(c(0.3, 1.05)) +
    xlab("Time post-treatment (h)") +
    ylab("Relative Fluorescence") +
    scale_x_continuous(breaks = c(0, 3, 6, 9, 12, 15, 18, 21, 24)) +
    theme1 + ggtitle("B") +
    theme(legend.position = c(0.25,0.2),
    	  legend.key.size = unit(1.5,"cm"),
          legend.text = element_text(size = 32))

png(filename = "../figures/figure8/figure8b.png", width = 800, height = 800)
print(figure8b)
dev.off()
ggsave(filename = "../figures/figure8/eps/figure8b.eps", 
       plot = figure8b, 
       width = 16, height = 16)
#+end_src

#+RESULTS:
[[file:../figures/figure8/figure8b.png]]
-
